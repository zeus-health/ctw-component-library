{"version":3,"file":"patient-conditions.stories.eadbe7fb.js","sources":["../../node_modules/@heroicons/react/outline/esm/PlusIcon.js","../../src/components/content/conditions/patient-conditions-actions.tsx","../../src/components/content/conditions/patient-conditions-columns.tsx","../../src/components/content/conditions/patient-conditions-filters.tsx","../../src/components/content/conditions/patient-conditions-header.tsx","../../src/components/content/conditions/patient-conditions.tsx","../../src/components/content/conditions/patient-conditions.stories.tsx"],"sourcesContent":["import * as React from \"react\";\n\nfunction PlusIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 4v16m8-8H4\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(PlusIcon);\nexport default ForwardRef;","import { PlusIcon } from \"@heroicons/react/outline\";\nimport { curry } from \"lodash\";\nimport { useState } from \"react\";\nimport { createOrEditCondition } from \"../forms/actions/conditions\";\nimport {\n  conditionAddSchema,\n  getAddConditionData,\n} from \"../forms/schemas/condition-schema\";\nimport { DrawerFormWithFields } from \"@/components/core/form/drawer-form-with-fields\";\nimport { usePatient } from \"@/components/core/patient-provider\";\nimport { Toggle } from \"@/components/core/toggle\";\nimport { getNewCondition } from \"@/fhir/conditions\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nexport type PatientConditionsActionsProps = {\n  hideAdd: boolean;\n  onToggleShowHistoric: () => void;\n};\n\nexport function PatientConditionsActions({\n  hideAdd,\n  onToggleShowHistoric,\n}: PatientConditionsActionsProps) {\n  const patientResponse = usePatient();\n  const patientId = patientResponse.data?.id ?? \"\";\n  const [isAddDrawerOpen, setIsAddDrawerOpen] = useState(false);\n\n  const newCondition = new ConditionModel(getNewCondition(patientId));\n  const newConditionData = getAddConditionData({\n    condition: newCondition,\n  });\n  const handleAddAction = curry(createOrEditCondition)(newCondition, patientId);\n\n  return (\n    <div className=\"ctw-flex ctw-items-center ctw-justify-end ctw-space-x-2 ctw-border-0 ctw-border-t ctw-border-solid ctw-border-divider-light ctw-py-5 ctw-px-4\">\n      <Toggle\n        name=\"historic\"\n        text=\"Show Historic\"\n        onChange={onToggleShowHistoric}\n      />\n      {!hideAdd && (\n        <button\n          type=\"button\"\n          className=\"ctw-btn-icon\"\n          onClick={() => setIsAddDrawerOpen(true)}\n        >\n          <PlusIcon className=\"ctw-h-4 ctw-w-4\" />\n        </button>\n      )}\n\n      <DrawerFormWithFields\n        title=\"Add Condition\"\n        action={handleAddAction}\n        data={newConditionData}\n        schema={conditionAddSchema}\n        isOpen={isAddDrawerOpen}\n        onClose={() => setIsAddDrawerOpen(false)}\n      />\n    </div>\n  );\n}\n","import cx from \"classnames\";\nimport { compact } from \"lodash\";\nimport { TableColumn } from \"@/components/core/table/table-helpers\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nfunction statusToColor(status: string) {\n  switch (status) {\n    case \"Active\":\n      return \"ctw-text-success-main\";\n    case \"Pending\":\n      return \"ctw-text-caution-main\";\n    default:\n      return \"ctw-text-content-lighter\";\n  }\n}\n\nexport const patientConditionsColumns: TableColumn<ConditionModel>[] = [\n  {\n    widthPercent: 30,\n    minWidth: 320,\n    render: (condition) => (\n      <div>\n        <div className=\"ctw-pc-title\">{condition.display}</div>\n        <div className=\"ctw-pc-chapter\">{condition.ccsChapter}</div>\n      </div>\n    ),\n  },\n  {\n    render: (condition) => (\n      <div className=\"ctw-pc-status-container\">\n        <div\n          className={cx(\"ctw-pc-status-dot\", statusToColor(condition.status))}\n        >\n          &bull;\n        </div>\n        <div className=\"ctw-pc-status-and-extra\">\n          <div className=\"ctw-pc-status\">{condition.status}</div>\n\n          {condition.isSummaryResource ? (\n            <div>\n              {compact([\n                condition.patient?.organization?.name,\n                condition.recordedDate,\n              ]).join(\" \")}\n            </div>\n          ) : (\n            <div>\n              {compact([condition.recorder, condition.recordedDate]).join(\" \")}\n            </div>\n          )}\n        </div>\n      </div>\n    ),\n    widthPercent: 30,\n    minWidth: 128,\n  },\n  {\n    widthPercent: 30,\n    minWidth: 132,\n    render: (condition) => {\n      const onsetText = condition.isSummaryResource\n        ? \"Earliest known onset:\"\n        : \"Onset:\";\n\n      return (\n        <div className=\"ctw-pc-onset-notes\">\n          {condition.onset && (\n            <div>\n              {onsetText} {condition.onset}\n            </div>\n          )}\n          <div className=\"ctw-pc-notes\">{condition.notes.join(\" \")}</div>\n        </div>\n      );\n    },\n  },\n];\n","import { cloneDeep, merge } from \"lodash\";\nimport { useState } from \"react\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nexport type FilterCollection = \"patient\" | \"other\";\n\nexport type Filters = {\n  collection: FilterCollection;\n  showHistoric: boolean;\n};\n\nexport function useConditionFilters() {\n  const [filters, setFilters] = useState<Filters>({\n    collection: \"patient\",\n    showHistoric: false,\n  });\n\n  function updateFilters(newFilters: Partial<Filters>) {\n    setFilters(merge(cloneDeep(filters), newFilters));\n  }\n\n  function applyFilters(\n    patientConditions: ConditionModel[],\n    otherConditions: ConditionModel[]\n  ) {\n    const conditions =\n      filters.collection === \"patient\" ? patientConditions : otherConditions;\n    return conditions.filter((c) => {\n      if (filters.showHistoric) return true;\n\n      return [\"Active\", \"Pending\"].includes(c.status);\n    });\n  }\n\n  return { filters, updateFilters, applyFilters };\n}\n","import cx from \"classnames\";\nimport { FilterCollection } from \"./patient-conditions-filters\";\nimport { Badge } from \"@/components/core/badge\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nexport type PatientConditionsHeaderProps = {\n  collection: FilterCollection;\n  otherConditions: ConditionModel[];\n  onCollectionChange: (collection: FilterCollection) => void;\n};\n\nexport function PatientConditionsHeader({\n  collection,\n  otherConditions,\n  onCollectionChange,\n}: PatientConditionsHeaderProps) {\n  function activeClass(collection2: FilterCollection) {\n    return collection === collection2 ? \"ctw-btn-primary\" : \"ctw-btn-default\";\n  }\n\n  const activeCount = otherConditions.filter(\n    (condition) => condition.status === \"Active\"\n  ).length;\n\n  return (\n    <div className=\"ctw-flex ctw-items-center ctw-justify-between ctw-py-5 ctw-px-4\">\n      <div className=\"ctw-text-xl ctw-font-medium ctw-text-content-black\">\n        Conditions\n      </div>\n      <div className=\"ctw-space-x-2\">\n        <button\n          type=\"button\"\n          className={activeClass(\"patient\")}\n          onClick={() => onCollectionChange(\"patient\")}\n        >\n          Patient Record\n        </button>\n        <button\n          type=\"button\"\n          className={cx(activeClass(\"other\"), \"ctw-space-x-2\")}\n          onClick={() => onCollectionChange(\"other\")}\n        >\n          <span>Other Provider Records</span>\n          <Badge text={`${activeCount}`} color=\"gray\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n","import cx from \"classnames\";\nimport \"./patient-conditions.scss\";\nimport { useRef } from \"react\";\nimport { filterOtherConditions } from \"./helpers\";\nimport { PatientConditionsActions } from \"./patient-conditions-actions\";\nimport { patientConditionsColumns } from \"./patient-conditions-columns\";\nimport { useConditionFilters } from \"./patient-conditions-filters\";\nimport { PatientConditionsHeader } from \"./patient-conditions-header\";\nimport { Table } from \"@/components/core/table/table\";\nimport {\n  useOtherProviderConditions,\n  usePatientConditions,\n} from \"@/fhir/conditions\";\nimport { useBreakpoints } from \"@/hooks/use-breakpoints\";\n\nexport type PatientConditionsProps = {\n  className?: string;\n  readOnly?: boolean;\n};\n\nexport function PatientConditions({\n  className,\n  readOnly = false,\n}: PatientConditionsProps) {\n  // State.\n  const { filters, updateFilters, applyFilters } = useConditionFilters();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const breakpoints = useBreakpoints(containerRef);\n\n  // Data fetching.\n  const patientConditionsQuery = usePatientConditions();\n  const otherConditionsQuery = useOtherProviderConditions();\n\n  function isLoading() {\n    const isLoadingPatient = patientConditionsQuery.isLoading;\n    const isLoadingOther = isLoadingPatient || otherConditionsQuery.isLoading;\n    return filters.collection === \"patient\" ? isLoadingPatient : isLoadingOther;\n  }\n\n  // Get our conditions.\n  const patientConditions = patientConditionsQuery.data ?? [];\n  const otherConditions = filterOtherConditions(\n    otherConditionsQuery.data ?? [],\n    patientConditions,\n    true\n  );\n  const conditions = applyFilters(patientConditions, otherConditions);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cx(\"ctw-patient-conditions\", className, {\n        \"ctw-patient-conditions-stacked\": breakpoints.sm,\n      })}\n    >\n      <PatientConditionsHeader\n        otherConditions={otherConditions}\n        collection={filters.collection}\n        onCollectionChange={(collection) => updateFilters({ collection })}\n      />\n      <PatientConditionsActions\n        hideAdd={readOnly || filters.collection === \"other\"}\n        onToggleShowHistoric={() =>\n          updateFilters({ showHistoric: !filters.showHistoric })\n        }\n      />\n      <Table\n        stacked={breakpoints.sm}\n        className=\"-ctw-mx-px !ctw-rounded-none\"\n        showTableHead={false}\n        isLoading={isLoading()}\n        records={conditions}\n        columns={patientConditionsColumns}\n      />\n    </div>\n  );\n}\n","import type { Meta, StoryObj } from \"@storybook/react\";\nimport {\n  PatientConditions,\n  PatientConditionsProps,\n} from \"./patient-conditions\";\nimport { otherConditions } from \"./story-helpers/mocks/other-conditions\";\nimport { patientConditions } from \"./story-helpers/mocks/patient-conditions\";\nimport { setupConditionMocks } from \"./story-helpers/mocks/requests\";\nimport { CTWProvider } from \"@/components/core/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\n\ntype Props = PatientConditionsProps;\n\nexport default {\n  component: PatientConditions,\n  tags: [\"docsPage\"],\n  argTypes: {\n    className: {\n      options: [\"Blank\", \"Fixed Width\"],\n      control: \"select\",\n      mapping: {\n        Blank: \"\",\n        \"Fixed Width\": \"ctw-m-auto ctw-max-w-[600px]\",\n      },\n    },\n  },\n  args: {\n    className: \"Blank\",\n    readOnly: false,\n  },\n  decorators: [\n    (Story, { args }) => (\n      <CTWProvider env=\"dev\" authToken=\"dummy-token\" builderId=\"b123\">\n        <PatientProvider patientID=\"u12345\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>\n    ),\n  ],\n} as Meta<Props>;\n\nexport const Basic: StoryObj<Props> = {\n  ...setupConditionMocks({ otherConditions, patientConditions }),\n};\n"],"names":["PlusIcon","props","svgRef","React.createElement","ForwardRef","React.forwardRef","PlusIcon$1","PatientConditionsActions","hideAdd","onToggleShowHistoric","patientId","_b","_a","usePatient","isAddDrawerOpen","setIsAddDrawerOpen","useState","newCondition","ConditionModel","getNewCondition","newConditionData","getAddConditionData","handleAddAction","curry","createOrEditCondition","React","Toggle","DrawerFormWithFields","conditionAddSchema","statusToColor","status","patientConditionsColumns","condition","cx","compact","onsetText","useConditionFilters","filters","setFilters","updateFilters","newFilters","merge","cloneDeep","applyFilters","patientConditions","otherConditions","c","PatientConditionsHeader","collection","onCollectionChange","activeClass","collection2","activeCount","Badge","PatientConditions","className","readOnly","containerRef","useRef","breakpoints","useBreakpoints","patientConditionsQuery","usePatientConditions","otherConditionsQuery","useOtherProviderConditions","isLoading","isLoadingPatient","isLoadingOther","filterOtherConditions","conditions","Table","patientConditions_stories","Story","args","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupConditionMocks"],"mappings":"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"}