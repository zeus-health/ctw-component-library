{"version":3,"file":"provider-meds-table.stories.c2267ea4.js","sources":["../../src/components/content/medications/provider-meds-table.tsx","../../src/components/content/medications/provider-meds-table.stories.tsx"],"sourcesContent":["import { get, pipe, toLower } from \"lodash/fp\";\nimport { useEffect, useState } from \"react\";\nimport { MedicationDrawer } from \"@/components/content/medication-drawer\";\nimport { MedicationsTableBase } from \"@/components/content/medications-table-base\";\nimport { MedicationStatementModel } from \"@/fhir/models/medication-statement\";\nimport { useQueryAllPatientMedications } from \"@/hooks/use-medications\";\nimport { sort } from \"@/utils/sort\";\n\nexport type ProviderMedsTableProps = {\n  className?: string;\n  sortColumn?: keyof MedicationStatementModel;\n  sortOrder?: \"asc\" | \"desc\";\n  // should inactive meds be shown?\n  showInactive?: boolean;\n};\n\n/**\n * Displays a table of medications that are scoped to the CTWContext builder\n * and patient. To show medications that aren't scoped to the builder, use the\n * `OtherProviderMedsTable` instead.\n *\n * The table has a menu to the right side which will pull out the\n * history for the medication listed in that row.\n */\nexport function ProviderMedsTable({\n  showInactive = false,\n  sortColumn = \"display\",\n  sortOrder = \"asc\",\n}: ProviderMedsTableProps) {\n  const [medicationModels, setMedicationModels] = useState<\n    MedicationStatementModel[]\n  >([]);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [selectedMedication, setSelectedMedication] =\n    useState<MedicationStatementModel>();\n  const { builderMedications, isLoading } = useQueryAllPatientMedications();\n\n  function openMedicationDrawer(row: MedicationStatementModel) {\n    setSelectedMedication(row);\n    setDrawerOpen(true);\n  }\n\n  useEffect(() => {\n    if (!builderMedications) return;\n    setMedicationModels(\n      sort(\n        showInactive\n          ? builderMedications\n          : builderMedications.filter((bm) => bm.status === \"Active\"),\n        pipe(get(sortColumn), toLower),\n        sortOrder\n      )\n    );\n  }, [builderMedications, sortColumn, sortOrder, showInactive]);\n\n  return (\n    <>\n      <MedicationsTableBase\n        medicationStatements={medicationModels}\n        isLoading={isLoading}\n        rowActions={(medication) => [\n          {\n            name: \"View History\",\n            action: () => {\n              openMedicationDrawer(medication);\n            },\n          },\n        ]}\n      />\n      <MedicationDrawer\n        medication={selectedMedication}\n        isOpen={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n      />\n    </>\n  );\n}\n","import type { Meta, StoryObj } from \"@storybook/react\";\nimport {\n  ProviderMedsTable,\n  ProviderMedsTableProps,\n} from \"@/components/content/medications/provider-meds-table\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\nimport { CTWProvider } from \"@/components/core/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/patient-provider\";\nimport otherProviderMedsTableStories from \"@/components/content/medications/other-provider-meds-table.stories\";\n\ntype Props = ProviderMedsTableProps;\n\nexport default {\n  tags: [\"docsPage\"],\n  component: ProviderMedsTable,\n  decorators: [\n    (Story, { args }) => (\n      <CTWProvider env=\"dev\" authToken=\"12345\" builderId=\"12345\">\n        <PatientProvider patientID=\"007\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>\n    ),\n  ],\n  parameters: otherProviderMedsTableStories.parameters,\n} as Meta<Props>;\n\nexport const Basic: StoryObj<Props> = {\n  args: {\n    sortColumn: \"display\",\n    sortOrder: \"asc\",\n  },\n};\n"],"names":["ProviderMedsTable","showInactive","sortColumn","sortOrder","medicationModels","setMedicationModels","useState","drawerOpen","setDrawerOpen","selectedMedication","setSelectedMedication","builderMedications","isLoading","useQueryAllPatientMedications","openMedicationDrawer","row","useEffect","sort","bm","pipe","get","toLower","React","MedicationsTableBase","medication","MedicationDrawer","providerMedsTable_stories","Story","args","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","otherProviderMedsTableStories","Basic"],"mappings":"6kBAwBO,SAAAA,EAAA,CAA2B,aAAAC,EAAA,GACjB,WAAAC,EAAA,UACF,UAAAC,EAAA,KAEf,EAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAA,CAAA,CAAA,EAGA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,QAAA,SAAA,EAAA,EACA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,QAAA,SAAA,EAEA,CAAA,mBAAAK,EAAA,UAAAC,CAAA,EAAAC,EAAA,EAEA,SAAAC,EAAAC,EAAA,CACEL,EAAAK,CAAA,EACAP,EAAA,EAAA,CAAkB,CAGpBQ,OAAAA,EAAAA,QAAAA,UAAA,IAAA,CACE,CAAAL,GACAN,EAAAY,EACEhB,EAAAU,EAAAA,EAAA,OAAAO,GAAAA,EAAA,SAAA,QAAA,EAG8DC,EAAAA,KAAAC,EAAA,IAAAlB,CAAA,EAAAmB,SAAA,EAC/BlB,CAC7B,CACF,CACF,EAAA,CAAAQ,EAAAT,EAAAC,EAAAF,CAAA,CAAA,EAGFqB,EAAA,cAAAA,EAAA,SAAA,KAAAA,EAAA,cAAAC,EAAA,CAEK,qBAAAnB,EACuB,UAAAQ,EACtB,WAAAY,GAAA,CAC4B,CAC1B,KAAA,eACQ,OAAA,IAAA,CAEJV,EAAAU,CAAA,CAA+B,CACjC,CACF,CACF,CAAA,EAAAF,EAAA,cAAAG,EAAA,CAED,WAAAhB,EACa,OAAAF,EACJ,QAAA,IAAAC,EAAA,EAAA,CAC0B,CAAA,CAAA,CAI1C;;;;;knDChEA,MAAekB,EAAA,CACb,KAAM,CAAC,UAAU,EACjB,UAAW1B,EACX,WAAY,CACV,CAAC2B,EAAO,CAAE,KAAAC,CAAA,IACPN,EAAA,cAAAO,EAAA,CAAY,IAAI,MAAM,UAAU,QAAQ,UAAU,OAAA,EAChDP,EAAA,cAAAQ,EAAA,CAAgB,UAAU,MAAM,UAAWC,CAAA,EACzCT,EAAA,cAAAK,EAAA,CAAM,KAAAC,CAAY,CAAA,CACrB,CACF,CAEJ,EACA,WAAYI,EAA8B,UAC5C,EAEaC,EAAyB,CACpC,KAAM,CACJ,WAAY,UACZ,UAAW,KACb,CACF"}