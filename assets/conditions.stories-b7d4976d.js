import{R as n,r as l}from"./index-6f814c40.js";import{w as y,u as m,a as he,b as A,e as g}from"./index-5f0f3c0b.js";import{c as ge}from"./index-74f03c09.js";import{T as Ve,l as ke}from"./table-cdb42f1f.js";import{D as Ie,a as Me,C as De,m as u,g as ve,u as Fe,b as Re,c as Oe,e as Le,d as je,f as We,h as ze,i as Ue,j as $e,T as Ge,k as Ze,l as Ye,n as oe,o as Je,p as Ke,P as Xe,S as Qe}from"./index-7e6fa300.js";import{u as et,c as M,t as tt,C as nt,M as at,o as it,a as ot,g as rt,b as re,f as st,s as Ce,d as dt,p as ct}from"./requests-b4a82416.js";import{c as be}from"./index-7a14e213.js";import"./_commonjsHelpers-042e6b4d.js";import"./uniq-0d9aa453.js";import"./_baseIsEqual-64a04d25.js";import"./_getTag-6c111e57.js";import"./index-63320c34.js";import"./index-356e4a49.js";import"./spinner-66aa4ba7.js";import"./drawer-6b4601a7.js";import"./index-6de6b113.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./action-list-6f062f6a.js";import"./data-list-254aa0b0.js";import"./extends-98964cd2.js";import"./coding-list-1d7c950f.js";function H({className:e,conditions:t,rowMenuActions:i,hideMenu:a,sort:s={columnTitle:"Last Recorded",dir:"desc"},onSort:c,...f}){const o=[{title:"Condition",dataIndex:"display",widthPercent:40,minWidth:320,sortIndices:[{index:"display"},{index:"recorded",dir:"desc"}]},{title:"Category",dataIndex:"ccsGrouping",widthPercent:25,minWidth:192,sortIndices:[{index:"ccsGrouping"},{index:"display",dir:"asc"}]},{title:"Status",render:d=>n.createElement("div",{className:"ctw-capitalize"},n.createElement("div",{className:"ctw-text-content-black"},d.clinicalStatus),n.createElement("div",null,d.isArchived?"Archived":d.verificationStatus)),widthPercent:17.5,minWidth:128,sortIndices:[{index:"clinicalStatus"},{index:"verificationStatus"},{index:"recorded",dir:"desc"}]},{title:"Last Recorded",dataIndex:"recordedDate",widthPercent:17.5,minWidth:132,sortIndices:[{index:"recorded"},{index:"display",dir:"asc"}]}];return a||o.push({className:"ctw-table-action-column",render:d=>n.createElement(Ie,{menuItems:i(d)},n.createElement(Me,{className:"ctw-w-5"}))}),n.createElement(Ve,{className:e,records:t,columns:o,sort:s,onSort:c,...f})}try{H.displayName="ConditionsTableBase",H.__docgenInfo={description:"",displayName:"ConditionsTableBase",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | (string & Mapping) | (string & ArgumentArray)"}},conditions:{defaultValue:null,description:"",name:"conditions",required:!0,type:{name:"ConditionModel[]"}},rowMenuActions:{defaultValue:null,description:"",name:"rowMenuActions",required:!0,type:{name:"(condition: ConditionModel) => MenuItem[]"}},hideMenu:{defaultValue:null,description:"",name:"hideMenu",required:!0,type:{name:"boolean"}},handleRowClick:{defaultValue:null,description:"",name:"handleRowClick",required:!1,type:{name:"((record: ConditionModel) => void)"}},RowActions:{defaultValue:null,description:"",name:"RowActions",required:!1,type:{name:"ComponentType<{ record: ConditionModel; }>"}},isLoading:{defaultValue:null,description:"",name:"isLoading",required:!1,type:{name:"boolean"}},emptyMessage:{defaultValue:null,description:"Displayed when we have 0 records.",name:"emptyMessage",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},showTableHead:{defaultValue:null,description:"",name:"showTableHead",required:!1,type:{name:"boolean"}},stacked:{defaultValue:null,description:"",name:"stacked",required:!1,type:{name:"boolean"}},sort:{defaultValue:{value:'{ columnTitle: "Last Recorded", dir: "desc" }'},description:"",name:"sort",required:!1,type:{name:"TableSort"}},onSort:{defaultValue:null,description:"",name:"onSort",required:!1,type:{name:"((sort: TableSort) => void)"}},hidePagination:{defaultValue:null,description:"",name:"hidePagination",required:!1,type:{name:"boolean"}}}}}catch{}function z({className:e}){return n.createElement("div",{className:ge("ctw-conditions",e)},n.createElement("div",{className:"ctw-heading-container"},n.createElement("div",{className:"ctw-title"},"Conditions")),n.createElement("div",{className:"ctw-p-5"},n.createElement(De,{header:"Conditions Unavailable"},n.createElement("div",null,"We are unable to access Condition information for this patient."),n.createElement("div",null,"Contact your system administrator or customer service for assistance."))))}try{z.displayName="ConditionsNoPatient",z.__docgenInfo={description:"",displayName:"ConditionsNoPatient",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}const U=e=>{var t,i,a,s,c;return[{label:"treating-provider",render:()=>n.createElement("div",{className:"ctw-font-medium"},"Who is the treating provider for this patient?")},{label:"Practitioner Name",field:"name",value:"",readonly:!1},[{label:"NPI",field:"npi",value:"",readonly:!1},{label:"Role",field:"role",value:"",readonly:!1}],{label:"patient-information",render:()=>n.createElement("div",null,n.createElement("div",{className:"ctw-font-medium"},"Is the patient information below correct and up-to-date?"),n.createElement("div",null,"Complete as many fields as possible to increase matching results."))},{label:"First Name",field:"firstName",value:e.firstName,readonly:!1},{label:"Last Name",field:"lastName",value:e.lastName,readonly:!1},[{label:"Date of Birth",field:"dateOfBirth",value:e.dob,readonly:!1},{label:"Gender",field:"gender",value:e.gender,readonly:!1}],{label:"Address",field:"address",value:(i=(t=e.homeAddress)==null?void 0:t.line)==null?void 0:i.join(", "),readonly:!1},{label:"City",field:"city",value:(a=e.homeAddress)==null?void 0:a.city,readonly:!1},[{label:"State",field:"state",value:(s=e.homeAddress)==null?void 0:s.state,readonly:!1},{label:"Zip",field:"zipCode",value:(c=e.homeAddress)==null?void 0:c.postalCode,readonly:!1}],{label:"Phone",field:"phone",value:e.phoneNumber,readonly:!1},{label:"Email",field:"email",value:e.email,readonly:!1}]},lt=u.object({name:u.string({required_error:"Practitioner name must be specified."}),npi:u.string({required_error:"NPI must be specified."}).length(10),role:u.enum(["Doctor","Nurse","Other"]),firstName:u.string({required_error:"First name must be specified."}),lastName:u.string({required_error:"Last name must be specified."}),dateOfBirth:u.date().max(new Date,{message:"Date of birth cannot be a future date."}),gender:u.enum(["-","male","female","other","unknown"]),address:u.string({required_error:"Address must be specified."}),city:u.string({required_error:"City must be specified."}),state:u.string({required_error:"State must be specified."}),zipCode:u.string({required_error:"Zip code must be specified."}),phone:u.string().optional(),email:u.string().optional()});try{U.displayName="getRequestData",U.__docgenInfo={description:"",displayName:"getRequestData",props:{active:{defaultValue:null,description:"",name:"active",required:!0,type:{name:"boolean | undefined"}},contact:{defaultValue:null,description:"",name:"contact",required:!0,type:{name:"PatientContact[] | undefined"}},dob:{defaultValue:null,description:"",name:"dob",required:!0,type:{name:"string | undefined"}},age:{defaultValue:null,description:"",name:"age",required:!0,type:{name:"number | undefined"}},gender:{defaultValue:null,description:"",name:"gender",required:!0,type:{name:"string | undefined"}},maritalStatus:{defaultValue:null,description:"",name:"maritalStatus",required:!0,type:{name:"string | undefined"}},organization:{defaultValue:null,description:"",name:"organization",required:!0,type:{name:"OrganizationModel | undefined"}},use:{defaultValue:null,description:"",name:"use",required:!0,type:{name:"enum",value:[{value:"undefined"},{value:'"usual"'},{value:'"official"'},{value:'"temp"'},{value:'"nickname"'},{value:'"anonymous"'},{value:'"old"'},{value:'"maiden"'}]}},UPID:{defaultValue:null,description:"",name:"UPID",required:!0,type:{name:"string"}},getPhoneNumber:{defaultValue:null,description:"",name:"getPhoneNumber",required:!0,type:{name:'(use?: "temp" | "old" | "home" | "work" | "mobile" | undefined) => string | undefined'}},phoneNumber:{defaultValue:null,description:"",name:"phoneNumber",required:!0,type:{name:"string | undefined"}},email:{defaultValue:null,description:"",name:"email",required:!0,type:{name:"string | undefined"}},bestHomeAddress:{defaultValue:null,description:"",name:"bestHomeAddress",required:!0,type:{name:"Address | undefined"}},homeAddress:{defaultValue:null,description:"",name:"homeAddress",required:!0,type:{name:"Address | undefined"}},bestName:{defaultValue:null,description:"",name:"bestName",required:!0,type:{name:"HumanName"}},additionalNames:{defaultValue:null,description:"",name:"additionalNames",required:!0,type:{name:"string | undefined"}},display:{defaultValue:null,description:"",name:"display",required:!0,type:{name:"string"}},firstName:{defaultValue:null,description:"",name:"firstName",required:!0,type:{name:"string"}},fullName:{defaultValue:null,description:"",name:"fullName",required:!0,type:{name:"string"}},lastName:{defaultValue:null,description:"",name:"lastName",required:!0,type:{name:"string | undefined"}},nickname:{defaultValue:null,description:"",name:"nickname",required:!0,type:{name:"string | undefined"}},prefix:{defaultValue:null,description:"",name:"prefix",required:!0,type:{name:"string | undefined"}},suffix:{defaultValue:null,description:"",name:"suffix",required:!0,type:{name:"string | undefined"}},resource:{defaultValue:null,description:"",name:"resource",required:!0,type:{name:"Patient"}},includedResources:{defaultValue:null,description:"",name:"includedResources",required:!1,type:{name:"ResourceMap"}},revIncludes:{defaultValue:null,description:"",name:"revIncludes",required:!1,type:{name:"Resource[]"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},isSummaryResource:{defaultValue:null,description:"",name:"isSummaryResource",required:!0,type:{name:"boolean"}},resourceType:{defaultValue:null,description:"",name:"resourceType",required:!0,type:{name:"string"}},getBasicResourceByAction:{defaultValue:null,description:"",name:"getBasicResourceByAction",required:!0,type:{name:"(profileAction: string) => Basic | undefined"}},toString:{defaultValue:null,description:"",name:"toString",required:!1,type:{name:"() => string"}}}}}catch{}const ut=async(e,t,i)=>{const a=`${ve(e.env)}/patient-history/patient/${t}/refresh?consent=1`;try{return await(await be(a,{method:"POST",headers:{Authorization:`Bearer ${e.authToken}`,"practitioner-npi":i.npi,"practitioner-role":i.role.toLocaleLowerCase(),"practitioner-name":i.name,...e.contextBuilderId&&{"Zus-Account":e.contextBuilderId}}})).json()}catch{throw Error(`Error scheduling patient history job with id of ${t}`)}},$=({patient:e,header:t,isOpen:i,onClose:a,setClinicalHistoryExists:s})=>{const c=Fe(e),f=async(o,d)=>{try{await c(o)}catch(N){const{requestErrors:b,responseIsSuccess:x}=Oe(N);return x?new Error("Failed to save patient data."):new Error(b.join(","))}const T=await d(),R=await ut(T,e.id,o);if("errors"in R){const N=[R.errors.map(b=>b.details)];return new Error(N.join(","))}return s(!0),R};return n.createElement(Re,{header:t,title:"Request Records",action:f,data:U(e),schema:lt,isOpen:i,onClose:a})};try{$.displayName="PatientHistoryRequestDrawer",$.__docgenInfo={description:"",displayName:"PatientHistoryRequestDrawer",props:{onClose:{defaultValue:null,description:"",name:"onClose",required:!0,type:{name:"() => void"}},isOpen:{defaultValue:null,description:"",name:"isOpen",required:!0,type:{name:"boolean"}},header:{defaultValue:null,description:"",name:"header",required:!1,type:{name:"ReactNode"}},patient:{defaultValue:null,description:"",name:"patient",required:!0,type:{name:"PatientModel"}},setClinicalHistoryExists:{defaultValue:null,description:"",name:"setClinicalHistoryExists",required:!0,type:{name:"Dispatch<SetStateAction<boolean | undefined>>"}}}}}catch{}const G=({onClick:e})=>n.createElement("div",{className:"ctw-flex ctw-justify-center ctw-space-x-2 ctw-border ctw-border-solid ctw-border-divider-light ctw-p-5"},n.createElement("div",{className:"ctw-flex ctw-justify-center ctw-text-icon-default"},"Retrieve patient clinical history."),n.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link",onClick:e},"Request Records"));try{G.displayName="PatientHistoryMessage",G.__docgenInfo={description:"",displayName:"PatientHistoryMessage",props:{onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLButtonElement>"}}}}}catch{}async function mt(e,t){const i=`${ve(e.env)}/patient-history/messages?patient-id=${t}`;try{const s=await(await be(i,{headers:{Authorization:`Bearer ${e.authToken}`,...e.contextBuilderId&&{"Zus-Account":e.contextBuilderId}}})).json();return Object.values(s.data)}catch(a){throw Le("Failed fetching patient refresh history messages",a)}}async function pt(e,t){return(await mt(e,t)).length!==0}const yt="There are no conditions in this patient's record.",ft="There are no conditions available.",se="There was an error fetching conditions for this patient. Refresh the page or contact your organization's technical support if this issue persists.";function Z({className:e,readOnly:t=!1}){const i=l.useRef(null),a=je(i),[s,c]=l.useState(!1),[f,o]=l.useState(!1),d=et(),[T,R]=l.useState(!1),[N,b]=l.useState([]),[x,_]=l.useState([]),[S,Ee]=l.useState(!1),[J,K]=l.useState("Add"),[Ne,P]=l.useState(M),[qe,V]=l.useState(),[C,X]=l.useState(),p=We(),w=ze(),E=Ue(),{getRequestContext:k}=$e(),[Q,ee]=l.useState(),[I,te]=l.useState(),Ae=w.isError?se:yt,Be=E.isError?se:ft,Se=r=>{p.data&&(c(!0),K("Edit"),P(ot),V(rt({condition:r})),X(r))},He=r=>{o(!0),X(r)},Te=r=>{const h=Ye(r.resource);p.data&&(P(M),c(!0),K("Add"),V(re({condition:new oe(h)})))},ne=()=>{if(!p.data)return;const r=Je(p.data.id);c(!0),P(M),V(re({condition:new oe(r)}))},xe=n.createElement("button",{className:"ctw-btn-primary",type:"button",onClick:ne},"Add Condition"),ae=I||E.data&&E.data.length>0,_e=async r=>{const h=await k(),q=await pt(h,r);te(q)};return l.useEffect(()=>{var h;async function r(){const q=w.data,ie=E.data;q&&(b(q.filter(Pe=>Pe.active||S)),_(ie?st(ie,q,S):[])),w.error&&(b([]),_([]))}r(),(h=p.data)!=null&&h.id&&I===void 0&&_e(p.data.id)},[S,p.data,w.data,E.data,I,w.error]),p.isError?n.createElement(z,{className:e}):n.createElement("div",{ref:i,className:ge("ctw-conditions",e,{"ctw-conditions-stacked":a.sm})},!t&&n.createElement("div",{className:"ctw-conditions-heading-container"},n.createElement("div",{className:"ctw-title"},"Conditions"),n.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link",onClick:ne},"+ Add Condition")),n.createElement("div",{className:"ctw-conditions-body-container"},n.createElement("div",{className:"ctw-space-y-3"},n.createElement("div",{className:"ctw-conditions-title-container"},n.createElement("div",{className:"ctw-title"},"Patient Record"),n.createElement(Ge,{onFormChange:()=>Ee(!S),toggleProps:{name:"conditions",text:"Include Inactive"}})),n.createElement(H,{stacked:a.sm,conditions:N,isLoading:w.isLoading,hideMenu:t,sort:Q,onSort:r=>ee(r),emptyMessage:n.createElement(n.Fragment,null,n.createElement("div",null,Ae),!w.isError&&!t&&n.createElement("div",{className:"ctw-mt-5"},xe)),rowMenuActions:r=>[{name:"Edit",action:async()=>{Se(r)}},{name:"View History",action:async()=>{d({condition:r,readOnly:t})}},{name:"Delete",className:"dangerous",action:async()=>{He(r)}}]})),n.createElement("div",{className:"ctw-space-y-3"},n.createElement("div",{className:"ctw-conditions-title-container"},n.createElement("div",{className:"ctw-title"},"Other Provider Records"),ae&&n.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link",onClick:()=>R(!0)},"Request Records")),ae?n.createElement(H,{className:"ctw-conditions-not-reviewed",stacked:a.sm,conditions:x,sort:Q,onSort:r=>ee(r),isLoading:E.isLoading||w.isLoading,hideMenu:t,emptyMessage:Be,rowMenuActions:r=>[{name:"Add",action:async()=>{Te(r)}},{name:"View History",action:async()=>{d({condition:r,readOnly:!0})}},{name:r.isArchived?"Un-Archive":"Archive",action:async()=>{const h=await k();await tt(r,h)}}]}):n.createElement(G,{onClick:()=>R(!0)}))),p.data&&n.createElement(Re,{title:`${J} Condition`,header:J==="Edit"&&C&&n.createElement(nt,{condition:C}),action:ke.curry(Ze)(C,p.data.id),data:qe,schema:Ne,isOpen:s,onClose:()=>c(!1)}),p.data&&n.createElement($,{header:n.createElement("div",{className:"ctw-pt-0 ctw-text-base"},"Request patient clinical history from 70K+ providers across the nation. No changes will be made to your patient record."),patient:p.data,isOpen:T,onClose:()=>R(!1),setClinicalHistoryExists:te}),C&&p.data&&n.createElement(at,{resource:C,resourceName:C.display||"unnamed condition",onClose:()=>o(!1),isOpen:f,onDelete:async()=>{const r=await k();await it(C.resource,r)}}))}try{Z.displayName="Conditions",Z.__docgenInfo={description:"",displayName:"Conditions",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},readOnly:{defaultValue:{value:"false"},description:"",name:"readOnly",required:!1,type:{name:"boolean"}}}}}catch{}function Y(e){const t=y(e),i=y(t.getByRole("dialog"));return{conditionSearch:a=>m.type(i.getByPlaceholderText("Type to search"),a),selectCondition:async a=>m.click(await i.findByRole("option",{name:a})),status:a=>m.selectOptions(i.getByLabelText("Status"),a),onset:a=>m.type(i.getByLabelText("Onset"),a),abatement:a=>m.type(i.getByLabelText("Abatement"),a),note:a=>m.type(i.getByLabelText("Note"),a),cancel:()=>m.click(i.getByRole("button",{name:"Cancel"})),save:async()=>{m.click(i.getByRole("button",{name:"Save"})),await he(()=>t.queryByRole("dialog"))}}}function de(e,t){const i=y(e),a=y(t);async function s(o){m.click(f(o).getByRole("button",{name:/dropdown/i})),await i.findAllByRole("menuitem")}function c(o){m.click(i.getByRole("menuitem",{name:o}))}function f(o){const d=a.getAllByRole("rowgroup")[1];return y(y(d).queryAllByRole("row")[o])}return{table:a,toHaveRowCount:async o=>{const d=a.getAllByRole("rowgroup")[1];o===0?await A(()=>g(d).toBeFalsy()):await A(()=>g(y(d).queryAllByRole("row")).toHaveLength(o))},toHaveRowWithText:(o,d)=>{f(o).getByText(d)},add:async o=>{await s(o),c("Add")},delete:async o=>{await s(o),c("Delete"),m.click(await i.findByRole("button",{name:/remove/i})),await he(()=>i.queryByRole("dialog"))},edit:async o=>{await s(o),c("Edit")},viewHistory:async o=>{await s(o),c("View History")}}}async function B(e){const t=y(e);await A(()=>g(t.queryAllByRole("table")).toHaveLength(2));const i=t.queryAllByRole("table"),a=de(e,i[0]),s=de(e,i[1]);return await a.table.findAllByText("active"),await s.table.findAllByText("active"),{clickAddCondition:()=>m.click(t.getByRole("button",{name:"+ Add Condition"})),toggleInactive:()=>m.click(t.getByLabelText("Include Inactive")),patientRecord:a,otherProvider:s}}const ce={resourceType:"Bundle",id:"eacb4f45-4e83-45db-9114-7d3e05eb1fb3",meta:{lastUpdated:"2022-11-16T15:13:00.795+00:00"},type:"searchset",total:0,entry:[]},Mt={component:Z,tags:["docsPage"],argTypes:{className:{options:["Blank","Fixed Width"],control:"select",mapping:{Blank:"","Fixed Width":"ctw-m-auto ctw-max-w-[600px]"}}},args:{className:"Blank",readOnly:!1},decorators:[(e,{args:t})=>n.createElement(Ke,{env:"dev",authToken:"dummy-token",builderId:"b123"},n.createElement(Xe,{patientID:"u12345",systemURL:Qe},n.createElement(e,{args:t})))]},v={...Ce({otherConditions:dt,patientConditions:ct})},D={...Ce({otherConditions:ce,patientConditions:ce})},F={...v,play:async({canvasElement:e})=>{const t=await B(e);await t.patientRecord.toHaveRowCount(2);const i="Heart failure (disorder)";t.clickAddCondition();const a=Y(e);a.conditionSearch("heart"),await a.selectCondition(i),a.status("Active"),a.onset("2020-02-14"),await a.save(),await t.patientRecord.toHaveRowCount(3),g(await t.patientRecord.table.findByText(i)).toBeTruthy()}},O={...v,play:async({canvasElement:e})=>{const t=await B(e);await t.patientRecord.toHaveRowCount(2),await t.otherProvider.add(2),await Y(e).save(),await t.patientRecord.toHaveRowCount(3),g(await t.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy()}},L={...v,play:async({canvasElement:e})=>{const t=await B(e);await t.patientRecord.toHaveRowCount(2),await t.patientRecord.edit(0);const i=Y(e);i.note("hello world"),await i.save(),t.patientRecord.toHaveRowWithText(0,/confirmed/i)}},j={...v,play:async({canvasElement:e})=>{const t=await B(e);await t.patientRecord.toHaveRowCount(2),await t.patientRecord.delete(0),await t.patientRecord.toHaveRowCount(1),t.toggleInactive(),await t.patientRecord.toHaveRowCount(3),t.patientRecord.toHaveRowWithText(1,/entered-in-error/i),t.toggleInactive(),await t.patientRecord.toHaveRowCount(1)}},W={...v,play:async({canvasElement:e})=>{const t=await B(e);await t.patientRecord.toHaveRowCount(2),await t.patientRecord.viewHistory(0);const i=y(e);await A(()=>g(i.queryAllByRole("dialog")).toHaveLength(1));const a=y(i.getByRole("dialog"));g(await a.findByText(/generalized anxiety disorder/i)).toBeTruthy(),await A(()=>g(a.getAllByRole("button",{name:/details/i})).toHaveLength(3)),m.click(a.getAllByRole("button",{name:/close/i})[0])}};var le;v.parameters={...v.parameters,storySource:{source:`{
  ...setupConditionMocks({
    otherConditions,
    patientConditions
  })
}`,...(le=v.parameters)==null?void 0:le.storySource}};var ue;D.parameters={...D.parameters,storySource:{source:`{
  ...setupConditionMocks({
    otherConditions: emptyConditions,
    patientConditions: emptyConditions
  })
}`,...(ue=D.parameters)==null?void 0:ue.storySource}};var me;F.parameters={...F.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    const newCondition = "Heart failure (disorder)";
    conditions.clickAddCondition();
    const conditionForm = conditionFormDrawer(canvasElement);
    conditionForm.conditionSearch("heart");
    await conditionForm.selectCondition(newCondition);
    conditionForm.status("Active");
    conditionForm.onset("2020-02-14");
    await conditionForm.save();
    await conditions.patientRecord.toHaveRowCount(3);
    expect(await conditions.patientRecord.table.findByText(newCondition)).toBeTruthy();
  }
}`,...(me=F.parameters)==null?void 0:me.storySource}};var pe;O.parameters={...O.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.otherProvider.add(2);
    const conditionForm = conditionFormDrawer(canvasElement);
    await conditionForm.save();
    await conditions.patientRecord.toHaveRowCount(3);
    expect(await conditions.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy();
  }
}`,...(pe=O.parameters)==null?void 0:pe.storySource}};var ye;L.parameters={...L.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.edit(0);
    const conditionForm = conditionFormDrawer(canvasElement);
    conditionForm.note("hello world");
    await conditionForm.save();
    conditions.patientRecord.toHaveRowWithText(0, /confirmed/i);
  }
}`,...(ye=L.parameters)==null?void 0:ye.storySource}};var fe;j.parameters={...j.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.delete(0);
    await conditions.patientRecord.toHaveRowCount(1);
    conditions.toggleInactive();
    await conditions.patientRecord.toHaveRowCount(3);
    conditions.patientRecord.toHaveRowWithText(1, /entered-in-error/i);
    conditions.toggleInactive();
    await conditions.patientRecord.toHaveRowCount(1);
  }
}`,...(fe=j.parameters)==null?void 0:fe.storySource}};var we;W.parameters={...W.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.viewHistory(0);
    const canvas = within(canvasElement);
    await waitFor(() => expect(canvas.queryAllByRole("dialog")).toHaveLength(1));
    const drawer = within(canvas.getByRole("dialog"));
    expect(await drawer.findByText(/generalized anxiety disorder/i)).toBeTruthy();
    await waitFor(() => expect(drawer.getAllByRole("button", {
      name: /details/i
    })).toHaveLength(3));
    userEvent.click(drawer.getAllByRole("button", {
      name: /close/i
    })[0]);
  }
}`,...(we=W.parameters)==null?void 0:we.storySource}};const Dt=["Basic","Empty","TestAdd","TestAddOther","TestEdit","TestDelete","TestViewHistory"];export{v as Basic,D as Empty,F as TestAdd,O as TestAddOther,j as TestDelete,L as TestEdit,W as TestViewHistory,Dt as __namedExportsOrder,Mt as default};
//# sourceMappingURL=conditions.stories-b7d4976d.js.map
