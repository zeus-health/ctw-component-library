{"version":3,"file":"patient-conditions.stories-96e28dd5.js","sources":["../../src/components/content/conditions/patient-conditions-actions.tsx","../../src/components/content/conditions/patient-conditions-columns.tsx","../../src/components/content/conditions/patient-conditions-filters.tsx","../../src/components/content/conditions/patient-conditions-menu-actions.tsx","../../src/components/content/conditions/patient-conditions-sort.tsx","../../src/components/content/conditions/patient-conditions-tabs.tsx","../../src/components/content/conditions/patient-conditions.tsx","../../src/components/content/conditions/patient-conditions.stories.tsx"],"sourcesContent":["import { ChevronDownIcon } from \"@heroicons/react/outline\";\nimport { PatientHistoryTableHeaderMessage } from \"../patient-history/patient-history-table-header\";\nimport { usePatientHistory } from \"../patient-history/use-patient-history\";\nimport { useAddConditionForm } from \"./condition-hooks\";\nimport { FilterCollection } from \"./patient-conditions-filters\";\nimport { Sort, SortOption } from \"./patient-conditions-sort\";\nimport { DropdownMenuAction } from \"@/components/core/dropdown-action-menu\";\nimport { Toggle } from \"@/components/core/toggle\";\n\nexport type PatientConditionsActionsProps = {\n  hideAdd: boolean;\n  onToggleShowHistoric: () => void;\n  sortOptions: SortOption[];\n  updateSorts: (newSorts: Partial<Sort>) => void;\n  activeCollection: FilterCollection;\n  currentSorts: Sort;\n};\n\nexport function PatientConditionsActions({\n  hideAdd,\n  onToggleShowHistoric,\n  sortOptions,\n  updateSorts,\n  activeCollection,\n  currentSorts,\n}: PatientConditionsActionsProps) {\n  const showAddConditionForm = useAddConditionForm();\n  const patientHistory = usePatientHistory();\n\n  return (\n    <div className=\"ctw-flex ctw-items-center ctw-justify-between ctw-space-x-2 ctw-p-3 sm:ctw-pt-1.5\">\n      {patientHistory.lastRetrievedAt && hideAdd && (\n        <PatientHistoryTableHeaderMessage\n          patientHistory={patientHistory}\n          message=\"Last Retrieved\"\n        />\n      )}\n      <div>\n        <SortButton\n          options={sortOptions}\n          updateSorts={updateSorts}\n          activeCollection={activeCollection}\n          currentSorts={currentSorts}\n        />\n      </div>\n      <div className=\"ctw-flex ctw-items-center ctw-space-x-2\">\n        <Toggle\n          name=\"historic\"\n          text=\"Historic\"\n          onChange={onToggleShowHistoric}\n        />\n        {!hideAdd && (\n          <button\n            type=\"button\"\n            className=\"ctw-btn-primary\"\n            onClick={() => showAddConditionForm()}\n          >\n            Add Condition\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\ntype SortButtonProps = {\n  options: SortOption[];\n  updateSorts: (newSorts: Partial<Sort>) => void;\n  activeCollection: FilterCollection;\n  currentSorts: Sort;\n};\n\nconst SortButton = ({\n  options,\n  updateSorts,\n  activeCollection,\n  currentSorts,\n}: SortButtonProps) => (\n  <DropdownMenuAction\n    type=\"select\"\n    onItemSelect={(event) => {\n      const { dir, key, isDate } = options.filter(\n        (option) => option.display === event.key\n      )[0].payload;\n\n      updateSorts({\n        [activeCollection]: { key, dir, isDate, display: event.name },\n      });\n    }}\n    items={options.map((option) => ({\n      key: option.display,\n      name: option.display,\n      isSelected: currentSorts.display === option.display,\n    }))}\n  >\n    <div className=\"ctw-btn-default ctw-flex ctw-items-center ctw-space-x-1\">\n      <span>Sort</span>\n      <ChevronDownIcon className=\"ctw-h-4\" />\n    </div>\n  </DropdownMenuAction>\n);\n","import cx from \"classnames\";\nimport { TableColumn } from \"@/components/core/table/table-helpers\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { compact } from \"@/utils/nodash\";\n\nfunction statusToColor(status: string) {\n  switch (status) {\n    case \"Active\":\n      return \"ctw-text-success-main\";\n    case \"Pending\":\n      return \"ctw-text-caution-main\";\n    default:\n      return \"ctw-text-content-lighter\";\n  }\n}\n\nexport const patientConditionsColumns: TableColumn<ConditionModel>[] = [\n  {\n    widthPercent: 30,\n    minWidth: 320,\n    render: (condition) => (\n      <div>\n        <div className=\"ctw-pc-title group-hover:ctw-underline\">\n          {condition.display}\n        </div>\n        <div className=\"ctw-pc-chapter\">{condition.ccsChapter}</div>\n      </div>\n    ),\n  },\n  {\n    render: (condition) => (\n      <div className=\"ctw-pc-status-container\">\n        <div\n          className={cx(\n            \"ctw-pc-status-dot\",\n            statusToColor(condition.displayStatus)\n          )}\n        >\n          &bull;\n        </div>\n        <div className=\"ctw-pc-status-and-extra\">\n          <div className=\"ctw-pc-status\">{condition.displayStatus}</div>\n\n          {condition.isSummaryResource ? (\n            <div>\n              {compact([\n                condition.patient?.organization?.name,\n                condition.recordedDate,\n              ]).join(\" \")}\n            </div>\n          ) : (\n            <div>\n              {compact([condition.recorder, condition.recordedDate]).join(\" \")}\n            </div>\n          )}\n        </div>\n      </div>\n    ),\n    widthPercent: 30,\n    minWidth: 128,\n  },\n  {\n    widthPercent: 40,\n    minWidth: 132,\n    render: (condition) => {\n      const onsetText = condition.isSummaryResource\n        ? \"Earliest known onset:\"\n        : \"Onset:\";\n\n      return (\n        <div className=\"ctw-pc-onset-notes\">\n          {condition.onset && (\n            <div>\n              {onsetText} {condition.onset}\n            </div>\n          )}\n          <div className=\"ctw-pc-notes\">{condition.notes.join(\" \")}</div>\n        </div>\n      );\n    },\n  },\n];\n","import { useState } from \"react\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { cloneDeep, merge } from \"@/utils/nodash\";\n\nexport type FilterCollection = \"patient\" | \"other\";\n\nexport type Filters = {\n  showHistoric: boolean;\n};\n\nexport function useConditionFilters(collection: FilterCollection) {\n  const [filters, setFilters] = useState<Filters>({\n    showHistoric: false,\n  });\n\n  function updateFilters(newFilters: Partial<Filters>) {\n    setFilters(merge(cloneDeep(filters), newFilters));\n  }\n\n  function applyFilters(\n    patientConditions: ConditionModel[],\n    otherConditions: ConditionModel[]\n  ) {\n    const conditions =\n      collection === \"patient\" ? patientConditions : otherConditions;\n    return conditions.filter((c) => {\n      if (filters.showHistoric) return true;\n\n      return [\"Active\", \"Pending\"].includes(c.displayStatus);\n    });\n  }\n\n  return { filters, updateFilters, applyFilters };\n}\n","import { toggleArchive } from \"../conditions-helper\";\nimport {\n  useAddConditionForm,\n  useConfirmDeleteCondition,\n  useEditConditionForm,\n} from \"./condition-hooks\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { RowActionsProps, useCTW } from \"@/index\";\n\nexport const PatientConditionHoverActions = ({\n  record,\n}: RowActionsProps<ConditionModel>) => {\n  const showEditConditionForm = useEditConditionForm();\n  const confirmDelete = useConfirmDeleteCondition();\n\n  return (\n    <div className=\"ctw-flex ctw-space-x-2\">\n      {!record.isDeleted && (\n        <button\n          type=\"button\"\n          className=\"ctw-btn-default\"\n          onClick={(event) => {\n            event.stopPropagation();\n            confirmDelete(record);\n          }}\n        >\n          Remove\n        </button>\n      )}\n\n      <button\n        type=\"button\"\n        className=\"ctw-btn-primary\"\n        onClick={(event) => {\n          event.stopPropagation();\n          showEditConditionForm(record);\n        }}\n      >\n        Edit\n      </button>\n    </div>\n  );\n};\n\nexport const OtherProviderConditionHoverActions = ({\n  record,\n}: RowActionsProps<ConditionModel>) => {\n  const showAddConditionForm = useAddConditionForm();\n  const { getRequestContext } = useCTW();\n\n  return (\n    <div className=\"ctw-flex ctw-space-x-2\">\n      <button\n        type=\"button\"\n        className=\"ctw-btn-default\"\n        onClick={async (event) => {\n          event.stopPropagation();\n          await toggleArchive(record, await getRequestContext());\n        }}\n      >\n        {record.isArchived ? \"Restore\" : \"Dismiss\"}\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"ctw-btn-primary\"\n        onClick={(event) => {\n          event.stopPropagation();\n          showAddConditionForm(record);\n        }}\n      >\n        Add\n      </button>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { FilterCollection } from \"./patient-conditions-filters\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { sort } from \"@/utils/sort\";\n\nexport type SortDir = \"asc\" | \"desc\";\n\nexport type Sort = {\n  key: string;\n  dir: SortDir;\n  display: string;\n  isDate?: boolean;\n};\n\nconst DEFAULT_SORT: Sort = {\n  key: \"recordedDate\",\n  dir: \"desc\",\n  display: \"Last Updated Date (Newest to Oldest)\",\n};\n\nconst DEFAULT_SORTS = {\n  patient: {\n    ...DEFAULT_SORT,\n  },\n  other: {\n    ...DEFAULT_SORT,\n  },\n};\n\nexport type SortOption = {\n  display: string;\n  payload: { key: keyof ConditionModel; dir: SortDir; isDate?: boolean };\n};\n\nconst SORT_OPTIONS: SortOption[] = [\n  {\n    display: \"Name (A-Z)\",\n    payload: { key: \"display\", dir: \"asc\" },\n  },\n  {\n    display: \"Name (Z-A)\",\n    payload: { key: \"display\", dir: \"desc\" },\n  },\n  {\n    display: \"Category (A-Z)\",\n    payload: { key: \"ccsChapter\", dir: \"asc\" },\n  },\n  {\n    display: \"Category (Z-A)\",\n    payload: { key: \"ccsChapter\", dir: \"desc\" },\n  },\n  {\n    display: \"Status (A-Z)\",\n    payload: { key: \"displayStatus\", dir: \"asc\" },\n  },\n  {\n    display: \"Status (Z-A)\",\n    payload: { key: \"displayStatus\", dir: \"desc\" },\n  },\n  {\n    display: \"Last Updated Date (Oldest to Newest)\",\n    payload: { key: \"recordedDate\", dir: \"asc\", isDate: true },\n  },\n  {\n    display: \"Last Updated Date (Newest to Oldest)\",\n    payload: { key: \"recordedDate\", dir: \"desc\", isDate: true },\n  },\n];\n\nexport function useConditionSorts(activeCollection: FilterCollection) {\n  const [sorts, setSorts] = useState(DEFAULT_SORTS);\n\n  function updateSorts(newSorts: Partial<Sort>) {\n    setSorts({ ...sorts, ...newSorts });\n  }\n\n  function applySorts(conditions: ConditionModel[]) {\n    const activeSort = sorts[activeCollection];\n    return sort(\n      conditions,\n      (c) => c[activeSort.key as keyof ConditionModel],\n      activeSort.dir,\n      activeSort.isDate\n    );\n  }\n\n  return {\n    applySorts,\n    sortOptions: SORT_OPTIONS,\n    updateSorts,\n    currentSorts: sorts,\n  };\n}\n","import { PatientHistoryStatus } from \"../patient-history/patient-history-message-status\";\nimport { usePatientHistory } from \"../patient-history/use-patient-history\";\nimport { FilterCollection } from \"./patient-conditions-filters\";\nimport { Badge } from \"@/components/core/badge\";\nimport { TabGroup, TabGroupItem } from \"@/components/core/tab-group/tab-group\";\nimport { useOtherProviderConditions } from \"@/fhir/conditions\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nexport type PatientConditionsTabsProps = {\n  collection: FilterCollection;\n  forceHorizontalTabs?: boolean;\n  onCollectionChange: (collection: FilterCollection) => void;\n  otherConditions: ConditionModel[];\n};\n\nconst tabbedContent: TabGroupItem<ConditionModel>[] = [\n  {\n    key: \"inactive-provider-records\",\n    getPanelClassName: (sm: boolean) => (sm ? \"ctw-mt-0\" : \"ctw-mt-2\"),\n    display: () => \"condition list\",\n    render: () => null,\n  },\n  {\n    key: \"other-provider-records\",\n    display: () => (\n      <>\n        <span className=\"ctw-pr-2 ctw-capitalize\">other provider records</span>\n        <BadgeOtherProviderConditionsCount />\n      </>\n    ),\n    render: () => null,\n  },\n];\n\nexport function PatientConditionsTabs({\n  collection,\n  onCollectionChange,\n  forceHorizontalTabs = false,\n}: PatientConditionsTabsProps) {\n  const patientHistory = usePatientHistory();\n\n  return (\n    <>\n      {collection === \"other\" && (\n        <div className=\"ctw-space-y-3\">\n          <PatientHistoryStatus\n            status={patientHistory.lastStatus}\n            date={patientHistory.dateCreatedAt}\n          />\n        </div>\n      )}\n      <TabGroup\n        content={tabbedContent}\n        forceHorizontalTabs={forceHorizontalTabs}\n        onChange={(index) => {\n          onCollectionChange(index === 0 ? \"patient\" : \"other\");\n        }}\n      />\n    </>\n  );\n}\n\nexport const BadgeOtherProviderConditionsCount = () => {\n  const otherConditionsQuery = useOtherProviderConditions();\n  if (!otherConditionsQuery.data) {\n    return null;\n  }\n  const activeUnarchivedConditions = otherConditionsQuery.data.filter(\n    (condition) => condition.displayStatus === \"Active\"\n  );\n\n  if (activeUnarchivedConditions.length > 0) {\n    return (\n      <Badge\n        color=\"notification\"\n        text={activeUnarchivedConditions.length.toString()}\n        className=\"ctw-h-5\"\n      />\n    );\n  }\n  return null;\n};\n","import cx from \"classnames\";\nimport { useRef, useState } from \"react\";\nimport { useConditionHistory } from \"../condition-history/conditions-history-drawer\";\nimport { filterOtherConditions } from \"./helpers\";\nimport { PatientConditionsActions } from \"./patient-conditions-actions\";\nimport { patientConditionsColumns } from \"./patient-conditions-columns\";\nimport {\n  FilterCollection,\n  useConditionFilters,\n} from \"./patient-conditions-filters\";\nimport {\n  OtherProviderConditionHoverActions,\n  PatientConditionHoverActions,\n} from \"./patient-conditions-menu-actions\";\nimport { useConditionSorts } from \"./patient-conditions-sort\";\nimport { PatientConditionsTabs } from \"./patient-conditions-tabs\";\nimport { withErrorBoundary } from \"@/components/core/error-boundary\";\nimport { Table } from \"@/components/core/table/table\";\nimport {\n  useOtherProviderConditions,\n  usePatientConditions,\n} from \"@/fhir/conditions\";\nimport { useBreakpoints } from \"@/hooks/use-breakpoints\";\nimport \"./patient-conditions.scss\";\n\nexport type PatientConditionsProps = {\n  className?: string;\n  readOnly?: boolean;\n};\n\nexport const PatientConditions = withErrorBoundary(\n  ({ className, readOnly = false }: PatientConditionsProps) => {\n    // State.\n    const [collection, setCollection] = useState<FilterCollection>(\"patient\");\n    const { filters, updateFilters, applyFilters } =\n      useConditionFilters(collection);\n    const { applySorts, sortOptions, updateSorts, currentSorts } =\n      useConditionSorts(collection);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const breakpoints = useBreakpoints(containerRef);\n\n    // Drawer helpers.\n    const showConditionHistory = useConditionHistory();\n\n    // Data fetching.\n    const patientConditionsQuery = usePatientConditions();\n    const otherConditionsQuery = useOtherProviderConditions();\n\n    function isLoading() {\n      const isLoadingPatient = patientConditionsQuery.isLoading;\n      const isLoadingOther = isLoadingPatient || otherConditionsQuery.isLoading;\n      return collection === \"patient\" ? isLoadingPatient : isLoadingOther;\n    }\n\n    // Get our conditions.\n    const patientConditions = patientConditionsQuery.data ?? [];\n    const otherConditions = filterOtherConditions(\n      otherConditionsQuery.data ?? [],\n      patientConditions,\n      true\n    );\n    let conditions = applyFilters(patientConditions, otherConditions);\n    conditions = applySorts(conditions);\n    const RowActions =\n      collection === \"patient\"\n        ? PatientConditionHoverActions\n        : OtherProviderConditionHoverActions;\n\n    return (\n      <div\n        ref={containerRef}\n        className={cx(\n          \"ctw-patient-conditions ctw-items-center ctw-justify-between ctw-py-5\",\n          className,\n          {\n            \"ctw-patient-conditions-stacked\": breakpoints.sm,\n          }\n        )}\n      >\n        <PatientConditionsTabs\n          forceHorizontalTabs\n          otherConditions={otherConditions}\n          collection={collection}\n          onCollectionChange={setCollection}\n        />\n\n        <PatientConditionsActions\n          sortOptions={sortOptions}\n          updateSorts={updateSorts}\n          activeCollection={collection}\n          hideAdd={readOnly || collection === \"other\"}\n          onToggleShowHistoric={() =>\n            updateFilters({ showHistoric: !filters.showHistoric })\n          }\n          currentSorts={currentSorts[collection]}\n        />\n\n        <Table\n          stacked={breakpoints.sm}\n          className=\"-ctw-mx-px !ctw-rounded-none\"\n          showTableHead={false}\n          emptyMessage=\"There are no condition records available.\"\n          isLoading={isLoading()}\n          records={conditions}\n          RowActions={readOnly ? undefined : RowActions}\n          columns={patientConditionsColumns}\n          handleRowClick={(condition) =>\n            showConditionHistory({\n              condition,\n              readOnly: readOnly || condition.isSummaryResource,\n            })\n          }\n        />\n      </div>\n    );\n  },\n  \"PatientConditions\"\n);\n","import type { Meta, StoryObj } from \"@storybook/react\";\nimport { PatientConditions, PatientConditionsProps } from \"./patient-conditions\";\nimport { emptyConditions } from \"./story-helpers/mocks/empty-conditions\";\nimport { otherConditions } from \"./story-helpers/mocks/other-conditions\";\nimport { patientConditions } from \"./story-helpers/mocks/patient-conditions\";\nimport { setupConditionMocks } from \"./story-helpers/mocks/requests\";\nimport { CTWProvider } from \"@/components/core/providers/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/providers/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\ntype Props = PatientConditionsProps;\nexport default ({\n  component: PatientConditions,\n  tags: [\"autodocs\"],\n  argTypes: {\n    className: {\n      options: [\"Blank\", \"Fixed Width\"],\n      control: \"select\",\n      mapping: {\n        Blank: \"\",\n        \"Fixed Width\": \"ctw-m-auto ctw-max-w-[600px]\"\n      }\n    }\n  },\n  args: {\n    className: \"Blank\",\n    readOnly: false\n  },\n  decorators: [(Story, {\n    args\n  }) => <CTWProvider env=\"dev\" authToken=\"dummy-token\" builderId=\"b123\">\n        <PatientProvider patientID=\"u12345\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>]\n} as Meta<Props>);\nexport const Basic: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions,\n    patientConditions\n  })\n};\nexport const Empty: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions: emptyConditions,\n    patientConditions: emptyConditions\n  })\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...setupConditionMocks({\\n    otherConditions,\\n    patientConditions\\n  })\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nEmpty.parameters = {\n  ...Empty.parameters,\n  docs: {\n    ...Empty.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...setupConditionMocks({\\n    otherConditions: emptyConditions,\\n    patientConditions: emptyConditions\\n  })\\n}\",\n      ...Empty.parameters?.docs?.source\n    }\n  }\n};"],"names":["PatientConditionsActions","hideAdd","onToggleShowHistoric","sortOptions","updateSorts","activeCollection","currentSorts","showAddConditionForm","useAddConditionForm","patientHistory","usePatientHistory","React","PatientHistoryTableHeaderMessage","SortButton","Toggle","options","DropdownMenuAction","event","dir","key","isDate","option","ChevronDownIcon","statusToColor","status","patientConditionsColumns","condition","cx","compact","_b","_a","onsetText","useConditionFilters","collection","filters","setFilters","useState","updateFilters","newFilters","merge","cloneDeep","applyFilters","patientConditions","otherConditions","c","PatientConditionHoverActions","record","showEditConditionForm","useEditConditionForm","confirmDelete","useConfirmDeleteCondition","OtherProviderConditionHoverActions","getRequestContext","useCTW","toggleArchive","DEFAULT_SORT","DEFAULT_SORTS","SORT_OPTIONS","useConditionSorts","sorts","setSorts","newSorts","applySorts","conditions","activeSort","sort","tabbedContent","sm","BadgeOtherProviderConditionsCount","PatientConditionsTabs","onCollectionChange","forceHorizontalTabs","PatientHistoryStatus","TabGroup","index","otherConditionsQuery","useOtherProviderConditions","activeUnarchivedConditions","Badge","PatientConditions","withErrorBoundary","className","readOnly","setCollection","containerRef","useRef","breakpoints","useBreakpoints","showConditionHistory","useConditionHistory","patientConditionsQuery","usePatientConditions","isLoading","isLoadingPatient","isLoadingOther","filterOtherConditions","RowActions","Table","patientConditions_stories","Story","args","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupConditionMocks","Empty","emptyConditions","_c"],"mappings":"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"}