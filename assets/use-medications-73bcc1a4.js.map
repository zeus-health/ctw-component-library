{"version":3,"file":"use-medications-73bcc1a4.js","sources":["../../src/components/content/medication-drawer.tsx","../../src/components/content/medications-table-base.tsx","../../src/components/content/medications/medication-history-drawer.tsx","../../src/hooks/use-medications.ts"],"sourcesContent":["import type { DataListEntry } from \"../core/data-list\";\nimport type { DrawerProps } from \"../core/drawer\";\nimport type { MedicationStatementModel } from \"@/fhir/models/medication-statement\";\nimport { DataList, entryFromArray } from \"../core/data-list\";\nimport { Drawer } from \"../core/drawer\";\nimport { MedicationHistory } from \"./medications/medication-history\";\nimport { Loading } from \"@/components/core/loading\";\nimport { useLastPrescriber } from \"@/fhir/medications\";\nimport { isFunction } from \"@/utils/nodash/fp\";\n\nexport type MedicationDrawerProps = {\n  medication?: MedicationStatementModel;\n  onDismissal?: (m: MedicationStatementModel) => void;\n} & Pick<DrawerProps, \"isOpen\" | \"onOpen\" | \"onAfterOpen\" | \"onClose\">;\n\nfunction getDataEntriesFromMedicationStatement(\n  medication?: MedicationStatementModel,\n  lastPrescriber?: string\n): DataListEntry[] {\n  return medication\n    ? [\n        { label: \"Status\", value: medication.displayStatus },\n        { label: \"Last Fill Date\", value: medication.lastFillDate },\n        { label: \"Quantity\", value: medication.quantity },\n        { label: \"Days Supply\", value: medication.daysSupply },\n        { label: \"Refills\", value: medication.refills },\n        { label: \"Instructions\", value: medication.dosage },\n        { label: \"Prescriber\", value: lastPrescriber },\n        { label: \"Last Prescribed Date\", value: medication.lastPrescribedDate },\n        ...entryFromArray(\"Note\", medication.notesDisplay),\n      ]\n    : [];\n}\n\nexport const MedicationDrawer = ({\n  medication,\n  onDismissal,\n  ...drawerProps\n}: MedicationDrawerProps) => {\n  const { lastPrescriber, isLoading } = useLastPrescriber(medication?.resource);\n  const data = getDataEntriesFromMedicationStatement(\n    medication,\n    lastPrescriber\n  );\n  return (\n    <Drawer title=\"Medication Details\" {...drawerProps}>\n      <Drawer.Body>\n        <div className=\"ctw-space-y-5\">\n          <div className=\"ctw-flex ctw-justify-between ctw-space-x-8\">\n            <h3 className=\"ctw-m-0 ctw-text-3xl ctw-font-light\">\n              {medication?.display}\n            </h3>\n          </div>\n          {isLoading && <Loading />}\n          {!isLoading && <DataList title=\"Summary\" data={data} />}\n          {medication && <MedicationHistory medication={medication} />}\n        </div>\n      </Drawer.Body>\n      <Drawer.Footer>\n        <div className=\"ctw-flex ctw-justify-end ctw-space-x-2\">\n          {isFunction(onDismissal) && !medication?.isArchived && (\n            <button\n              type=\"button\"\n              className=\"ctw-btn-primary\"\n              onClick={() => {\n                onDismissal(medication);\n                drawerProps.onClose();\n              }}\n              data-zus-telemetry-click=\"Dismiss\"\n            >\n              Dismiss\n            </button>\n          )}\n          <button\n            type=\"button\"\n            className=\"ctw-btn-default\"\n            onClick={drawerProps.onClose}\n            data-zus-telemetry-click=\"Close\"\n          >\n            Close\n          </button>\n        </div>\n      </Drawer.Footer>\n    </Drawer>\n  );\n};\n","import type { MedicationStatementModel } from \"@/fhir/models/medication-statement\";\nimport { ReactNode, useRef, useState } from \"react\";\nimport { Table, TableBaseProps } from \"@/components/core/table/table\";\nimport {\n  MinRecordItem,\n  TableColumn,\n  TableSort,\n} from \"@/components/core/table/table-helpers\";\nimport { useBreakpoints } from \"@/hooks/use-breakpoints\";\n\nexport type MedsHistoryTempProps = Partial<{\n  onOpenHistoryDrawer: () => void;\n  onAfterOpenHistoryDrawer: () => void;\n}>;\n\nexport type MedicationsTableBaseProps<T extends MinRecordItem> = {\n  children?: ReactNode;\n  className?: string;\n  emptyMessage?: string;\n  hideMenu?: boolean;\n  medicationStatements: MedicationStatementModel[];\n  telemetryNamespace?: string;\n} & TableBaseProps<MedicationStatementModel>;\n\nexport const MedicationsTableBase = ({\n  children,\n  className = \"\",\n  emptyMessage = \"No medications on record.\",\n  hideMenu = false,\n  medicationStatements,\n  telemetryNamespace,\n  ...tableProps\n}: MedicationsTableBaseProps<MedicationStatementModel>) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const breakpoints = useBreakpoints(containerRef);\n  const [sort, setSort] = useState<TableSort>();\n\n  const columnsStacked = [\n    {\n      title: \"Medication Name\",\n      render: (medication) => (\n        <>\n          <div className=\"ctw-font-medium\">{medication.display}</div>\n          <div className=\"ctw-font-light\">{medication.dosage}</div>\n        </>\n      ),\n      widthPercent: 35,\n      minWidth: 270,\n      sortIndices: [{ index: \"display\" }, { index: \"dosage\", dir: \"asc\" }],\n    },\n  ] as TableColumn<MedicationStatementModel>[];\n\n  const columns = [\n    ...columnsStacked,\n    {\n      title: \"Dispensed\",\n      render: (medication) => (\n        <>\n          {medication.quantity && <div>{medication.quantity}</div>}\n          {medication.refills && <div>{medication.refills} refills</div>}\n        </>\n      ),\n      widthPercent: 14,\n    },\n    {\n      title: \"Status\",\n      render: (medication) => (\n        <div className=\"ctw-capitalize\">\n          <div className=\"ctw-text-content-black\">{medication.status}</div>\n          {medication.isArchived && (\n            <div className=\"ctw-font-light\">Dismissed</div>\n          )}\n        </div>\n      ),\n      sortIndices: [\n        { index: \"status\" },\n        { index: \"dateAsserted\", dir: \"desc\" },\n      ],\n      widthPercent: 14,\n    },\n    {\n      title: \"Last Filled\",\n      dataIndex: \"lastFillDate\",\n      sortIndices: [{ index: \"lastFillDate\", isDate: true }],\n      widthPercent: 18,\n    },\n    {\n      title: \"Last Prescribed\",\n      render: (medication) => (\n        <>\n          {medication.lastPrescribedDate && (\n            <div>{medication.lastPrescribedDate}</div>\n          )}\n          {medication.lastPrescriber && <div>{medication.lastPrescriber}</div>}\n        </>\n      ),\n      sortIndices: [\n        { index: \"lastPrescribedDate\", isDate: true },\n        { index: \"lastPrescriber\", dir: \"asc\" },\n      ],\n      widthPercent: 18,\n      minWidth: \"90px\",\n    },\n  ] as TableColumn<MedicationStatementModel>[];\n\n  return (\n    <div\n      className={className}\n      ref={containerRef}\n      data-zus-telemetry-namespace={telemetryNamespace}\n    >\n      <div className=\"ctw-overflow-hidden\">\n        <Table\n          removeLeftAndRightBorders\n          className=\"-ctw-mx-px !ctw-rounded-none\"\n          sort={sort}\n          onSort={setSort}\n          stacked={breakpoints.sm}\n          records={medicationStatements}\n          columns={breakpoints.sm ? columnsStacked : columns}\n          emptyMessage={emptyMessage}\n          {...tableProps}\n        />\n      </div>\n      {children}\n    </div>\n  );\n};\n","import { MedicationDrawer } from \"@/components/content/medication-drawer\";\nimport { useDrawer } from \"@/components/core/providers/drawer-provider\";\nimport { MedicationStatementModel } from \"@/fhir/models\";\n\nexport function useMedicationHistory() {\n  const { openDrawer } = useDrawer();\n  return ({ medication }: { medication: MedicationStatementModel }) => {\n    openDrawer({\n      component: (props) => (\n        <MedicationDrawer medication={medication} {...props} />\n      ),\n    });\n  };\n}\n","import { UseQueryResult } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { useQueryWithPatient } from \"@/components/core/providers/patient-provider\";\nimport { getIncludedBasics, getMergedIncludedResources } from \"@/fhir/bundle\";\nimport {\n  getActiveMedications,\n  getBuilderMedications,\n  MedicationResults,\n  splitMedications,\n} from \"@/fhir/medications\";\nimport { MedicationStatementModel } from \"@/fhir/models/medication-statement\";\nimport {\n  QUERY_KEY_OTHER_PROVIDER_MEDICATIONS,\n  QUERY_KEY_PATIENT_BUILDER_MEDICATIONS,\n} from \"@/utils/query-keys\";\n\n// Gets patient medications for the builder, excluding meds where the information source is patient.\nexport function useQueryGetPatientMedsForBuilder(): UseQueryResult<\n  MedicationResults,\n  unknown\n> {\n  return useQueryWithPatient(\n    QUERY_KEY_PATIENT_BUILDER_MEDICATIONS,\n    [\n      {\n        informationSourceNot: \"Patient\", // exclude medication statements where the patient is the information source\n      },\n    ],\n    getBuilderMedications\n  );\n}\n\nexport function useQueryGetSummarizedPatientMedications(): UseQueryResult<\n  MedicationResults,\n  unknown\n> {\n  return useQueryWithPatient(\n    QUERY_KEY_OTHER_PROVIDER_MEDICATIONS,\n    [\n      {\n        _revinclude: \"Basic:subject\",\n      },\n    ],\n    getActiveMedications\n  );\n}\n\n/**\n * This hook provides all patient medication statements reconciled into two\n * categories (\"Builder Medications\" and \"Other Provider Medications\"). This is\n * useful when creating content such as the <PatientMedications /> component.\n */\nexport function useQueryAllPatientMedications() {\n  const [builderMedications, setBuilderMedications] =\n    useState<MedicationStatementModel[]>();\n  const [otherProviderMedications, setOtherProviderMedications] =\n    useState<MedicationStatementModel[]>();\n\n  const summarizedMedicationsQuery = useQueryGetSummarizedPatientMedications();\n  const builderMedicationsQuery = useQueryGetPatientMedsForBuilder();\n\n  useEffect(() => {\n    if (\n      summarizedMedicationsQuery.data?.bundle &&\n      builderMedicationsQuery.data?.bundle\n    ) {\n      const { medications: summarizedMedications, bundle: summarizedBundle } =\n        summarizedMedicationsQuery.data;\n      const { medications: allMedicationsForBuilder } =\n        builderMedicationsQuery.data;\n\n      const basicsMap = getIncludedBasics(summarizedBundle);\n      // Get included resources from both bundles so that we can reference them for contained medications.\n      const includedResources = getMergedIncludedResources([\n        summarizedMedicationsQuery.data.bundle,\n        builderMedicationsQuery.data.bundle,\n      ]);\n\n      // Split the summarized medications into those known/unknown to the builder\n      const splitData = splitMedications(\n        summarizedMedications.map(\n          (m) =>\n            new MedicationStatementModel(\n              m,\n              includedResources,\n              basicsMap.get(m.id ?? \"\")\n            )\n        ),\n        allMedicationsForBuilder.map(\n          (m) =>\n            new MedicationStatementModel(\n              m,\n              includedResources,\n              basicsMap.get(m.id ?? \"\")\n            )\n        )\n      );\n\n      setBuilderMedications(splitData.builderMedications);\n      setOtherProviderMedications(splitData.otherProviderMedications);\n    }\n  }, [summarizedMedicationsQuery.data, builderMedicationsQuery.data]);\n\n  const isLoading =\n    builderMedicationsQuery.isLoading || summarizedMedicationsQuery.isLoading;\n  const isFetching =\n    builderMedicationsQuery.isFetching || summarizedMedicationsQuery.isFetching;\n  const isError =\n    builderMedicationsQuery.isError || summarizedMedicationsQuery.isError;\n\n  return {\n    isFetching,\n    isLoading,\n    isError,\n    builderMedications,\n    otherProviderMedications,\n  };\n}\n"],"names":["getDataEntriesFromMedicationStatement","medication","lastPrescriber","entryFromArray","MedicationDrawer","onDismissal","drawerProps","isLoading","useLastPrescriber","data","React","Drawer","Loading","DataList","MedicationHistory","isFunction","MedicationsTableBase","children","className","emptyMessage","hideMenu","medicationStatements","telemetryNamespace","tableProps","containerRef","useRef","breakpoints","useBreakpoints","sort","setSort","useState","columnsStacked","columns","Table","useMedicationHistory","openDrawer","useDrawer","props","useQueryGetPatientMedsForBuilder","useQueryWithPatient","QUERY_KEY_PATIENT_BUILDER_MEDICATIONS","getBuilderMedications","useQueryGetSummarizedPatientMedications","QUERY_KEY_OTHER_PROVIDER_MEDICATIONS","getActiveMedications","useQueryAllPatientMedications","builderMedications","setBuilderMedications","otherProviderMedications","setOtherProviderMedications","summarizedMedicationsQuery","builderMedicationsQuery","useEffect","_a","_b","summarizedMedications","summarizedBundle","allMedicationsForBuilder","basicsMap","getIncludedBasics","includedResources","getMergedIncludedResources","splitData","splitMedications","m","MedicationStatementModel","isFetching","isError"],"mappings":"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"}