{"version":3,"file":"patient-conditions.stories.7c9c43ce.js","sources":["../../node_modules/@heroicons/react/outline/esm/PlusIcon.js","../../src/components/content/conditions/patient-conditions-actions.tsx","../../src/components/content/conditions/patient-conditions-columns.tsx","../../src/components/content/conditions/patient-conditions-filters.tsx","../../src/components/content/conditions/patient-conditions-header.tsx","../../src/components/content/conditions/patient-conditions-history.tsx","../../src/components/content/conditions/patient-conditions-menu-actions.tsx","../../src/components/content/conditions/patient-conditions.tsx","../../src/components/content/conditions/patient-conditions.stories.tsx"],"sourcesContent":["import * as React from \"react\";\n\nfunction PlusIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 4v16m8-8H4\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(PlusIcon);\nexport default ForwardRef;","import type { ConditionFormData } from \"./patient-conditions\";\nimport { PlusIcon } from \"@heroicons/react/outline\";\nimport { curry } from \"lodash\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport {\n  createOrEditCondition,\n  getAddConditionWithDefaults,\n} from \"../forms/actions/conditions\";\nimport {\n  conditionAddSchema,\n  conditionEditSchema,\n  getAddConditionData,\n  getEditingPatientConditionData,\n} from \"../forms/schemas/condition-schema\";\nimport { CTWRequestContext } from \"@/components/core/ctw-context\";\nimport { DrawerFormWithFields } from \"@/components/core/form/drawer-form-with-fields\";\nimport { usePatient } from \"@/components/core/patient-provider\";\nimport { Toggle } from \"@/components/core/toggle\";\nimport { recordProfileAction } from \"@/fhir/basic\";\nimport { getNewCondition } from \"@/fhir/conditions\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { QUERY_KEY_OTHER_PROVIDER_CONDITIONS } from \"@/utils/query-keys\";\nimport { queryClient } from \"@/utils/request\";\n\nexport type PatientConditionsActionsProps = {\n  hideAdd: boolean;\n  onToggleShowHistoric: () => void;\n};\n\nexport function PatientConditionsActions({\n  hideAdd,\n  onToggleShowHistoric,\n}: PatientConditionsActionsProps) {\n  const patientResponse = usePatient();\n  const patientId = patientResponse.data?.id ?? \"\";\n  const [isAddDrawerOpen, setIsAddDrawerOpen] = useState(false);\n\n  const newCondition = new ConditionModel(getNewCondition(patientId));\n  const newConditionData = getAddConditionData({\n    condition: newCondition,\n  });\n  const handleAddAction = curry(createOrEditCondition)(newCondition, patientId);\n\n  return (\n    <div className=\"ctw-flex ctw-items-center ctw-justify-end ctw-space-x-2 ctw-border-0 ctw-border-t ctw-border-solid ctw-border-divider-light ctw-py-5 ctw-px-4\">\n      <Toggle\n        name=\"historic\"\n        text=\"Show Historic\"\n        onChange={onToggleShowHistoric}\n      />\n      {!hideAdd && (\n        <button\n          type=\"button\"\n          className=\"ctw-btn-icon\"\n          onClick={() => setIsAddDrawerOpen(true)}\n        >\n          <PlusIcon className=\"ctw-h-4 ctw-w-4\" />\n        </button>\n      )}\n\n      <DrawerFormWithFields\n        title=\"Add Condition\"\n        action={handleAddAction}\n        data={newConditionData}\n        schema={conditionAddSchema}\n        isOpen={isAddDrawerOpen}\n        onClose={() => setIsAddDrawerOpen(false)}\n      />\n    </div>\n  );\n}\n\nexport const handleAddOtherProviderCondition = (\n  condition: ConditionModel,\n  updateFormProps: React.Dispatch<Partial<ConditionFormData>>\n) => {\n  const newCondition = getAddConditionWithDefaults(condition.resource);\n  updateFormProps({\n    drawerIsOpen: true,\n    actionType: \"Add\",\n    schema: conditionAddSchema,\n    data: getAddConditionData({\n      condition: new ConditionModel(newCondition),\n    }),\n  });\n};\n\nexport const handleEditCondition = (\n  condition: ConditionModel,\n  setSelectedCondition: React.Dispatch<\n    React.SetStateAction<ConditionModel | undefined>\n  >,\n  updateFormProps: React.Dispatch<Partial<ConditionFormData>>\n) => {\n  updateFormProps({\n    drawerIsOpen: true,\n    actionType: \"Edit\",\n    schema: conditionEditSchema,\n    data: getEditingPatientConditionData({ condition }),\n  });\n  setSelectedCondition(condition);\n};\n\nexport const handleConditionDelete = (\n  condition: ConditionModel,\n  setSelectedCondition: React.Dispatch<\n    React.SetStateAction<ConditionModel | undefined>\n  >,\n  setShowConfirmDelete: Dispatch<SetStateAction<boolean>>\n) => {\n  setShowConfirmDelete(true);\n  setSelectedCondition(condition);\n};\n\nexport const handleToggleArchive = async (\n  condition: ConditionModel,\n  getRequestContext: () => Promise<CTWRequestContext>\n) => {\n  const requestContext = await getRequestContext();\n  const existingBasic =\n    condition.getBasicResourceByAction(\"archive\") ||\n    condition.getBasicResourceByAction(\"unarchive\");\n  const profileAction = condition.isArchived ? \"unarchive\" : \"archive\";\n\n  await recordProfileAction(\n    existingBasic,\n    condition,\n    requestContext,\n    profileAction\n  );\n\n  // Refresh our data (this is really just needed to update\n  // otherProviderRecord state).\n  await queryClient.invalidateQueries([QUERY_KEY_OTHER_PROVIDER_CONDITIONS]);\n};\n","import cx from \"classnames\";\nimport { compact } from \"lodash\";\nimport { TableColumn } from \"@/components/core/table/table-helpers\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nfunction statusToColor(status: string) {\n  switch (status) {\n    case \"Active\":\n      return \"ctw-text-success-main\";\n    case \"Pending\":\n      return \"ctw-text-caution-main\";\n    default:\n      return \"ctw-text-content-lighter\";\n  }\n}\n\nexport const patientConditionsColumns: TableColumn<ConditionModel>[] = [\n  {\n    widthPercent: 30,\n    minWidth: 320,\n    render: (condition) => (\n      <div>\n        <div className=\"ctw-pc-title group-hover:ctw-underline\">\n          {condition.display}\n        </div>\n        <div className=\"ctw-pc-chapter\">{condition.ccsChapter}</div>\n      </div>\n    ),\n  },\n  {\n    render: (condition) => (\n      <div className=\"ctw-pc-status-container\">\n        <div\n          className={cx(\"ctw-pc-status-dot\", statusToColor(condition.status))}\n        >\n          &bull;\n        </div>\n        <div className=\"ctw-pc-status-and-extra\">\n          <div className=\"ctw-pc-status\">{condition.status}</div>\n\n          {condition.isSummaryResource ? (\n            <div>\n              {compact([\n                condition.patient?.organization?.name,\n                condition.recordedDate,\n              ]).join(\" \")}\n            </div>\n          ) : (\n            <div>\n              {compact([condition.recorder, condition.recordedDate]).join(\" \")}\n            </div>\n          )}\n        </div>\n      </div>\n    ),\n    widthPercent: 30,\n    minWidth: 128,\n  },\n  {\n    widthPercent: 40,\n    minWidth: 132,\n    render: (condition) => {\n      const onsetText = condition.isSummaryResource\n        ? \"Earliest known onset:\"\n        : \"Onset:\";\n\n      return (\n        <div className=\"ctw-pc-onset-notes\">\n          {condition.onset && (\n            <div>\n              {onsetText} {condition.onset}\n            </div>\n          )}\n          <div className=\"ctw-pc-notes\">{condition.notes.join(\" \")}</div>\n        </div>\n      );\n    },\n  },\n];\n","import { cloneDeep, merge } from \"lodash\";\nimport { useState } from \"react\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nexport type FilterCollection = \"patient\" | \"other\";\n\nexport type Filters = {\n  collection: FilterCollection;\n  showHistoric: boolean;\n};\n\nexport function useConditionFilters() {\n  const [filters, setFilters] = useState<Filters>({\n    collection: \"patient\",\n    showHistoric: false,\n  });\n\n  function updateFilters(newFilters: Partial<Filters>) {\n    setFilters(merge(cloneDeep(filters), newFilters));\n  }\n\n  function applyFilters(\n    patientConditions: ConditionModel[],\n    otherConditions: ConditionModel[]\n  ) {\n    const conditions =\n      filters.collection === \"patient\" ? patientConditions : otherConditions;\n    return conditions.filter((c) => {\n      if (filters.showHistoric) return true;\n\n      return [\"Active\", \"Pending\"].includes(c.status);\n    });\n  }\n\n  return { filters, updateFilters, applyFilters };\n}\n","import cx from \"classnames\";\nimport { FilterCollection } from \"./patient-conditions-filters\";\nimport { Badge } from \"@/components/core/badge\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nexport type PatientConditionsHeaderProps = {\n  collection: FilterCollection;\n  otherConditions: ConditionModel[];\n  onCollectionChange: (collection: FilterCollection) => void;\n};\n\nexport function PatientConditionsHeader({\n  collection,\n  otherConditions,\n  onCollectionChange,\n}: PatientConditionsHeaderProps) {\n  function activeClass(collection2: FilterCollection) {\n    return collection === collection2 ? \"ctw-btn-primary\" : \"ctw-btn-default\";\n  }\n\n  const activeCount = otherConditions.filter(\n    (condition) => condition.status === \"Active\"\n  ).length;\n\n  return (\n    <div className=\"ctw-flex ctw-items-center ctw-justify-between ctw-py-5 ctw-px-4\">\n      <div className=\"ctw-text-xl ctw-font-medium ctw-text-content-black\">\n        Conditions\n      </div>\n      <div className=\"ctw-space-x-2\">\n        <button\n          type=\"button\"\n          className={activeClass(\"patient\")}\n          onClick={() => onCollectionChange(\"patient\")}\n        >\n          Patient Record\n        </button>\n        <button\n          type=\"button\"\n          className={cx(activeClass(\"other\"), \"ctw-space-x-2\")}\n          onClick={() => onCollectionChange(\"other\")}\n        >\n          <span>Other Provider Records</span>\n          <Badge text={`${activeCount}`} color=\"gray\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { Dispatch, SetStateAction } from \"react\";\nimport { ConditionModel } from \"@/fhir/models\";\n\ntype HistoryDrawerReadOnlyCheck = {\n  data?: ConditionModel;\n  patientRecords: ConditionModel[];\n  handleEditCondition: (data: ConditionModel) => void;\n};\n\nexport const createHandleEditCondition = ({\n  data,\n  patientRecords,\n  handleEditCondition,\n}: HistoryDrawerReadOnlyCheck) => {\n  if (data && patientRecords.some((record) => record.id === data.id)) {\n    return () => handleEditCondition(data);\n  }\n  return undefined;\n};\n\nexport const handleOpeningHistoryDrawer = (\n  setHistoryDrawerIsOpen: Dispatch<SetStateAction<boolean>>,\n  setSelectedCondition: Dispatch<SetStateAction<ConditionModel | undefined>>,\n  data: ConditionModel\n) => {\n  setHistoryDrawerIsOpen(true);\n  setSelectedCondition(data);\n};\n","import type { ConditionFormData } from \"./patient-conditions\";\nimport React, { Dispatch, SetStateAction } from \"react\";\nimport {\n  handleAddOtherProviderCondition,\n  handleConditionDelete,\n  handleEditCondition,\n  handleToggleArchive,\n} from \"./patient-conditions-actions\";\nimport { FilterCollection } from \"./patient-conditions-filters\";\nimport { CTWRequestContext } from \"@/components/core/ctw-context\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nexport const handleActionForRecordType = (\n  filterCollection: FilterCollection,\n  record: ConditionModel,\n  setSelectedCondition: React.Dispatch<\n    React.SetStateAction<ConditionModel | undefined>\n  >,\n  updateFormProps: React.Dispatch<Partial<ConditionFormData>>,\n  setShowConfirmDelete: Dispatch<SetStateAction<boolean>>,\n  getRequestContext: () => Promise<CTWRequestContext>\n) => {\n  switch (filterCollection) {\n    case \"patient\":\n      return EditDeleteConditionHoverActions(\n        record,\n        setSelectedCondition,\n        updateFormProps,\n        setShowConfirmDelete\n      );\n    case \"other\":\n      return ArchiveAddConditionHoverActions(\n        record,\n        updateFormProps,\n        getRequestContext\n      );\n    default:\n      throw Error(`${filterCollection} is not in the FilterCollection type`);\n  }\n};\n\nexport const EditDeleteConditionHoverActions = (\n  condition: ConditionModel,\n  setSelectedCondition: React.Dispatch<\n    React.SetStateAction<ConditionModel | undefined>\n  >,\n  updateFormProps: React.Dispatch<Partial<ConditionFormData>>,\n  setShowConfirmDelete: Dispatch<SetStateAction<boolean>>\n) => (\n  <div className=\"ctw-flex ctw-space-x-2\">\n    <button\n      type=\"button\"\n      className=\"ctw-btn-default\"\n      onClick={(event) => {\n        event.stopPropagation();\n        handleConditionDelete(\n          condition,\n          setSelectedCondition,\n          setShowConfirmDelete\n        );\n      }}\n    >\n      Remove\n    </button>\n    <button\n      type=\"button\"\n      className=\"ctw-btn-primary\"\n      onClick={(event) => {\n        event.stopPropagation();\n        handleEditCondition(condition, setSelectedCondition, updateFormProps);\n      }}\n    >\n      Edit\n    </button>\n  </div>\n);\n\nexport const ArchiveAddConditionHoverActions = (\n  condition: ConditionModel,\n  updateFormProps: React.Dispatch<Partial<ConditionFormData>>,\n  getRequestContext: () => Promise<CTWRequestContext>\n) => {\n  const { isArchived } = condition;\n  const profileAction = isArchived ? \"Un-Archive\" : \"Archive\";\n  return (\n    <div className=\"ctw-flex ctw-space-x-2\">\n      <button\n        type=\"button\"\n        className=\"ctw-btn-default\"\n        onClick={async (event) => {\n          event.stopPropagation();\n          await handleToggleArchive(condition, getRequestContext);\n        }}\n      >\n        {profileAction}\n      </button>\n      <button\n        type=\"button\"\n        className=\"ctw-btn-primary\"\n        onClick={(event) => {\n          event.stopPropagation();\n          handleAddOtherProviderCondition(condition, updateFormProps);\n        }}\n      >\n        Add\n      </button>\n    </div>\n  );\n};\n","import cx from \"classnames\";\nimport \"./patient-conditions.scss\";\nimport { curry } from \"lodash\";\nimport { useReducer, useRef, useState } from \"react\";\nimport { ConditionHeader } from \"../condition-header\";\nimport { ConditionHistoryDrawer } from \"../condition-history/conditions-history-drawer\";\nimport { onConditionDelete } from \"../conditions-helper\";\nimport { createOrEditCondition } from \"../forms/actions/conditions\";\nimport {\n  conditionAddSchema,\n  conditionEditSchema,\n  getEditingPatientConditionData,\n} from \"../forms/schemas/condition-schema\";\nimport { filterOtherConditions } from \"./helpers\";\nimport { PatientConditionsActions } from \"./patient-conditions-actions\";\nimport { patientConditionsColumns } from \"./patient-conditions-columns\";\nimport { useConditionFilters } from \"./patient-conditions-filters\";\nimport { PatientConditionsHeader } from \"./patient-conditions-header\";\nimport {\n  createHandleEditCondition,\n  handleOpeningHistoryDrawer,\n} from \"./patient-conditions-history\";\nimport { handleActionForRecordType } from \"./patient-conditions-menu-actions\";\nimport { useCTW } from \"@/components/core/ctw-provider\";\nimport {\n  DrawerFormWithFields,\n  FormEntry,\n} from \"@/components/core/form/drawer-form-with-fields\";\nimport { ModalConfirmDelete } from \"@/components/core/modal-confirm-delete\";\nimport { usePatient } from \"@/components/core/patient-provider\";\nimport { Table } from \"@/components/core/table/table\";\nimport {\n  useOtherProviderConditions,\n  usePatientConditions,\n} from \"@/fhir/conditions\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { useBreakpoints } from \"@/hooks/use-breakpoints\";\nimport { AnyZodSchema } from \"@/utils/form-helper\";\n\nexport type PatientConditionsProps = {\n  className?: string;\n  readOnly?: boolean;\n};\n\nexport type ConditionFormData = {\n  schema: AnyZodSchema;\n  actionType: string;\n  data: FormEntry[] | undefined;\n  drawerIsOpen: boolean;\n};\n\nconst DEFAULT_FORM_PROPS = {\n  schema: conditionAddSchema,\n  actionType: \"Add\",\n  data: undefined,\n  drawerIsOpen: false,\n};\nexport function PatientConditions({\n  className,\n  readOnly = false,\n}: PatientConditionsProps) {\n  // State.\n  const { filters, updateFilters, applyFilters } = useConditionFilters();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const breakpoints = useBreakpoints(containerRef);\n  const [historyDrawerIsOpen, setHistoryDrawerIsOpen] = useState(false);\n  const [selectedCondition, setSelectedCondition] = useState<ConditionModel>();\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\n\n  // Reducers\n  const [formProps, updateFormProps] = useReducer(\n    (data: ConditionFormData, partialData: Partial<ConditionFormData>) => ({\n      ...data,\n      ...partialData,\n    }),\n    DEFAULT_FORM_PROPS\n  );\n\n  // Data fetching.\n  const patientConditionsQuery = usePatientConditions();\n  const otherConditionsQuery = useOtherProviderConditions();\n  const patientQuery = usePatient();\n  const { getRequestContext } = useCTW();\n\n  function isLoading() {\n    const isLoadingPatient = patientConditionsQuery.isLoading;\n    const isLoadingOther = isLoadingPatient || otherConditionsQuery.isLoading;\n    return filters.collection === \"patient\" ? isLoadingPatient : isLoadingOther;\n  }\n\n  // Get our conditions.\n  const patientConditions = patientConditionsQuery.data ?? [];\n  const otherConditions = filterOtherConditions(\n    otherConditionsQuery.data ?? [],\n    patientConditions,\n    true\n  );\n  const conditions = applyFilters(patientConditions, otherConditions);\n\n  // Handlers\n  const handleEditCondition = (condition: ConditionModel) => {\n    if (patientQuery.data) {\n      updateFormProps({\n        actionType: \"Edit\",\n        schema: conditionEditSchema,\n        data: getEditingPatientConditionData({ condition }),\n        drawerIsOpen: true,\n      });\n      setSelectedCondition(condition);\n    }\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      className={cx(\"ctw-patient-conditions\", className, {\n        \"ctw-patient-conditions-stacked\": breakpoints.sm,\n      })}\n    >\n      <PatientConditionsHeader\n        otherConditions={otherConditions}\n        collection={filters.collection}\n        onCollectionChange={(collection) => updateFilters({ collection })}\n      />\n      <PatientConditionsActions\n        hideAdd={readOnly || filters.collection === \"other\"}\n        onToggleShowHistoric={() =>\n          updateFilters({ showHistoric: !filters.showHistoric })\n        }\n      />\n      <Table\n        stacked={breakpoints.sm}\n        className=\"-ctw-mx-px !ctw-rounded-none\"\n        showTableHead={false}\n        isLoading={isLoading()}\n        records={conditions}\n        rowActions={(record: ConditionModel) =>\n          handleActionForRecordType(\n            filters.collection,\n            record,\n            setSelectedCondition,\n            updateFormProps,\n            setShowConfirmDelete,\n            getRequestContext\n          )\n        }\n        columns={patientConditionsColumns}\n        handleRowClick={(data: ConditionModel) =>\n          handleOpeningHistoryDrawer(\n            setHistoryDrawerIsOpen,\n            setSelectedCondition,\n            data\n          )\n        }\n      />\n      <ConditionHistoryDrawer\n        isOpen={historyDrawerIsOpen}\n        onClose={() => setHistoryDrawerIsOpen(false)}\n        condition={selectedCondition}\n        onEdit={createHandleEditCondition({\n          data: selectedCondition,\n          patientRecords: patientConditions,\n          handleEditCondition,\n        })}\n      />\n      {patientQuery.data && (\n        <DrawerFormWithFields\n          title={`${formProps.actionType} Condition`}\n          header={\n            formProps.actionType === \"Edit\" &&\n            selectedCondition && (\n              <ConditionHeader condition={selectedCondition} />\n            )\n          }\n          action={curry(createOrEditCondition)(\n            selectedCondition,\n            patientQuery.data.id\n          )}\n          data={formProps.data}\n          schema={formProps.schema}\n          isOpen={formProps.drawerIsOpen}\n          onClose={() => updateFormProps({ drawerIsOpen: false })}\n        />\n      )}\n\n      {selectedCondition && patientQuery.data && (\n        <ModalConfirmDelete\n          resource={selectedCondition}\n          resourceName={selectedCondition.display || \"unnamed condition\"}\n          onClose={() => setShowConfirmDelete(false)}\n          isOpen={showConfirmDelete}\n          onDelete={async () => {\n            const requestContext = await getRequestContext();\n            await onConditionDelete(selectedCondition.resource, requestContext);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","import type { Meta, StoryObj } from \"@storybook/react\";\nimport { PatientConditions, PatientConditionsProps } from \"./patient-conditions\";\nimport { otherConditions } from \"./story-helpers/mocks/other-conditions\";\nimport { patientConditions } from \"./story-helpers/mocks/patient-conditions\";\nimport { setupConditionMocks } from \"./story-helpers/mocks/requests\";\nimport { CTWProvider } from \"@/components/core/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\ntype Props = PatientConditionsProps;\nexport default ({\n  component: PatientConditions,\n  tags: [\"docsPage\"],\n  argTypes: {\n    className: {\n      options: [\"Blank\", \"Fixed Width\"],\n      control: \"select\",\n      mapping: {\n        Blank: \"\",\n        \"Fixed Width\": \"ctw-m-auto ctw-max-w-[600px]\"\n      }\n    }\n  },\n  args: {\n    className: \"Blank\",\n    readOnly: false\n  },\n  decorators: [(Story, {\n    args\n  }) => <CTWProvider env=\"dev\" authToken=\"dummy-token\" builderId=\"b123\">\n        <PatientProvider patientID=\"u12345\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>]\n} as Meta<Props>);\nexport const Basic: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions,\n    patientConditions\n  })\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  storySource: {\n    source: \"{\\n  ...setupConditionMocks({\\n    otherConditions,\\n    patientConditions\\n  })\\n}\",\n    ...Basic.parameters?.storySource\n  }\n};"],"names":["PlusIcon","props","svgRef","React.createElement","ForwardRef","React.forwardRef","PlusIcon$1","PatientConditionsActions","hideAdd","onToggleShowHistoric","patientId","_b","_a","usePatient","isAddDrawerOpen","setIsAddDrawerOpen","useState","newCondition","ConditionModel","getNewCondition","newConditionData","getAddConditionData","handleAddAction","curry","createOrEditCondition","React","Toggle","DrawerFormWithFields","conditionAddSchema","handleAddOtherProviderCondition","condition","updateFormProps","getAddConditionWithDefaults","handleEditCondition","setSelectedCondition","conditionEditSchema","getEditingPatientConditionData","handleConditionDelete","setShowConfirmDelete","handleToggleArchive","getRequestContext","requestContext","existingBasic","profileAction","recordProfileAction","queryClient","QUERY_KEY_OTHER_PROVIDER_CONDITIONS","statusToColor","status","patientConditionsColumns","cx","compact","onsetText","useConditionFilters","filters","setFilters","updateFilters","newFilters","merge","cloneDeep","applyFilters","patientConditions","otherConditions","c","PatientConditionsHeader","collection","onCollectionChange","activeClass","collection2","activeCount","Badge","createHandleEditCondition","data","patientRecords","record","handleOpeningHistoryDrawer","setHistoryDrawerIsOpen","handleActionForRecordType","filterCollection","EditDeleteConditionHoverActions","ArchiveAddConditionHoverActions","event","isArchived","DEFAULT_FORM_PROPS","PatientConditions","className","readOnly","containerRef","useRef","breakpoints","useBreakpoints","historyDrawerIsOpen","selectedCondition","showConfirmDelete","formProps","useReducer","partialData","patientConditionsQuery","usePatientConditions","otherConditionsQuery","useOtherProviderConditions","patientQuery","useCTW","isLoading","isLoadingPatient","isLoadingOther","filterOtherConditions","conditions","Table","ConditionHistoryDrawer","ConditionHeader","ModalConfirmDelete","onConditionDelete","patientConditions_stories","Story","args","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupConditionMocks"],"mappings":"2qBAEA,SAASA,GAASC,EAAOC,EAAQ,CAC/B,OAAoBC,wBAAoB,MAAO,OAAO,OAAO,CAC3D,MAAO,6BACP,KAAM,OACN,QAAS,YACT,YAAa,EACb,OAAQ,eACR,cAAe,OACf,IAAKD,CACT,EAAKD,CAAK,EAAgBE,EAAmB,QAAA,cAAC,OAAQ,CAClD,cAAe,QACf,eAAgB,QAChB,EAAG,gBACJ,CAAA,CAAC,CACJ,CAEA,MAAMC,GAAaC,EAAAA,QAAAA,WAAiBL,EAAQ,EAC5CM,GAAeF,GCUR,SAAAG,EAAA,CAAkC,QAAAC,EACvC,qBAAAC,CAEF,EAAA,SAEE,MAAAC,GAAAC,GAAAC,EADAC,IACA,OAAA,YAAAD,EAAA,KAAA,KAAAD,EAAA,GACA,CAAAG,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAA,EAAA,EAEAC,EAAA,IAAAC,EAAAC,EAAAT,CAAA,CAAA,EACAU,EAAAC,EAAA,CAA6C,UAAAJ,CAChC,CAAA,EAEbK,EAAAC,EAAAA,QAAAA,MAAAC,CAAA,EAAAP,EAAAP,CAAA,EAEA,OAAAe,EAAA,cAAA,MAAA,CACG,UAAA,+IAAc,EAAAA,EAAA,cAAAC,EAAA,CACZ,KAAA,WACM,KAAA,gBACA,SAAAjB,CACK,CAAA,EAAA,CAAAD,GAAAiB,EAAA,cAAA,SAAA,CAGT,KAAA,SACM,UAAA,eACK,QAAA,IAAAV,EAAA,EAAA,CAC4B,EAAAU,EAAA,cAAAzB,GAAA,CAErC,UAAA,iBAAmB,CAAA,CAAA,EAAAyB,EAAA,cAAAE,EAAA,CAIvB,MAAA,gBACO,OAAAL,EACE,KAAAF,EACF,OAAAQ,EACE,OAAAd,EACA,QAAA,IAAAC,EAAA,EAAA,CAC+B,CAAA,CAAA,CAI/C,CAEO,MAAAc,GAAA,CAAAC,EAAAC,IAAA,CAIL,MAAAd,EAAAe,EAAAF,EAAA,QAAA,EACAC,EAAA,CAAgB,aAAA,GACA,WAAA,MACF,OAAAH,EACJ,KAAAP,EAAA,CACkB,UAAA,IAAAH,EAAAD,CAAA,CACkB,CAAA,CAC3C,CAAA,CAEL,EAEOgB,GAAA,CAAAH,EAAAI,EAAAH,IAAA,CAOLA,EAAA,CAAgB,aAAA,GACA,WAAA,OACF,OAAAI,EACJ,KAAAC,EAAA,CAAA,UAAAN,EAAA,CAC0C,CAAA,EAEpDI,EAAAJ,CAAA,CACF,EAEOO,GAAA,CAAAP,EAAAI,EAAAI,IAAA,CAOLA,EAAA,EAAA,EACAJ,EAAAJ,CAAA,CACF,EAEOS,GAAA,MAAAT,EAAAU,IAAA,CAIL,MAAAC,EAAA,MAAAD,IACAE,EAAAZ,EAAA,yBAAA,SAAA,GAAAA,EAAA,yBAAA,WAAA,EAGAa,EAAAb,EAAA,WAAA,YAAA,UAEA,MAAAc,EAAMF,EACJZ,EACAW,EACAE,CACA,EAKF,MAAAE,GAAA,kBAAA,CAAAC,CAAA,CAAA,CACF,0VCjIA,SAASC,GAAcC,EAAgB,CACrC,OAAQA,EAAQ,CACd,IAAK,SACI,MAAA,wBACT,IAAK,UACI,MAAA,wBACT,QACS,MAAA,0BACX,CACF,CAEO,MAAMC,GAA0D,CACrE,CACE,aAAc,GACd,SAAU,IACV,OAASnB,GACPL,EAAA,cAAC,WACEA,EAAA,cAAA,MAAA,CAAI,UAAU,wCACZ,EAAAK,EAAU,OACb,EACCL,EAAA,cAAA,MAAA,CAAI,UAAU,gBAAA,EAAkBK,EAAU,UAAW,CACxD,CAEJ,EACA,CACE,OAASA,GAAA,SACN,OAAAL,EAAA,cAAA,MAAA,CAAI,UAAU,yBAAA,EACZA,EAAA,cAAA,MAAA,CACC,UAAWyB,EAAG,oBAAqBH,GAAcjB,EAAU,MAAM,CAAC,CACnE,EAAA,QAED,EACCL,EAAA,cAAA,MAAA,CAAI,UAAU,yBAAA,EACZA,EAAA,cAAA,MAAA,CAAI,UAAU,eAAA,EAAiBK,EAAU,MAAO,EAEhDA,EAAU,kBACTL,EAAA,cAAC,WACE0B,kBAAQ,EACPxC,GAAAC,EAAAkB,EAAU,UAAV,YAAAlB,EAAmB,eAAnB,YAAAD,EAAiC,KACjCmB,EAAU,YAAA,CACX,EAAE,KAAK,GAAG,CACb,EAEAL,EAAA,cAAC,WACE0B,EAAAA,QAAAA,QAAQ,CAACrB,EAAU,SAAUA,EAAU,YAAY,CAAC,EAAE,KAAK,GAAG,CACjE,CAEJ,CACF,GAEF,aAAc,GACd,SAAU,GACZ,EACA,CACE,aAAc,GACd,SAAU,IACV,OAASA,GAAc,CACf,MAAAsB,EAAYtB,EAAU,kBACxB,wBACA,SAEJ,OACGL,EAAA,cAAA,MAAA,CAAI,UAAU,oBACZ,EAAAK,EAAU,OACRL,EAAA,cAAA,MAAA,KACE2B,EAAU,IAAEtB,EAAU,KACzB,EAEDL,EAAA,cAAA,MAAA,CAAI,UAAU,cAAA,EAAgBK,EAAU,MAAM,KAAK,GAAG,CAAE,CAC3D,CAEJ,CACF,CACF,ECnEO,SAASuB,IAAsB,CACpC,KAAM,CAACC,EAASC,CAAU,EAAIvC,mBAAkB,CAC9C,WAAY,UACZ,aAAc,EAAA,CACf,EAED,SAASwC,EAAcC,EAA8B,CACnDF,EAAWG,EAAM,QAAA,MAAAC,EAAA,QAAA,UAAUL,CAAO,EAAGG,CAAU,CAAC,CAClD,CAES,SAAAG,EACPC,EACAC,EACA,CAGO,OADLR,EAAQ,aAAe,UAAYO,EAAoBC,GACvC,OAAQC,GACpBT,EAAQ,aAAqB,GAE1B,CAAC,SAAU,SAAS,EAAE,SAASS,EAAE,MAAM,CAC/C,CACH,CAEO,MAAA,CAAE,QAAAT,EAAS,cAAAE,EAAe,aAAAI,EACnC,CCxBO,SAAAI,EAAA,CAAiC,WAAAC,EACtC,gBAAAH,EACA,mBAAAI,CAEF,EAAA,CACE,SAAAC,EAAAC,EAAA,CACE,OAAAH,IAAAG,EAAA,kBAAA,iBAAwD,CAG1D,MAAAC,EAAAP,EAAA,OAAoChC,GAAAA,EAAA,SAAA,QACE,EAAA,OAGtC,OAAAL,EAAA,cAAA,MAAA,CACG,UAAA,iEAAc,EAAAA,EAAA,cAAA,MAAA,CACZ,UAAA,oDAAc,EAAA,YAAA,EAAAA,EAAA,cAAA,MAAA,CAGd,UAAA,eAAc,EAAAA,EAAA,cAAA,SAAA,CACZ,KAAA,SACM,UAAA0C,EAAA,SAAA,EAC2B,QAAA,IAAAD,EAAA,SAAA,CACW,EAAA,gBAAA,EAAAzC,EAAA,cAAA,SAAA,CAI5C,KAAA,SACM,UAAAyB,EAAAiB,EAAA,OAAA,EAAA,eAAA,EAC8C,QAAA,IAAAD,EAAA,OAAA,CACV,EAAAzC,EAAA,cAAA,OAAA,KAAA,wBAAA,EAAAA,EAAA,cAAA6C,EAAA,CAGxC,KAAA,GAAAD,IAAe,MAAA,MAAqB,CAAA,CAAA,CAAA,CAAA,CAK/C,qhBCvCO,MAAAE,EAAA,CAAA,CAAmC,KAAAC,EACxC,eAAAC,EACA,oBAAAxC,CAEF,IAAA,CACE,GAAAuC,GAAAC,EAAA,KAAAC,GAAAA,EAAA,KAAAF,EAAA,EAAA,EACE,MAAA,IAAAvC,EAAAuC,CAAA,CAGJ,EAEOG,GAAA,CAAAC,EAAA1C,EAAAsC,IAAA,CAKLI,EAAA,EAAA,EACA1C,EAAAsC,CAAA,CACF,keCfO,MAAMK,GAA4B,CACvCC,EACAJ,EACAxC,EAGAH,EACAO,EACAE,IACG,CACH,OAAQsC,EAAkB,CACxB,IAAK,UACI,OAAAC,GACLL,EACAxC,EACAH,EACAO,CAAA,EAEJ,IAAK,QACI,OAAA0C,GACLN,EACA3C,EACAS,CAAA,EAEJ,QACQ,MAAA,MAAM,GAAGsC,uCAAsD,CACzE,CACF,EAEaC,GAAkC,CAC7CjD,EACAI,EAGAH,EACAO,IAECb,EAAA,cAAA,MAAA,CAAI,UAAU,wBAAA,EACZA,EAAA,cAAA,SAAA,CACC,KAAK,SACL,UAAU,kBACV,QAAUwD,GAAU,CAClBA,EAAM,gBAAgB,EACtB5C,GACEP,EACAI,EACAI,CAAA,CAEJ,CAAA,EACD,QAED,EACCb,EAAA,cAAA,SAAA,CACC,KAAK,SACL,UAAU,kBACV,QAAUwD,GAAU,CAClBA,EAAM,gBAAgB,EACFhD,GAAAH,EAAWI,EAAsBH,CAAe,CACtE,CAAA,EACD,MAED,CACF,EAGWiD,GAAkC,CAC7ClD,EACAC,EACAS,IACG,CACG,KAAA,CAAE,WAAA0C,CAAe,EAAApD,EACjBa,EAAgBuC,EAAa,aAAe,UAClD,OACGzD,EAAA,cAAA,MAAA,CAAI,UAAU,wBAAA,EACZA,EAAA,cAAA,SAAA,CACC,KAAK,SACL,UAAU,kBACV,QAAS,MAAOwD,GAAU,CACxBA,EAAM,gBAAgB,EAChB,MAAA1C,GAAoBT,EAAWU,CAAiB,CACxD,CAEC,EAAAG,CACH,EACClB,EAAA,cAAA,SAAA,CACC,KAAK,SACL,UAAU,kBACV,QAAUwD,GAAU,CAClBA,EAAM,gBAAgB,EACtBpD,GAAgCC,EAAWC,CAAe,CAC5D,CAAA,EACD,KAED,CACF,CAEJ,ECzDAoD,GAAA,CAA2B,OAAAvD,EACjB,WAAA,MACI,KAAA,OACN,aAAA,EAER,EACO,SAAAwD,EAAA,CAA2B,UAAAC,EAChC,SAAAC,EAAA,EAEF,EAAA,SAEE,KAAA,CAAA,QAAAhC,EAAA,cAAAE,EAAA,aAAAI,CAAA,EAAAP,GAAA,EACAkC,EAAAC,iBAAA,IAAA,EACAC,EAAAC,EAAAH,CAAA,EACA,CAAAI,EAAAf,CAAA,EAAA5D,EAAA,QAAA,SAAA,EAAA,EACA,CAAA4E,EAAA1D,CAAA,EAAAlB,EAAA,QAAA,SAAA,EACA,CAAA6E,EAAAvD,CAAA,EAAAtB,EAAA,QAAA,SAAA,EAAA,EAGA,CAAA8E,EAAA/D,CAAA,EAAAgE,EAAA,QAAA,WAAqC,CAAAvB,EAAAwB,KAAA,CACoC,GAAAxB,EAClE,GAAAwB,CACA,GACLb,EACA,EAIFc,EAAAC,KACAC,EAAAC,KACAC,EAAAxF,IACA,CAAA,kBAAA2B,GAAA8D,KAEA,SAAAC,GAAA,CACE,MAAAC,EAAAP,EAAA,UACAQ,EAAAD,GAAAL,EAAA,UACA,OAAA7C,EAAA,aAAA,UAAAkD,EAAAC,CAA6D,CAI/D,MAAA5C,GAAAjD,EAAAqF,EAAA,OAAA,KAAArF,EAAA,GACAkD,EAAA4C,IAAwB/F,EAAAwF,EAAA,OAAA,KAAAxF,EAAA,CAAA,EACQkD,EAC9B,EACA,EAEF8C,EAAA/C,EAAAC,EAAAC,CAAA,EAGA7B,EAAAH,GAAA,CACEuE,EAAA,OACEtE,EAAA,CAAgB,WAAA,OACF,OAAAI,EACJ,KAAAC,EAAA,CAAA,UAAAN,EAAA,EAC0C,aAAA,EACpC,CAAA,EAEhBI,EAAAJ,CAAA,EACF,EAGF,OAAAL,EAAA,cAAA,MAAA,CACG,IAAA8D,EACM,UAAArC,EAAA,yBAAAmC,EAAA,CAC8C,iCAAAI,EAAA,EACH,CAAA,CAC/C,EAAAhE,EAAA,cAAAuC,EAAA,CAEA,gBAAAF,EACC,WAAAR,EAAA,WACoB,mBAAAW,GAAAT,EAAA,CAAA,WAAAS,CAAA,CAAA,CAC4C,CAAA,EAAAxC,EAAA,cAAAlB,EAAA,CAEjE,QAAA+E,GAAAhC,EAAA,aAAA,QAC6C,qBAAA,IAAAE,EAAA,CAAA,aAAA,CAAAF,EAAA,aAAA,CAEW,CAAA,EAAA7B,EAAA,cAAAmF,EAAA,CAGxD,QAAAnB,EAAA,GACsB,UAAA,+BACX,cAAA,GACK,UAAAc,EAAA,EACM,QAAAI,EACZ,WAAAjC,GAAAG,GAEPvB,EAAA,WACUoB,EACRxC,EACAH,EACAO,EACAE,CACA,EACF,QAAAS,GAEO,eAAAuB,GAAAG,GAEPC,EACE1C,EACAsC,CACA,CACF,CAAA,EAAA/C,EAAA,cAAAoF,GAAA,CAGH,OAAAlB,EACS,QAAA,IAAAf,EAAA,EAAA,EACmC,UAAAgB,EAChC,OAAArB,EAAA,CACuB,KAAAqB,EAC1B,eAAA/B,EACU,oBAAA5B,CAChB,CAAA,CACD,CAAA,EAAAoE,EAAA,MAAA5E,EAAA,cAAAE,EAAA,CAGA,MAAA,GAAAmE,EAAA,uBACqB,OAAAA,EAAA,aAAA,QAAAF,GAAAnE,EAAA,cAAAqF,GAAA,CAIf,UAAAlB,CAA2B,CAAA,EAAmB,OAAArE,EAAA,QAAA,MAAAC,CAAA,EAGhBoE,EACjCS,EAAA,KAAA,EACkB,EACpB,KAAAP,EAAA,KACgB,OAAAA,EAAA,OACE,OAAAA,EAAA,aACA,QAAA,IAAA/D,EAAA,CAAA,aAAA,EAAA,CAAA,CACoC,CAAA,EAAA6D,GAAAS,EAAA,MAAA5E,EAAA,cAAAsF,GAAA,CAKvD,SAAAnB,EACW,aAAAA,EAAA,SAAA,oBACiC,QAAA,IAAAtD,EAAA,EAAA,EACF,OAAAuD,EACjC,SAAA,SAAA,CAEN,MAAApD,EAAA,MAAAD,IACA,MAAAwE,GAAApB,EAAA,SAAAnD,CAAA,CAAkE,CACpE,CAAA,CAAA,CAKV,8TC9LA,MAAgBwE,GAAA,CACd,UAAW7B,EACX,KAAM,CAAC,UAAU,EACjB,SAAU,CACR,UAAW,CACT,QAAS,CAAC,QAAS,aAAa,EAChC,QAAS,SACT,QAAS,CACP,MAAO,GACP,cAAe,8BACjB,CACF,CACF,EACA,KAAM,CACJ,UAAW,QACX,SAAU,EACZ,EACA,WAAY,CAAC,CAAC8B,EAAO,CACnB,KAAAC,CAAA,IACK1F,EAAA,cAAA2F,GAAA,CAAY,IAAI,MAAM,UAAU,cAAc,UAAU,MAAA,EACxD3F,EAAA,cAAA4F,GAAA,CAAgB,UAAU,SAAS,UAAWC,EAAA,EAC5C7F,EAAA,cAAAyF,EAAA,CAAM,KAAAC,CAAY,CAAA,CACrB,CACF,CAAc,CACpB,EACaI,EAAyB,CACpC,GAAGC,GAAoB,CACrB,gBAAA1D,GAAA,kBACAD,EAAA,CACD,CACH,QACA0D,EAAM,WAAa,CACjB,GAAGA,EAAM,WACT,YAAa,CACX,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,GACR,IAAG3G,EAAA2G,EAAM,aAAN,YAAA3G,EAAkB,WACvB,CACF"}