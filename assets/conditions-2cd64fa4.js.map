{"version":3,"file":"conditions-2cd64fa4.js","sources":["../../node_modules/lodash/isUndefined.js","../../node_modules/lodash/negate.js","../../node_modules/lodash/omitBy.js","../../src/components/content/forms/actions/conditions.ts","../../src/components/content/conditions/helpers.ts","../../src/fhir/mappings/ccs-chapter-names.ts","../../src/fhir/models/condition.ts","../../src/fhir/conditions.ts"],"sourcesContent":["/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n","import { Condition } from \"fhir/r4\";\nimport { ConditionStatus } from \"../types\";\nimport { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { createOrEditFhirResource } from \"@/fhir/action-helper\";\nimport { dateToISO } from \"@/fhir/formatters\";\nimport { ConditionModel } from \"@/fhir/models/condition\";\nimport { getUsersPractitionerReference } from \"@/fhir/practitioner\";\nimport {\n  SYSTEM_CONDITION_CATEGORY,\n  SYSTEM_CONDITION_CLINICAL,\n  SYSTEM_CONDITION_VERIFICATION_STATUS,\n} from \"@/fhir/system-urls\";\nimport { cloneDeep, isUndefined, omitBy } from \"@/utils/nodash\";\nimport {\n  QUERY_KEY_OTHER_PROVIDER_CONDITIONS,\n  QUERY_KEY_PATIENT_CONDITIONS,\n} from \"@/utils/query-keys\";\nimport { queryClient } from \"@/utils/request\";\n\n// Sets any autofill values that apply when a user adds a condition, whether creating or confirming.\nexport function getAddConditionWithDefaults(condition: Condition): Condition {\n  const newCondition = cloneDeep(condition);\n\n  return newCondition;\n}\n\nexport const getClincalAndVerificationStatus = (status: ConditionStatus) => {\n  let verificationStatus = \"\";\n  let clinicalStatus = \"\";\n\n  switch (status) {\n    case \"Active\":\n      verificationStatus = \"confirmed\";\n      clinicalStatus = \"active\";\n      break;\n    case \"Inactive\":\n      verificationStatus = \"confirmed\";\n      clinicalStatus = \"inactive\";\n      break;\n    case \"Pending\":\n      verificationStatus = \"unconfirmed\";\n      clinicalStatus = \"active\";\n      break;\n    case \"Refuted\":\n      verificationStatus = \"refuted\";\n      clinicalStatus = \"inactive\";\n      break;\n    case \"Entered In Error\":\n      verificationStatus = \"entered-in-error\";\n      break;\n    default:\n      throw Error(\"status is should be of type ConditionStatus\");\n  }\n\n  return omitBy(\n    {\n      verificationStatus: {\n        coding: [\n          {\n            system: SYSTEM_CONDITION_VERIFICATION_STATUS,\n            code: verificationStatus,\n          },\n        ],\n      },\n      ...(clinicalStatus && {\n        clinicalStatus: {\n          coding: [{ system: SYSTEM_CONDITION_CLINICAL, code: clinicalStatus }],\n        },\n      }),\n    },\n    isUndefined\n  );\n};\n\nexport const createOrEditCondition = async (\n  condition: ConditionModel | undefined,\n  patientID: string,\n  data: CreateOrEditConditionFormData,\n  getRequestContext: () => Promise<CTWRequestContext>\n): Promise<unknown> => {\n  const requestContext = await getRequestContext();\n\n  // Defines the properties of the condition based on the form.\n  // The autofill values that apply to both edits and creates are here; including Practitioner, Recorder, Patient, and Recorded date.\n  const fhirCondition: fhir4.Condition = {\n    resourceType: \"Condition\",\n    id: data.id,\n    recorder: await getUsersPractitionerReference(requestContext),\n    ...getClincalAndVerificationStatus(data.status),\n    // Set category to problem list when creating a condition.\n    category:\n      data.id && condition\n        ? condition.resource.category\n        : [\n            {\n              coding: [\n                {\n                  system: SYSTEM_CONDITION_CATEGORY,\n                  code: \"problem-list-item\",\n                  display: \"Problem List Item\",\n                },\n              ],\n            },\n          ],\n    // Keep all existing codings when editing a condition.\n    code:\n      data.id && condition\n        ? condition.codings\n        : {\n            coding: [\n              {\n                system: data.condition.system,\n                code: data.condition.code,\n                display: data.condition.display,\n              },\n            ],\n            text: data.condition.display,\n          },\n    ...(data.abatement && {\n      abatementDateTime: dateToISO(data.abatement),\n    }),\n    onsetDateTime: dateToISO(data.onset),\n    recordedDate: dateToISO(new Date()),\n    subject: { type: \"Patient\", reference: `Patient/${patientID}` },\n    note: data.note ? [{ text: data.note }] : undefined,\n  };\n\n  const response = await createOrEditFhirResource(\n    fhirCondition,\n    requestContext\n  );\n\n  await Promise.all([\n    queryClient.invalidateQueries([QUERY_KEY_PATIENT_CONDITIONS]),\n    queryClient.invalidateQueries([QUERY_KEY_OTHER_PROVIDER_CONDITIONS]),\n  ]);\n\n  return response;\n};\n\nexport type CreateOrEditConditionFormData = {\n  id?: string;\n  status: ConditionStatus;\n  condition: fhir4.Coding;\n  abatement?: Date;\n  onset: Date;\n  note?: string;\n};\n","import { ConditionModel } from \"@/fhir/models\";\n\n// Filter out other conditions where:\n//  1. Condition is archived and includeArchived is false.\n//  2. CCS Category code starts with FAC or XXX.\n//  3. There is an existing patient condition with a matching known code.\n//     AND The other condition is older than the patient condition OR they\n//     have the same status.\nexport const filterOtherConditions = (\n  otherConditions: ConditionModel[],\n  patientConditions: ConditionModel[],\n  includeArchived: boolean\n): ConditionModel[] =>\n  otherConditions.filter((otherCondition) => {\n    if (otherCondition.isArchived && !includeArchived) return false;\n\n    if ([\"FAC\", \"XXX\"].includes(otherCondition.ccsChapterCode ?? \"\")) {\n      return false;\n    }\n\n    return !patientConditions.some((patientCondition) => {\n      const otherRecordedDate = otherCondition.resource.recordedDate;\n      const patientRecordedDate = patientCondition.resource.recordedDate;\n      const isMatch = otherCondition.knownCodingsMatch(patientCondition);\n      const isEnteredInError =\n        patientCondition.verificationStatus === \"entered-in-error\";\n\n      const isOlder =\n        !otherRecordedDate ||\n        (patientRecordedDate && otherRecordedDate <= patientRecordedDate);\n      const hasSameStatus =\n        otherCondition.clinicalStatus === patientCondition.clinicalStatus;\n\n      return isMatch && !isEnteredInError && (isOlder || hasSameStatus);\n    });\n  });\n","type CCSChapterNameMapType = Record<\n  string,\n  { fullName: string; shortName: string } | undefined\n>;\n\nexport const CCSChapterName: CCSChapterNameMapType = {\n  INF: {\n    fullName: \"Certain Infectious and Parasitic Diseases\",\n    shortName: \"Infectious and Parasitic Diseases\",\n  },\n  NEO: { fullName: \"Neoplasms\", shortName: \"Neoplasms\" },\n  BLD: {\n    fullName:\n      \"Diseases of the Blood and Blood Forming Organs and Certain Disorders Involving the Immune Mechanism\",\n    shortName: \"Blood Diseases\",\n  },\n  END: {\n    fullName: \"Endocrine, Nutritional and Metabolic Diseases\",\n    shortName: \"Endocrine, Nutritional and Metabolic\",\n  },\n  MBD: {\n    fullName: \"Mental, Behavioral and Neurodevelopmental Disorders\",\n    shortName: \"Mental and Behavioral\",\n  },\n  NVS: {\n    fullName: \"Diseases of the Nervous System\",\n    shortName: \"Nervous System\",\n  },\n  EYE: {\n    fullName: \"Diseases of the Eye and Adnexa\",\n    shortName: \"Eye and Adnexa\",\n  },\n  EAR: {\n    fullName: \"Diseases of the Ear and Mastoid Process\",\n    shortName: \"Ear and Mastoid Process\",\n  },\n  CIR: {\n    fullName: \"Diseases of the Circulatory System\",\n    shortName: \"Circulatory System\",\n  },\n  RSP: {\n    fullName: \"Diseases of the Respiratory System\",\n    shortName: \"Respiratory System\",\n  },\n  DIG: {\n    fullName: \"Diseases of the Digestive System\",\n    shortName: \"Digestive System\",\n  },\n  SKN: {\n    fullName: \"Diseases of the Skin and Subcutaneous Tissue\",\n    shortName: \"Skin and Subcutaneous Tissue\",\n  },\n  MUS: {\n    fullName: \"Diseases of the Musculoskeletal System and Connective Tissue\",\n    shortName: \"Musculoskeletal System\",\n  },\n  GEN: {\n    fullName: \"Diseases of the Genitourinary System\",\n    shortName: \"Genitourinary System\",\n  },\n  PRG: {\n    fullName: \"Pregnancy, Childbirth and the Puerperium\",\n    shortName: \"Pregnancy & Childbirth\",\n  },\n  PNL: {\n    fullName: \"Certain Conditions Originating in the Perinatal Period\",\n    shortName: \"Perinatal Conditions\",\n  },\n  MAL: {\n    fullName:\n      \"Congenital Malformations, Deformations and Chromosomal Abnormalities\",\n    shortName: \"Malformations and Chromosomal Abnormalities\",\n  },\n  SYM: {\n    fullName: \"Symptoms, Signs and Abnormal Clinical and Laboratory Findings\",\n    shortName: \"Clinical Findings\",\n  },\n  INJ: {\n    fullName:\n      \"Injury, Poisoning and Certain Other Consequences of External Causes\",\n    shortName: \"External Causes Injury\",\n  },\n  EXT: {\n    fullName: \"External Causes of Morbidity\",\n    shortName: \"External Morbidity\",\n  },\n  FAC: {\n    fullName:\n      \"Factors Influencing Health Status and Contact with Health Services\",\n    shortName: \"Health Status Influences\",\n  },\n  XXX: {\n    fullName:\n      \"Unacceptable principal diagnosis (inpatient data) or first-listed diagnosis (outpatient data)\",\n    shortName: \"Unacceptable principal diagnosis\",\n  },\n};\n","import { formatDateISOToLocal, formatStringToDate } from \"../formatters\";\nimport { CCSChapterName } from \"../mappings/ccs-chapter-names\";\nimport {\n  SYSTEM_CCS,\n  SYSTEM_CONDITION_CLINICAL,\n  SYSTEM_CONDITION_VERIFICATION_STATUS,\n  SYSTEM_ICD10,\n  SYSTEM_SNOMED,\n} from \"../system-urls\";\nimport { FHIRModel } from \"./fhir-model\";\nimport { PatientModel } from \"./patient\";\nimport {\n  codeableConceptLabel,\n  findCoding,\n  findCodingByOrderOfPreference,\n  findCodingWithEnrichment,\n} from \"@/fhir/codeable-concept\";\nimport {\n  ClinicalStatus,\n  CONDITION_CODE_PREFERENCE_ORDER,\n  VerificationStatus,\n} from \"@/fhir/conditions\";\nimport { findReference } from \"@/fhir/resource-helper\";\nimport { compact, find, intersectionWith, uniqWith } from \"@/utils/nodash\";\n\nexport class ConditionModel extends FHIRModel<fhir4.Condition> {\n  get abatement(): string | undefined {\n    if (this.resource.abatementAge) {\n      return this.resource.abatementAge.value?.toString();\n    }\n\n    if (this.resource.abatementDateTime) {\n      return formatDateISOToLocal(this.resource.abatementDateTime);\n    }\n\n    if (this.resource.abatementPeriod) {\n      return formatDateISOToLocal(this.resource.abatementPeriod.start);\n    }\n\n    if (this.resource.abatementRange) {\n      return formatDateISOToLocal(\n        this.resource.abatementRange.low?.value?.toString()\n      );\n    }\n\n    return this.resource.abatementString;\n  }\n\n  get active(): boolean {\n    const coding = find(this.resource.clinicalStatus?.coding, {\n      system: SYSTEM_CONDITION_CLINICAL,\n    });\n\n    return coding?.code\n      ? [\"active\", \"recurrence\", \"relapse\"].includes(coding.code)\n      : false;\n  }\n\n  get isArchived(): boolean {\n    return this.getBasicResourceByAction(\"archive\") !== undefined;\n  }\n\n  get asserter(): string | undefined {\n    return this.resource.asserter?.display;\n  }\n\n  get bodySites(): string[] {\n    return (\n      this.resource.bodySite?.map((bodySite) =>\n        codeableConceptLabel(bodySite)\n      ) || []\n    );\n  }\n\n  get categories(): string[] {\n    return (\n      this.resource.category?.map((category) =>\n        codeableConceptLabel(category)\n      ) || []\n    );\n  }\n\n  get ccsChapter(): string | undefined {\n    const code = this.ccsChapterCode;\n    if (!code) return undefined;\n    return CCSChapterName[code]?.shortName;\n  }\n\n  get ccsChapterCode(): string | undefined {\n    return findCoding(SYSTEM_CCS, this.resource.code)?.code?.slice(0, 3);\n  }\n\n  get ccsGrouping(): string | undefined {\n    return findCoding(SYSTEM_CCS, this.resource.code)?.display;\n  }\n\n  get clinicalStatus(): string {\n    return codeableConceptLabel(this.resource.clinicalStatus);\n  }\n\n  get clinicalStatusCode(): ClinicalStatus | undefined {\n    return find(this.resource.clinicalStatus?.coding, {\n      system: SYSTEM_CONDITION_CLINICAL,\n    })?.code as ClinicalStatus | undefined;\n  }\n\n  get codings(): fhir4.CodeableConcept | undefined {\n    return this.resource.code;\n  }\n\n  get display(): string | undefined {\n    return (\n      findCodingByOrderOfPreference(\n        CONDITION_CODE_PREFERENCE_ORDER,\n        this.resource.code\n      )?.display ?? codeableConceptLabel(this.resource.code)\n    );\n  }\n\n  get encounter(): string | undefined {\n    return this.resource.encounter?.display;\n  }\n\n  get evidences(): string[] {\n    return (\n      this.resource.evidence?.map((evidence) =>\n        codeableConceptLabel(evidence.code?.[0])\n      ) || []\n    );\n  }\n\n  get icd10Code(): string | undefined {\n    return findCoding(SYSTEM_ICD10, this.resource.code)?.code;\n  }\n\n  get icd10System(): string | undefined {\n    return findCoding(SYSTEM_ICD10, this.resource.code)?.system;\n  }\n\n  get icd10Display(): string | undefined {\n    return findCoding(SYSTEM_ICD10, this.resource.code)?.display;\n  }\n\n  get isDeleted(): boolean {\n    return this.verificationStatusCode === \"entered-in-error\";\n  }\n\n  get knownCodings(): fhir4.Coding[] {\n    const codings = compact(\n      CONDITION_CODE_PREFERENCE_ORDER.map((code) => {\n        if (code.checkForEnrichment) {\n          return findCodingWithEnrichment(code.system, this.resource.code);\n        }\n        return findCoding(code.system, this.resource.code);\n      })\n    );\n\n    // The order of the array matters here because that is how it determines which record to keep when dupes are found.\n    const dedupedBySystemCoding = uniqWith(\n      codings,\n      (prev, next) => prev.system === next.system\n    );\n    return dedupedBySystemCoding;\n  }\n\n  // Returns true if any of the known codings match between\n  // this condition and the passed in condition.\n  knownCodingsMatch(condition: ConditionModel): boolean {\n    return (\n      intersectionWith(\n        this.knownCodings,\n        condition.knownCodings,\n        (a, b) => a.code === b.code && a.system === b.system\n      ).length > 0\n    );\n  }\n\n  get notes(): string[] {\n    return this.resource.note?.map((note) => note.text) || [];\n  }\n\n  get onset(): string | undefined {\n    if (this.resource.onsetAge) {\n      return this.resource.onsetAge.value?.toString();\n    }\n\n    if (this.resource.onsetDateTime) {\n      return formatDateISOToLocal(this.resource.onsetDateTime);\n    }\n\n    if (this.resource.onsetPeriod) {\n      return formatDateISOToLocal(this.resource.onsetPeriod.start);\n    }\n\n    if (this.resource.onsetRange) {\n      return formatDateISOToLocal(\n        this.resource.onsetRange.low?.value?.toString()\n      );\n    }\n\n    return formatStringToDate(this.resource.onsetString);\n  }\n\n  get patient(): PatientModel | undefined {\n    const reference = findReference(\n      \"Patient\",\n      this.resource.contained,\n      this.includedResources,\n      this.resource.subject.reference\n    );\n\n    if (reference) {\n      return new PatientModel(reference, this.includedResources);\n    }\n\n    return undefined;\n  }\n\n  get preferredCoding(): fhir4.Coding | undefined {\n    return findCodingByOrderOfPreference(\n      CONDITION_CODE_PREFERENCE_ORDER,\n      this.resource.code\n    );\n  }\n\n  get recordedDate(): string | undefined {\n    return formatDateISOToLocal(this.resource.recordedDate);\n  }\n\n  get recorded(): string | undefined {\n    return formatDateISOToLocal(this.resource.recordedDate);\n  }\n\n  get recorder(): string | undefined {\n    return this.resource.recorder?.display;\n  }\n\n  get severity(): string {\n    return codeableConceptLabel(this.resource.severity);\n  }\n\n  get snomedCoding(): fhir4.Coding | undefined {\n    return findCoding(SYSTEM_SNOMED, this.resource.code);\n  }\n\n  get snomedCode(): string | undefined {\n    return findCoding(SYSTEM_SNOMED, this.resource.code)?.code;\n  }\n\n  get snomedDisplay(): string | undefined {\n    return findCoding(SYSTEM_SNOMED, this.resource.code)?.display;\n  }\n\n  get snomedSystem(): string | undefined {\n    return findCoding(SYSTEM_SNOMED, this.resource.code)?.system;\n  }\n\n  get stages(): string[] {\n    return (\n      this.resource.stage?.map((stage) => {\n        const summary = codeableConceptLabel(stage.summary);\n        const type = codeableConceptLabel(stage.type);\n        return `Summary: ${summary}, Type: ${type}`;\n      }) || []\n    );\n  }\n\n  get displayStatus(): string {\n    function clinicalStatusMap(code: ClinicalStatus | undefined) {\n      switch (code) {\n        case \"active\":\n        case \"recurrence\":\n        case \"relapse\":\n          return \"Active\";\n        case \"inactive\":\n        case \"remission\":\n        case \"resolved\":\n          return \"Inactive\";\n        default:\n          return \"\";\n      }\n    }\n\n    function verificationStatusMap(code: VerificationStatus | undefined) {\n      switch (code) {\n        case \"confirmed\":\n          return \"confirmed\";\n        case \"unconfirmed\":\n        case \"provisional\":\n        case \"differential\":\n          return \"unconfirmed\";\n        case \"refuted\":\n          return \"refuted\";\n        case \"entered-in-error\":\n          return \"entered-in-error\";\n        default:\n          return \"\";\n      }\n    }\n\n    const concatenation =\n      verificationStatusMap(this.verificationStatusCode) +\n      clinicalStatusMap(this.clinicalStatusCode).toLowerCase();\n\n    // What to show if lens or summary resource.\n    if (this.isSummaryResource) {\n      if (this.isArchived) {\n        return \"Dismissed\";\n      }\n\n      return clinicalStatusMap(this.clinicalStatusCode) || \"Unknown\";\n    }\n\n    // What to show if patient record resource.\n    switch (concatenation) {\n      case \"unconfirmedactive\":\n        return \"Pending\";\n      case \"unconfirmedinactive\":\n      case \"refutedactive\":\n        return \"Unknown\";\n      case \"confirmedinactive\":\n        return \"Inactive\";\n      case \"confirmedactive\":\n        return \"Active\";\n      case \"refutedinactive\":\n        return \"Refuted\";\n      case \"entered-in-error\":\n        return \"Entered in Error\";\n      default:\n        return \"Unknown\";\n    }\n  }\n\n  get subjectID(): string {\n    const [, subjectID] = this.resource.subject.reference?.split(\"/\") || [];\n    return subjectID || \"\";\n  }\n\n  get verificationStatus(): string {\n    return codeableConceptLabel(this.resource.verificationStatus);\n  }\n\n  get verificationStatusCode(): VerificationStatus | undefined {\n    return find(this.resource.verificationStatus?.coding, {\n      system: SYSTEM_CONDITION_VERIFICATION_STATUS,\n    })?.code as VerificationStatus | undefined;\n  }\n}\n","import { SearchParams } from \"fhir-kit-client\";\nimport { useEffect, useState } from \"react\";\nimport { getIncludedBasics } from \"./bundle\";\nimport { CodePreference } from \"./codeable-concept\";\nimport {\n  searchBuilderRecords,\n  searchCommonRecords,\n  searchSummaryRecords,\n} from \"./search-helpers\";\nimport {\n  SYSTEM_ICD10,\n  SYSTEM_ICD10_CM,\n  SYSTEM_ICD9,\n  SYSTEM_ICD9_CM,\n  SYSTEM_SNOMED,\n} from \"./system-urls\";\nimport { filterOtherConditions } from \"@/components/content/conditions/helpers\";\nimport {\n  getAddConditionWithDefaults,\n  getClincalAndVerificationStatus,\n} from \"@/components/content/forms/actions/conditions\";\nimport { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { useQueryWithPatient } from \"@/components/core/providers/patient-provider\";\nimport { ConditionModel } from \"@/fhir/models/condition\";\nimport { compact, orderBy } from \"@/utils/nodash\";\nimport {\n  QUERY_KEY_CONDITION_HISTORY,\n  QUERY_KEY_OTHER_PROVIDER_CONDITIONS,\n  QUERY_KEY_PATIENT_CONDITIONS,\n} from \"@/utils/query-keys\";\nimport { Telemetry } from \"@/utils/telemetry\";\n\nexport type VerificationStatus =\n  | \"unconfirmed\"\n  | \"provisional\"\n  | \"differential\"\n  | \"confirmed\"\n  | \"refuted\"\n  | \"entered-in-error\";\n\nexport type ClinicalStatus =\n  | \"active\"\n  | \"recurrence\"\n  | \"relapse\"\n  | \"inactive\"\n  | \"remission\"\n  | \"resolved\";\n\nexport const CONDITION_CODE_PREFERENCE_ORDER: CodePreference[] = [\n  { system: SYSTEM_SNOMED, checkForEnrichment: true },\n  { system: SYSTEM_ICD10, checkForEnrichment: true },\n  { system: SYSTEM_SNOMED },\n  { system: SYSTEM_ICD10 },\n  { system: SYSTEM_ICD10_CM },\n  { system: SYSTEM_ICD9 },\n  { system: SYSTEM_ICD9_CM },\n];\n\nexport function getNewCondition(patientId: string) {\n  const newCondition: fhir4.Condition = {\n    resourceType: \"Condition\",\n    subject: {\n      type: \"Patient\",\n      reference: `Patient/${patientId}`,\n    },\n    ...getClincalAndVerificationStatus(\"Active\"),\n  };\n  return getAddConditionWithDefaults(newCondition);\n}\n\nexport function usePatientConditions() {\n  return useQueryWithPatient(\n    QUERY_KEY_PATIENT_CONDITIONS,\n    [],\n    async (requestContext, patient) => {\n      try {\n        const { bundle, resources: conditions } = await searchBuilderRecords(\n          \"Condition\",\n          requestContext,\n          {\n            patientUPID: patient.UPID,\n          }\n        );\n        return filterAndSort(setupConditionModels(conditions, bundle));\n      } catch (e) {\n        Telemetry.logError(e as Error, \"Failed fetching condition information\");\n        throw new Error(\n          `Failed fetching condition information for patient: ${e}`\n        );\n      }\n    }\n  );\n}\n\nexport function useOtherProviderConditions() {\n  return useQueryWithPatient(\n    QUERY_KEY_OTHER_PROVIDER_CONDITIONS,\n    [],\n    async (requestContext, patient) => {\n      try {\n        const { bundle, resources: conditions } = await searchSummaryRecords(\n          \"Condition\",\n          requestContext,\n          {\n            _revinclude: \"Basic:subject\",\n            patientUPID: patient.UPID,\n          }\n        );\n        return filterAndSort(setupConditionModels(conditions, bundle));\n      } catch (e) {\n        Telemetry.logError(\n          e as Error,\n          `Failed fetching condition information for patient: ${e}`\n        );\n        throw new Error(\n          `Failed fetching condition information for patient: ${e}`\n        );\n      }\n    }\n  );\n}\n\nexport function useOtherProviderConditionsDeduped() {\n  const [conditions, setConditions] = useState<ConditionModel[]>([]);\n  const patientConditionsQuery = usePatientConditions();\n  const otherConditionsQuery = useOtherProviderConditions();\n\n  useEffect(() => {\n    const patientConditions = patientConditionsQuery.data ?? [];\n    const otherConditions = filterOtherConditions(\n      otherConditionsQuery.data ?? [],\n      patientConditions,\n      true\n    );\n    setConditions(otherConditions);\n  }, [patientConditionsQuery.data, otherConditionsQuery.data]);\n\n  const isLoading =\n    patientConditionsQuery.isLoading || otherConditionsQuery.isLoading;\n  const isError =\n    patientConditionsQuery.isError || otherConditionsQuery.isError;\n  const isFetching =\n    patientConditionsQuery.isFetching || otherConditionsQuery.isFetching;\n\n  return {\n    isLoading,\n    isError,\n    isFetching,\n    data: conditions,\n  };\n}\n\nconst historyRequestTemplate = (id: string) => ({\n  request: {\n    method: \"GET\",\n    url: `/Condition/${id}/_history`,\n  },\n});\n\nexport const getConditionVersionHistory = async (\n  requestContext: CTWRequestContext,\n  searchParams: SearchParams\n) => {\n  const response = await searchBuilderRecords(\n    \"Condition\",\n    requestContext,\n    searchParams\n  );\n\n  const builderIds = response.resources.map(\n    // The only time that a resource does not have an id is when it is being submitted to the server using a create operation.\n    (resource) => resource.id\n  ) as string[];\n\n  if (!builderIds.length) {\n    return undefined;\n  }\n\n  const bundle: fhir4.Bundle = {\n    resourceType: \"Bundle\",\n    id: \"bundle-history-conditions\",\n    type: \"batch\",\n    entry: builderIds.map((id) =>\n      historyRequestTemplate(id)\n    ) as fhir4.BundleEntry<fhir4.FhirResource>[],\n  };\n\n  return requestContext.fhirClient.batch({\n    body: {\n      ...bundle,\n      type: \"batch\",\n    },\n  });\n};\n\nexport function useConditionHistory(condition?: ConditionModel) {\n  return useQueryWithPatient(\n    QUERY_KEY_CONDITION_HISTORY,\n    [condition],\n    async (requestContext, patient) => {\n      if (!condition) {\n        return undefined;\n      }\n      if (condition.verificationStatus === \"entered-in-error\") {\n        return {\n          conditions: [],\n          bundle: { resourceType: \"Bundle\", entry: [] },\n        };\n      }\n      try {\n        const tokens = condition.knownCodings.map(\n          (coding) => `${coding.system}|${coding.code}`\n        );\n\n        const searchParams: SearchParams = {\n          patientUPID: patient.UPID,\n          _include: [\"Condition:patient\", \"Condition:encounter\"],\n          \"_include:iterate\": \"Patient:organization\",\n        };\n\n        // If we have any known codings, then do an OR search.\n        // Otherwise fall back to searching for this single condition.\n        // That way, conditions that don't have any good codes to match on\n        // will only show themselves in the history.\n        if (tokens.length > 0) {\n          searchParams.code = tokens.join(\",\");\n        } else {\n          // eslint-disable-next-line no-underscore-dangle\n          searchParams._id = condition.id;\n        }\n\n        const { resources: conditions, bundle } = await searchCommonRecords(\n          \"Condition\",\n          requestContext,\n          searchParams\n        );\n\n        const versionHistoryBundle = await getConditionVersionHistory(\n          requestContext,\n          searchParams\n        );\n\n        const conditionVersions: fhir4.BundleEntry[] = [];\n        if (versionHistoryBundle && versionHistoryBundle.entry) {\n          versionHistoryBundle.entry.forEach(\n            (bundleEntry: fhir4.BundleEntry) => {\n              const { resource } = bundleEntry;\n              if (resource?.resourceType === \"Bundle\" && resource.entry) {\n                conditionVersions.push(...resource.entry);\n              }\n            }\n          );\n        }\n\n        const combinedConditions = conditions.concat(\n          ...(compact(\n            conditionVersions.map((r) => r.resource)\n          ) as fhir4.Condition[])\n        );\n\n        return {\n          conditions: combinedConditions,\n          bundle,\n        };\n      } catch (e) {\n        Telemetry.logError(\n          e as Error,\n          \"Failed fetching condition history information for patient\"\n        );\n        throw new Error(\n          `Failed fetching condition history information for patient: ${e}`\n        );\n      }\n    },\n    !!condition\n  );\n}\n\nfunction setupConditionModels(\n  conditionResources: fhir4.Condition[],\n  bundle: fhir4.Bundle\n): ConditionModel[] {\n  const basicsMap = getIncludedBasics(bundle);\n  return conditionResources.map(\n    (c) => new ConditionModel(c, undefined, basicsMap.get(c.id ?? \"\"))\n  );\n}\n\nfunction filterAndSort(conditions: ConditionModel[]): ConditionModel[] {\n  return orderBy(\n    conditions.filter(\n      (condition) => condition.resource.asserter?.type !== \"Patient\"\n    ),\n    [\n      (condition) => condition.resource.recordedDate ?? \"\",\n      (condition) => condition.display,\n    ],\n    [\"desc\"]\n  );\n}\n"],"names":["isUndefined","value","isUndefined_1","FUNC_ERROR_TEXT","negate","predicate","args","negate_1","baseIteratee","require$$0","require$$1","pickBy","require$$2","omitBy","object","omitBy_1","getAddConditionWithDefaults","condition","cloneDeep","getClincalAndVerificationStatus","status","verificationStatus","clinicalStatus","SYSTEM_CONDITION_VERIFICATION_STATUS","SYSTEM_CONDITION_CLINICAL","createOrEditCondition","patientID","data","getRequestContext","requestContext","fhirCondition","getUsersPractitionerReference","SYSTEM_CONDITION_CATEGORY","dateToISO","response","createOrEditFhirResource","queryClient","QUERY_KEY_PATIENT_CONDITIONS","QUERY_KEY_OTHER_PROVIDER_CONDITIONS","filterOtherConditions","otherConditions","patientConditions","includeArchived","otherCondition","patientCondition","otherRecordedDate","patientRecordedDate","isMatch","isEnteredInError","isOlder","hasSameStatus","CCSChapterName","ConditionModel","FHIRModel","_a","formatDateISOToLocal","_c","_b","coding","find","bodySite","codeableConceptLabel","category","code","findCoding","SYSTEM_CCS","findCodingByOrderOfPreference","CONDITION_CODE_PREFERENCE_ORDER","evidence","SYSTEM_ICD10","codings","compact","findCodingWithEnrichment","uniqWith","prev","next","intersectionWith","a","b","note","formatStringToDate","reference","findReference","PatientModel","SYSTEM_SNOMED","stage","summary","type","clinicalStatusMap","verificationStatusMap","concatenation","subjectID","SYSTEM_ICD10_CM","SYSTEM_ICD9","SYSTEM_ICD9_CM","getNewCondition","patientId","newCondition","usePatientConditions","useQueryWithPatient","patient","bundle","conditions","searchBuilderRecords","filterAndSort","setupConditionModels","e","Telemetry","useOtherProviderConditions","searchSummaryRecords","useOtherProviderConditionsDeduped","setConditions","useState","patientConditionsQuery","otherConditionsQuery","useEffect","isLoading","isError","isFetching","historyRequestTemplate","id","getConditionVersionHistory","searchParams","builderIds","resource","useConditionHistory","QUERY_KEY_CONDITION_HISTORY","tokens","searchCommonRecords","versionHistoryBundle","conditionVersions","bundleEntry","r","conditionResources","basicsMap","getIncludedBasics","c","orderBy"],"mappings":"+wBAiBA,SAASA,GAAYC,EAAO,CAC1B,OAAOA,IAAU,MACnB,CAEA,IAAAC,GAAiBF,GCpBbG,GAAkB,sBAsBtB,SAASC,GAAOC,EAAW,CACzB,GAAI,OAAOA,GAAa,WACtB,MAAM,IAAI,UAAUF,EAAe,EAErC,OAAO,UAAW,CAChB,IAAIG,EAAO,UACX,OAAQA,EAAK,OAAM,CACjB,IAAK,GAAG,MAAO,CAACD,EAAU,KAAK,IAAI,EACnC,IAAK,GAAG,MAAO,CAACA,EAAU,KAAK,KAAMC,EAAK,CAAC,CAAC,EAC5C,IAAK,GAAG,MAAO,CAACD,EAAU,KAAK,KAAMC,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EACrD,IAAK,GAAG,MAAO,CAACD,EAAU,KAAK,KAAMC,EAAK,CAAC,EAAGA,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,CAC/D,CACD,MAAO,CAACD,EAAU,MAAM,KAAMC,CAAI,CACtC,CACA,CAEA,IAAAC,GAAiBH,GCvCbI,GAAeC,EACfL,GAASM,GACTC,GAASC,GAsBb,SAASC,GAAOC,EAAQT,EAAW,CACjC,OAAOM,GAAOG,EAAQV,GAAOI,GAAaH,CAAS,CAAC,CAAC,CACvD,CAEA,IAAAU,GAAiBF,GCRV,SAASG,GAA4BC,EAAiC,CAGpE,OAFcC,EAAUD,CAAS,CAG1C,CAEa,MAAAE,EAAmCC,GAA4B,CAC1E,IAAIC,EAAqB,GACrBC,EAAiB,GAErB,OAAQF,EAAQ,CACd,IAAK,SACkBC,EAAA,YACJC,EAAA,SACjB,MACF,IAAK,WACkBD,EAAA,YACJC,EAAA,WACjB,MACF,IAAK,UACkBD,EAAA,cACJC,EAAA,SACjB,MACF,IAAK,UACkBD,EAAA,UACJC,EAAA,WACjB,MACF,IAAK,mBACkBD,EAAA,mBACrB,MACF,QACE,MAAM,MAAM,6CAA6C,CAC7D,CAEO,OAAAR,GACL,CACE,mBAAoB,CAClB,OAAQ,CACN,CACE,OAAQU,EACR,KAAMF,CACR,CACF,CACF,EACA,GAAIC,GAAkB,CACpB,eAAgB,CACd,OAAQ,CAAC,CAAE,OAAQE,EAA2B,KAAMF,EAAgB,CACtE,CACF,CACF,EACAtB,EAAA,CAEJ,EAEayB,GAAwB,MACnCR,EACAS,EACAC,EACAC,IACqB,CACf,MAAAC,EAAiB,MAAMD,IAIvBE,EAAiC,CACrC,aAAc,YACd,GAAIH,EAAK,GACT,SAAU,MAAMI,EAA8BF,CAAc,EAC5D,GAAGV,EAAgCQ,EAAK,MAAM,EAE9C,SACEA,EAAK,IAAMV,EACPA,EAAU,SAAS,SACnB,CACE,CACE,OAAQ,CACN,CACE,OAAQe,EACR,KAAM,oBACN,QAAS,mBACX,CACF,CACF,CACF,EAEN,KACEL,EAAK,IAAMV,EACPA,EAAU,QACV,CACE,OAAQ,CACN,CACE,OAAQU,EAAK,UAAU,OACvB,KAAMA,EAAK,UAAU,KACrB,QAASA,EAAK,UAAU,OAC1B,CACF,EACA,KAAMA,EAAK,UAAU,OACvB,EACN,GAAIA,EAAK,WAAa,CACpB,kBAAmBM,EAAUN,EAAK,SAAS,CAC7C,EACA,cAAeM,EAAUN,EAAK,KAAK,EACnC,aAAcM,EAAU,IAAI,IAAM,EAClC,QAAS,CAAE,KAAM,UAAW,UAAW,WAAWP,GAAY,EAC9D,KAAMC,EAAK,KAAO,CAAC,CAAE,KAAMA,EAAK,KAAM,EAAI,MAAA,EAGtCO,EAAW,MAAMC,EACrBL,EACAD,CAAA,EAGF,aAAM,QAAQ,IAAI,CAChBO,EAAY,kBAAkB,CAACC,CAA4B,CAAC,EAC5DD,EAAY,kBAAkB,CAACE,CAAmC,CAAC,CAAA,CACpE,EAEMJ,CACT,EClIaK,GAAwB,CACnCC,EACAC,EACAC,IAEAF,EAAgB,OAAQG,GAClBA,EAAe,YAAc,CAACD,GAE9B,CAAC,MAAO,KAAK,EAAE,SAASC,EAAe,gBAAkB,EAAE,EACtD,GAGF,CAACF,EAAkB,KAAMG,GAAqB,CAC7C,MAAAC,EAAoBF,EAAe,SAAS,aAC5CG,EAAsBF,EAAiB,SAAS,aAChDG,EAAUJ,EAAe,kBAAkBC,CAAgB,EAC3DI,EACJJ,EAAiB,qBAAuB,mBAEpCK,EACJ,CAACJ,GACAC,GAAuBD,GAAqBC,EACzCI,EACJP,EAAe,iBAAmBC,EAAiB,eAE9C,OAAAG,GAAW,CAACC,IAAqBC,GAAWC,EAAA,CACpD,CACF,EC9BUC,GAAwC,CACnD,IAAK,CACH,SAAU,4CACV,UAAW,mCACb,EACA,IAAK,CAAE,SAAU,YAAa,UAAW,WAAY,EACrD,IAAK,CACH,SACE,sGACF,UAAW,gBACb,EACA,IAAK,CACH,SAAU,gDACV,UAAW,sCACb,EACA,IAAK,CACH,SAAU,sDACV,UAAW,uBACb,EACA,IAAK,CACH,SAAU,iCACV,UAAW,gBACb,EACA,IAAK,CACH,SAAU,iCACV,UAAW,gBACb,EACA,IAAK,CACH,SAAU,0CACV,UAAW,yBACb,EACA,IAAK,CACH,SAAU,qCACV,UAAW,oBACb,EACA,IAAK,CACH,SAAU,qCACV,UAAW,oBACb,EACA,IAAK,CACH,SAAU,mCACV,UAAW,kBACb,EACA,IAAK,CACH,SAAU,+CACV,UAAW,8BACb,EACA,IAAK,CACH,SAAU,+DACV,UAAW,wBACb,EACA,IAAK,CACH,SAAU,uCACV,UAAW,sBACb,EACA,IAAK,CACH,SAAU,2CACV,UAAW,wBACb,EACA,IAAK,CACH,SAAU,yDACV,UAAW,sBACb,EACA,IAAK,CACH,SACE,uEACF,UAAW,6CACb,EACA,IAAK,CACH,SAAU,gEACV,UAAW,mBACb,EACA,IAAK,CACH,SACE,sEACF,UAAW,wBACb,EACA,IAAK,CACH,SAAU,+BACV,UAAW,oBACb,EACA,IAAK,CACH,SACE,qEACF,UAAW,0BACb,EACA,IAAK,CACH,SACE,gGACF,UAAW,kCACb,CACF,ECvEO,MAAMC,WAAuBC,CAA2B,CAC7D,IAAI,WAAgC,WAC9B,OAAA,KAAK,SAAS,cACTC,EAAA,KAAK,SAAS,aAAa,QAA3B,YAAAA,EAAkC,WAGvC,KAAK,SAAS,kBACTC,EAAqB,KAAK,SAAS,iBAAiB,EAGzD,KAAK,SAAS,gBACTA,EAAqB,KAAK,SAAS,gBAAgB,KAAK,EAG7D,KAAK,SAAS,eACTA,GACLC,GAAAC,EAAA,KAAK,SAAS,eAAe,MAA7B,YAAAA,EAAkC,QAAlC,YAAAD,EAAyC,UAAS,EAI/C,KAAK,SAAS,eACvB,CAEA,IAAI,QAAkB,OACpB,MAAME,EAASC,GAAKL,EAAA,KAAK,SAAS,iBAAd,YAAAA,EAA8B,OAAQ,CACxD,OAAQ9B,CAAA,CACT,EAEM,OAAAkC,GAAA,MAAAA,EAAQ,KACX,CAAC,SAAU,aAAc,SAAS,EAAE,SAASA,EAAO,IAAI,EACxD,EACN,CAEA,IAAI,YAAsB,CACjB,OAAA,KAAK,yBAAyB,SAAS,IAAM,MACtD,CAEA,IAAI,UAA+B,OAC1B,OAAAJ,EAAA,KAAK,SAAS,WAAd,YAAAA,EAAwB,OACjC,CAEA,IAAI,WAAsB,OAEtB,QAAAA,EAAA,KAAK,SAAS,WAAd,YAAAA,EAAwB,IAAKM,GAC3BC,EAAqBD,CAAQ,KAC1B,EAET,CAEA,IAAI,YAAuB,OAEvB,QAAAN,EAAA,KAAK,SAAS,WAAd,YAAAA,EAAwB,IAAKQ,GAC3BD,EAAqBC,CAAQ,KAC1B,EAET,CAEA,IAAI,YAAiC,OACnC,MAAMC,EAAO,KAAK,eAClB,GAAKA,EACE,OAAAT,EAAAH,GAAeY,CAAI,IAAnB,YAAAT,EAAsB,SAC/B,CAEA,IAAI,gBAAqC,SAChC,OAAAG,GAAAH,EAAAU,EAAWC,EAAY,KAAK,SAAS,IAAI,IAAzC,YAAAX,EAA4C,OAA5C,YAAAG,EAAkD,MAAM,EAAG,EACpE,CAEA,IAAI,aAAkC,OACpC,OAAOH,EAAAU,EAAWC,EAAY,KAAK,SAAS,IAAI,IAAzC,YAAAX,EAA4C,OACrD,CAEA,IAAI,gBAAyB,CACpB,OAAAO,EAAqB,KAAK,SAAS,cAAc,CAC1D,CAEA,IAAI,oBAAiD,SACnD,OAAOJ,EAAAE,GAAKL,EAAA,KAAK,SAAS,iBAAd,YAAAA,EAA8B,OAAQ,CAChD,OAAQ9B,CACT,CAAA,IAFM,YAAAiC,EAEH,IACN,CAEA,IAAI,SAA6C,CAC/C,OAAO,KAAK,SAAS,IACvB,CAEA,IAAI,SAA8B,OAE9B,QAAAH,EAAAY,EACEC,EACA,KAAK,SAAS,IACb,IAHH,YAAAb,EAGG,UAAWO,EAAqB,KAAK,SAAS,IAAI,CAEzD,CAEA,IAAI,WAAgC,OAC3B,OAAAP,EAAA,KAAK,SAAS,YAAd,YAAAA,EAAyB,OAClC,CAEA,IAAI,WAAsB,OAEtB,QAAAA,EAAA,KAAK,SAAS,WAAd,YAAAA,EAAwB,IAAKc,GAC3B,OAAA,OAAAP,GAAqBP,EAAAc,EAAS,OAAT,YAAAd,EAAgB,EAAE,MACpC,EAET,CAEA,IAAI,WAAgC,OAClC,OAAOA,EAAAU,EAAWK,EAAc,KAAK,SAAS,IAAI,IAA3C,YAAAf,EAA8C,IACvD,CAEA,IAAI,aAAkC,OACpC,OAAOA,EAAAU,EAAWK,EAAc,KAAK,SAAS,IAAI,IAA3C,YAAAf,EAA8C,MACvD,CAEA,IAAI,cAAmC,OACrC,OAAOA,EAAAU,EAAWK,EAAc,KAAK,SAAS,IAAI,IAA3C,YAAAf,EAA8C,OACvD,CAEA,IAAI,WAAqB,CACvB,OAAO,KAAK,yBAA2B,kBACzC,CAEA,IAAI,cAA+B,CACjC,MAAMgB,EAAUC,EACdJ,EAAgC,IAAKJ,GAC/BA,EAAK,mBACAS,EAAyBT,EAAK,OAAQ,KAAK,SAAS,IAAI,EAE1DC,EAAWD,EAAK,OAAQ,KAAK,SAAS,IAAI,CAClD,CAAA,EAQI,OAJuBU,GAC5BH,EACA,CAACI,EAAMC,IAASD,EAAK,SAAWC,EAAK,MAAA,CAGzC,CAIA,kBAAkB1D,EAAoC,CAElD,OAAA2D,EACE,KAAK,aACL3D,EAAU,aACV,CAAC4D,EAAGC,IAAMD,EAAE,OAASC,EAAE,MAAQD,EAAE,SAAWC,EAAE,MAAA,EAC9C,OAAS,CAEf,CAEA,IAAI,OAAkB,OACb,QAAAxB,EAAA,KAAK,SAAS,OAAd,YAAAA,EAAoB,IAAKyB,GAASA,EAAK,QAAS,EACzD,CAEA,IAAI,OAA4B,WAC1B,OAAA,KAAK,SAAS,UACTzB,EAAA,KAAK,SAAS,SAAS,QAAvB,YAAAA,EAA8B,WAGnC,KAAK,SAAS,cACTC,EAAqB,KAAK,SAAS,aAAa,EAGrD,KAAK,SAAS,YACTA,EAAqB,KAAK,SAAS,YAAY,KAAK,EAGzD,KAAK,SAAS,WACTA,GACLC,GAAAC,EAAA,KAAK,SAAS,WAAW,MAAzB,YAAAA,EAA8B,QAA9B,YAAAD,EAAqC,UAAS,EAI3CwB,EAAmB,KAAK,SAAS,WAAW,CACrD,CAEA,IAAI,SAAoC,CACtC,MAAMC,EAAYC,EAChB,UACA,KAAK,SAAS,UACd,KAAK,kBACL,KAAK,SAAS,QAAQ,SAAA,EAGxB,GAAID,EACF,OAAO,IAAIE,EAAaF,EAAW,KAAK,iBAAiB,CAI7D,CAEA,IAAI,iBAA4C,CACvC,OAAAf,EACLC,EACA,KAAK,SAAS,IAAA,CAElB,CAEA,IAAI,cAAmC,CAC9B,OAAAZ,EAAqB,KAAK,SAAS,YAAY,CACxD,CAEA,IAAI,UAA+B,CAC1B,OAAAA,EAAqB,KAAK,SAAS,YAAY,CACxD,CAEA,IAAI,UAA+B,OAC1B,OAAAD,EAAA,KAAK,SAAS,WAAd,YAAAA,EAAwB,OACjC,CAEA,IAAI,UAAmB,CACd,OAAAO,EAAqB,KAAK,SAAS,QAAQ,CACpD,CAEA,IAAI,cAAyC,CAC3C,OAAOG,EAAWoB,EAAe,KAAK,SAAS,IAAI,CACrD,CAEA,IAAI,YAAiC,OACnC,OAAO9B,EAAAU,EAAWoB,EAAe,KAAK,SAAS,IAAI,IAA5C,YAAA9B,EAA+C,IACxD,CAEA,IAAI,eAAoC,OACtC,OAAOA,EAAAU,EAAWoB,EAAe,KAAK,SAAS,IAAI,IAA5C,YAAA9B,EAA+C,OACxD,CAEA,IAAI,cAAmC,OACrC,OAAOA,EAAAU,EAAWoB,EAAe,KAAK,SAAS,IAAI,IAA5C,YAAA9B,EAA+C,MACxD,CAEA,IAAI,QAAmB,OACrB,QACEA,EAAA,KAAK,SAAS,QAAd,YAAAA,EAAqB,IAAK+B,GAAU,CAC5B,MAAAC,EAAUzB,EAAqBwB,EAAM,OAAO,EAC5CE,EAAO1B,EAAqBwB,EAAM,IAAI,EAC5C,MAAO,YAAYC,YAAkBC,GACtC,KAAK,CAAA,CAEV,CAEA,IAAI,eAAwB,CAC1B,SAASC,EAAkBzB,EAAkC,CAC3D,OAAQA,EAAM,CACZ,IAAK,SACL,IAAK,aACL,IAAK,UACI,MAAA,SACT,IAAK,WACL,IAAK,YACL,IAAK,WACI,MAAA,WACT,QACS,MAAA,EACX,CACF,CAEA,SAAS0B,EAAsB1B,EAAsC,CACnE,OAAQA,EAAM,CACZ,IAAK,YACI,MAAA,YACT,IAAK,cACL,IAAK,cACL,IAAK,eACI,MAAA,cACT,IAAK,UACI,MAAA,UACT,IAAK,mBACI,MAAA,mBACT,QACS,MAAA,EACX,CACF,CAEM,MAAA2B,EACJD,EAAsB,KAAK,sBAAsB,EACjDD,EAAkB,KAAK,kBAAkB,EAAE,cAG7C,GAAI,KAAK,kBACP,OAAI,KAAK,WACA,YAGFA,EAAkB,KAAK,kBAAkB,GAAK,UAIvD,OAAQE,EAAe,CACrB,IAAK,oBACI,MAAA,UACT,IAAK,sBACL,IAAK,gBACI,MAAA,UACT,IAAK,oBACI,MAAA,WACT,IAAK,kBACI,MAAA,SACT,IAAK,kBACI,MAAA,UACT,IAAK,mBACI,MAAA,mBACT,QACS,MAAA,SACX,CACF,CAEA,IAAI,WAAoB,OAChB,KAAA,CAAG,CAAAC,CAAS,IAAIrC,EAAA,KAAK,SAAS,QAAQ,YAAtB,YAAAA,EAAiC,MAAM,OAAQ,GACrE,OAAOqC,GAAa,EACtB,CAEA,IAAI,oBAA6B,CACxB,OAAA9B,EAAqB,KAAK,SAAS,kBAAkB,CAC9D,CAEA,IAAI,wBAAyD,SAC3D,OAAOJ,EAAAE,GAAKL,EAAA,KAAK,SAAS,qBAAd,YAAAA,EAAkC,OAAQ,CACpD,OAAQ/B,CACT,CAAA,IAFM,YAAAkC,EAEH,IACN,CACF,CC3SO,MAAMU,EAAoD,CAC/D,CAAE,OAAQiB,EAAe,mBAAoB,EAAK,EAClD,CAAE,OAAQf,EAAc,mBAAoB,EAAK,EACjD,CAAE,OAAQe,CAAc,EACxB,CAAE,OAAQf,CAAa,EACvB,CAAE,OAAQuB,CAAgB,EAC1B,CAAE,OAAQC,CAAY,EACtB,CAAE,OAAQC,CAAe,CAC3B,EAEO,SAASC,GAAgBC,EAAmB,CACjD,MAAMC,EAAgC,CACpC,aAAc,YACd,QAAS,CACP,KAAM,UACN,UAAW,WAAWD,GACxB,EACA,GAAG7E,EAAgC,QAAQ,CAAA,EAE7C,OAAOH,GAA4BiF,CAAY,CACjD,CAEO,SAASC,IAAuB,CAC9B,OAAAC,EACL9D,EACA,CAAC,EACD,MAAOR,EAAgBuE,IAAY,CAC7B,GAAA,CACF,KAAM,CAAE,OAAAC,EAAQ,UAAWC,CAAA,EAAe,MAAMC,EAC9C,YACA1E,EACA,CACE,YAAauE,EAAQ,IACvB,CAAA,EAEF,OAAOI,EAAcC,EAAqBH,EAAYD,CAAM,CAAC,QACtDK,GACG,MAAAC,EAAA,SAASD,EAAY,uCAAuC,EAChE,IAAI,MACR,sDAAsDA,GAAA,CAE1D,CACF,CAAA,CAEJ,CAEO,SAASE,IAA6B,CACpC,OAAAT,EACL7D,EACA,CAAC,EACD,MAAOT,EAAgBuE,IAAY,CAC7B,GAAA,CACF,KAAM,CAAE,OAAAC,EAAQ,UAAWC,CAAA,EAAe,MAAMO,EAC9C,YACAhF,EACA,CACE,YAAa,gBACb,YAAauE,EAAQ,IACvB,CAAA,EAEF,OAAOI,EAAcC,EAAqBH,EAAYD,CAAM,CAAC,QACtDK,GACG,MAAAC,EAAA,SACRD,EACA,sDAAsDA,GAAA,EAElD,IAAI,MACR,sDAAsDA,GAAA,CAE1D,CACF,CAAA,CAEJ,CAEO,SAASI,IAAoC,CAClD,KAAM,CAACR,EAAYS,CAAa,EAAIC,EAAA,SAA2B,CAAE,CAAA,EAC3DC,EAAyBf,KACzBgB,EAAuBN,KAE7BO,EAAAA,UAAU,IAAM,CACR,MAAA1E,EAAoBwE,EAAuB,MAAQ,GACnDzE,EAAkBD,GACtB2E,EAAqB,MAAQ,CAAC,EAC9BzE,EACA,EAAA,EAEFsE,EAAcvE,CAAe,GAC5B,CAACyE,EAAuB,KAAMC,EAAqB,IAAI,CAAC,EAErD,MAAAE,EACJH,EAAuB,WAAaC,EAAqB,UACrDG,EACJJ,EAAuB,SAAWC,EAAqB,QACnDI,EACJL,EAAuB,YAAcC,EAAqB,WAErD,MAAA,CACL,UAAAE,EACA,QAAAC,EACA,WAAAC,EACA,KAAMhB,CAAA,CAEV,CAEA,MAAMiB,GAA0BC,IAAgB,CAC9C,QAAS,CACP,OAAQ,MACR,IAAK,cAAcA,YACrB,CACF,GAEaC,GAA6B,MACxC5F,EACA6F,IACG,CAOG,MAAAC,GANW,MAAMpB,EACrB,YACA1E,EACA6F,CAAA,GAG0B,UAAU,IAEnCE,GAAaA,EAAS,EAAA,EAGrB,GAAA,CAACD,EAAW,OACP,OAGT,MAAMtB,EAAuB,CAC3B,aAAc,SACd,GAAI,4BACJ,KAAM,QACN,MAAOsB,EAAW,IAAKH,GACrBD,GAAuBC,CAAE,CAC3B,CAAA,EAGK,OAAA3F,EAAe,WAAW,MAAM,CACrC,KAAM,CACJ,GAAGwE,EACH,KAAM,OACR,CAAA,CACD,CACH,EAEO,SAASwB,GAAoB5G,EAA4B,CACvD,OAAAkF,EACL2B,EACA,CAAC7G,CAAS,EACV,MAAOY,EAAgBuE,IAAY,CACjC,GAAKnF,EAGD,IAAAA,EAAU,qBAAuB,mBAC5B,MAAA,CACL,WAAY,CAAC,EACb,OAAQ,CAAE,aAAc,SAAU,MAAO,CAAA,CAAG,CAAA,EAG5C,GAAA,CACI,MAAA8G,EAAS9G,EAAU,aAAa,IACnCyC,GAAW,GAAGA,EAAO,UAAUA,EAAO,MAAA,EAGnCgE,EAA6B,CACjC,YAAatB,EAAQ,KACrB,SAAU,CAAC,oBAAqB,qBAAqB,EACrD,mBAAoB,sBAAA,EAOlB2B,EAAO,OAAS,EACLL,EAAA,KAAOK,EAAO,KAAK,GAAG,EAGnCL,EAAa,IAAMzG,EAAU,GAG/B,KAAM,CAAE,UAAWqF,EAAY,OAAAD,CAAA,EAAW,MAAM2B,EAC9C,YACAnG,EACA6F,CAAA,EAGIO,EAAuB,MAAMR,GACjC5F,EACA6F,CAAA,EAGIQ,EAAyC,CAAA,EAC3C,OAAAD,GAAwBA,EAAqB,OAC/CA,EAAqB,MAAM,QACxBE,GAAmC,CAC5B,KAAA,CAAE,SAAAP,CAAa,EAAAO,GACjBP,GAAA,YAAAA,EAAU,gBAAiB,UAAYA,EAAS,OAChCM,EAAA,KAAK,GAAGN,EAAS,KAAK,CAE5C,CAAA,EAUG,CACL,WAPyBtB,EAAW,OACpC,GAAI/B,EACF2D,EAAkB,IAAKE,GAAMA,EAAE,QAAQ,CACzC,CAAA,EAKA,OAAA/B,CAAA,QAEKK,GACG,MAAAC,EAAA,SACRD,EACA,2DAAA,EAEI,IAAI,MACR,8DAA8DA,GAAA,CAElE,EACF,EACA,CAAC,CAACzF,CAAA,CAEN,CAEA,SAASwF,EACP4B,EACAhC,EACkB,CACZ,MAAAiC,EAAYC,EAAkBlC,CAAM,EAC1C,OAAOgC,EAAmB,IACvBG,GAAM,IAAIpF,GAAeoF,EAAG,OAAWF,EAAU,IAAIE,EAAE,IAAM,EAAE,CAAC,CAAA,CAErE,CAEA,SAAShC,EAAcF,EAAgD,CAC9D,OAAAmC,EACLnC,EAAW,OACRrF,GAAA,OAAc,QAAAqC,EAAArC,EAAU,SAAS,WAAnB,YAAAqC,EAA6B,QAAS,UACvD,EACA,CACGrC,GAAcA,EAAU,SAAS,cAAgB,GACjDA,GAAcA,EAAU,OAC3B,EACA,CAAC,MAAM,CAAA,CAEX"}