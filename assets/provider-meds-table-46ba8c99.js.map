{"version":3,"file":"provider-meds-table-46ba8c99.js","sources":["../../src/components/content/medications/provider-meds-table.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useMedicationHistory } from \"./medication-history-drawer\";\nimport {\n  MedicationsTableBase,\n  MedsHistoryTempProps,\n} from \"@/components/content/medications-table-base\";\nimport { withErrorBoundary } from \"@/components/core/error-boundary\";\nimport { MedicationStatementModel } from \"@/fhir/models/medication-statement\";\nimport { useQueryAllPatientMedications } from \"@/hooks/use-medications\";\nimport { get, isFunction, pipe, toLower } from \"@/utils/nodash/fp\";\nimport { sort, SortDir } from \"@/utils/sort\";\n\nexport type ProviderMedsTableProps = {\n  className?: string;\n  showInactive?: boolean;\n  sortColumn?: keyof MedicationStatementModel;\n  sortOrder?: SortDir;\n} & MedsHistoryTempProps;\n\n/**\n * Displays a table of medications that are scoped to the CTWContext builder\n * and patient. To show medications that aren't scoped to the builder, use the\n * `OtherProviderMedsTable` instead.\n *\n * The table has a menu to the right side which will pull out the\n * history for the medication listed in that row.\n */\nexport const ProviderMedsTable = withErrorBoundary(\n  ({\n    showInactive = false,\n    sortColumn = \"display\",\n    sortOrder = \"asc\",\n    onAfterOpenHistoryDrawer,\n    onOpenHistoryDrawer,\n  }: ProviderMedsTableProps) => {\n    const [medicationModels, setMedicationModels] = useState<\n      MedicationStatementModel[]\n    >([]);\n    const { builderMedications, isLoading } = useQueryAllPatientMedications();\n    const openMedHistoryDrawer = useMedicationHistory();\n\n    function openHistoryDrawer(row: MedicationStatementModel) {\n      // Temp - onOpen and onAfterOpen should be side-effect free as\n      // they may be called after component unmounts. We added\n      // this to support a bug-fix workaround in canvas.\n      if (isFunction(onOpenHistoryDrawer)) {\n        onOpenHistoryDrawer();\n      }\n      openMedHistoryDrawer({ medication: row });\n      setTimeout(() => {\n        if (isFunction(onAfterOpenHistoryDrawer)) {\n          onAfterOpenHistoryDrawer();\n        }\n      }, 0);\n    }\n\n    useEffect(() => {\n      if (!builderMedications) return;\n      setMedicationModels(\n        sort(\n          showInactive\n            ? builderMedications\n            : builderMedications.filter((bm) => bm.displayStatus === \"Active\"),\n          pipe(get(sortColumn), toLower),\n          sortOrder\n        )\n      );\n    }, [builderMedications, sortColumn, sortOrder, showInactive]);\n\n    return (\n      <>\n        <MedicationsTableBase\n          medicationStatements={medicationModels}\n          telemetryNamespace=\"ProviderMedsTable\"\n          isLoading={isLoading}\n          handleRowClick={openHistoryDrawer}\n        />\n      </>\n    );\n  },\n  \"ProviderMedsTable\"\n);\n"],"names":["ProviderMedsTable","withErrorBoundary","showInactive","sortColumn","sortOrder","onAfterOpenHistoryDrawer","onOpenHistoryDrawer","medicationModels","setMedicationModels","useState","builderMedications","isLoading","useQueryAllPatientMedications","openMedHistoryDrawer","useMedicationHistory","openHistoryDrawer","row","isFunction","useEffect","sort","bm","pipe","get","toLower","React","MedicationsTableBase"],"mappings":"qQA2BO,MAAAA,EAAAC,EAA0B,CAAA,CAC9B,aAAAC,EAAA,GACgB,WAAAC,EAAA,UACF,UAAAC,EAAA,MACD,yBAAAC,EACZ,oBAAAC,CACA,IAAA,CAEA,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EAGA,CAAA,mBAAAC,EAAA,UAAAC,CAAA,EAAAC,EAAA,EACAC,EAAAC,IAEA,SAAAC,EAAAC,EAAA,CAIEC,EAAAX,CAAA,GACEA,IAEFO,EAAA,CAAA,WAAAG,CAAA,CAAA,EACA,WAAA,IAAA,CACEC,EAAAZ,CAAA,GACEA,GACF,EAAA,CAAA,CACE,CAGNa,OAAAA,EAAAA,UAAA,IAAA,CACER,GACAF,EAAAW,EACEjB,EAAAQ,EAAAA,EAAA,OAAAU,GAAAA,EAAA,gBAAA,QAAA,EAGqEC,EAAAC,EAAAnB,CAAA,EAAAoB,CAAA,EACtCnB,CAC7B,CACF,CACF,EAAA,CAAAM,EAAAP,EAAAC,EAAAF,CAAA,CAAA,EAGFsB,EAAA,cAAAA,EAAA,SAAA,KAAAA,EAAA,cAEIC,EAAC,CAAA,qBAAAlB,EACuB,mBAAA,oBACH,UAAAI,EACnB,eAAAI,CACgB,CAAA,CAAA,CAEpB,EAEJ,mBAEF;;;;;"}