{"version":3,"file":"patient-provider-2630b162.js","sources":["../../src/components/core/providers/modal-context.ts","../../src/components/core/providers/modal-provider.tsx","../../src/components/core/providers/drawer-context.ts","../../src/components/core/providers/drawer-provider.tsx","../../src/fhir/models/practitioner.ts","../../src/fhir/practitioner.ts","../../src/fhir/provenance.ts","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/fhir/action-helper.ts","../../src/components/content/forms/actions/patients.ts","../../src/components/core/providers/patient-context.tsx","../../src/components/core/providers/patient-provider.tsx"],"sourcesContent":["import { createContext } from \"react\";\n\nexport type OpenModalProps = {\n  component: ({\n    isOpen,\n    onClose,\n  }: {\n    isOpen: boolean;\n    onClose: () => void;\n  }) => JSX.Element;\n};\n\nexport type ModalState = {\n  openModal: (props: OpenModalProps) => void;\n};\n\nexport const ModalContext = createContext<ModalState | undefined>(undefined);\n","import { ReactNode, useContext, useMemo, useState } from \"react\";\nimport { ModalContext, ModalState, OpenModalProps } from \"./modal-context\";\n\n// NOTE: This is basically identical to DrawerProvider.\n// We use a seperate provider for modals for two reasons:\n//  1. Allows us to have both a drawer and a modal open at\n//     the same time via the providers.\n//  2. Allows modals and drawer interfaces to diverge a bit if needed.\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\n// Define this outside of the rendered component to avoid eslint error.\nconst dummyChild = (_props: unknown) => <div />;\n\nexport function ModalProvider({ children }: ProviderProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [modalProps, setProps] = useState<OpenModalProps>({\n    // Create some dummy initial props for the modal. These will get\n    // overwritten when openModal() is used.\n    component: dummyChild,\n  });\n\n  const state = useMemo(\n    () => ({\n      openModal: (props: OpenModalProps) => {\n        setProps(props);\n\n        // Ensure isOpen starts as false and then async set it to true.\n        // This ensures the modal is added first before isOpen is set to\n        // true which fixes an issue around initial opening animation/transition.\n        setIsOpen(false);\n        setTimeout(() => {\n          setIsOpen(true);\n        });\n      },\n    }),\n    []\n  );\n\n  return (\n    <ModalContext.Provider value={state}>\n      {modalProps.component({\n        isOpen,\n        onClose: () => setIsOpen(false),\n      })}\n      {children}\n    </ModalContext.Provider>\n  );\n}\n\nexport const useModal = (): ModalState => {\n  const context = useContext(ModalContext);\n\n  if (!context) {\n    throw new Error(\"useModal must be used within a ModalProvider\");\n  }\n\n  return context;\n};\n","import { createContext } from \"react\";\nimport { DrawerProps } from \"../drawer\";\n\nexport type OpenDrawerProps = {\n  component: ({\n    isOpen,\n    onClose,\n    onOpen,\n    onAfterOpen,\n  }: Pick<DrawerProps, \"isOpen\" | \"onClose\" | \"onOpen\" | \"onAfterOpen\">) =>\n    | JSX.Element\n    | undefined;\n};\n\nexport type DrawerState = {\n  openDrawer: (props: OpenDrawerProps) => void;\n};\n\nexport const DrawerContext = createContext<DrawerState | undefined>(undefined);\n","import { ReactNode, useContext, useMemo, useState } from \"react\";\nimport { DrawerContext, DrawerState, OpenDrawerProps } from \"./drawer-context\";\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\n// Define this outside of the rendered component to avoid eslint error.\nconst dummyChild = (_props: unknown) => <div />;\n\nexport function DrawerProvider({ children }: ProviderProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [drawerProps, setProps] = useState<OpenDrawerProps>({\n    // Create some dummy initial props for the drawer. These will get\n    // overwritten when openDrawer() is used.\n    component: dummyChild,\n  });\n\n  const state = useMemo(\n    () => ({\n      openDrawer: (props: OpenDrawerProps) => {\n        setProps(props);\n\n        // Ensure isOpen starts as false and then async set it to true.\n        // This ensures the drawer is added first before isOpen is set to\n        // true which fixes an issue around initial opening animation/transition.\n        setIsOpen(false);\n        setTimeout(() => {\n          setIsOpen(true);\n        });\n      },\n    }),\n    []\n  );\n\n  return (\n    <DrawerContext.Provider value={state}>\n      {drawerProps.component({\n        isOpen,\n        onClose: () => setIsOpen(false),\n      })}\n      {children}\n    </DrawerContext.Provider>\n  );\n}\n\nexport const useDrawer = (): DrawerState => {\n  const context = useContext(DrawerContext);\n\n  if (!context) {\n    throw new Error(\"useDrawer must be used within a DrawerProvider\");\n  }\n\n  return context;\n};\n","import { FHIRModel } from \"./fhir-model\";\n\nexport class PractitionerModel extends FHIRModel<fhir4.Practitioner> {\n  get fullName(): string {\n    const firstEntryInName = this.resource.name?.[0];\n    const givenName = firstEntryInName?.given?.length\n      ? firstEntryInName.given[0]\n      : \"\";\n\n    return [givenName, firstEntryInName?.family].filter((n) => n).join(\" \");\n  }\n}\n","import { Reference } from \"fhir/r4\";\nimport { searchBuilderRecords } from \"./search-helpers\";\nimport { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { PractitionerModel } from \"@/fhir/models/practitioner\";\nimport { claimsAuthEmail, claimsPractitionerId } from \"@/utils/auth\";\n\nexport const getPractitioner = async (\n  practitionerId: string,\n  requestContext: CTWRequestContext\n) => {\n  let practitioners = [];\n  try {\n    const { resources } = await searchBuilderRecords(\n      \"Practitioner\",\n      requestContext,\n      {\n        _id: practitionerId,\n      }\n    );\n\n    practitioners = resources;\n  } catch (error) {\n    throw new Error(\n      `Failed fetching practitioner with an id of: ${practitionerId}. ${error}`\n    );\n  }\n\n  if (!practitioners[0]) {\n    throw new Error(`No practitioner found with an id of: ${practitionerId}`);\n  }\n\n  return new PractitionerModel(practitioners[0]);\n};\n\n// Returns a reference for the user's practitioner by looking\n// up the practitioner from the user's claims data.\n// If the user does not have an associated practitioner, then we\n// use their email address as the display in the reference.\nexport async function getUsersPractitionerReference(\n  requestContext: CTWRequestContext\n): Promise<Reference> {\n  const practitionerId = claimsPractitionerId(requestContext.authToken);\n  if (practitionerId) {\n    const practitioner = await getPractitioner(practitionerId, requestContext);\n    return {\n      reference: `Practitioner/${practitionerId}`,\n      type: \"Practitioner\",\n      display: practitioner.fullName,\n    };\n  }\n\n  return {\n    display: claimsAuthEmail(requestContext.authToken),\n  };\n}\n","import { Provenance, Resource } from \"fhir/r4\";\nimport { FHIRModel } from \"./models/fhir-model\";\nimport { getUsersPractitionerReference } from \"./practitioner\";\nimport { searchAllRecords } from \"./search-helpers\";\nimport {\n  SYSTEM_PROVENANCE_ACTIVITY_TYPE,\n  SYSTEM_PROVENANCE_AGENT_TYPE,\n} from \"./system-urls\";\nimport { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { claimsBuilderName } from \"@/utils/auth\";\nimport { uniq } from \"@/utils/nodash\";\nimport { QUERY_KEY_PROVENANCE } from \"@/utils/query-keys\";\nimport { queryClient } from \"@/utils/request\";\n\nexport const ASSEMBLER_CODING = {\n  system: SYSTEM_PROVENANCE_AGENT_TYPE,\n  code: \"assembler\",\n  display: \"Assembler\",\n};\n\nexport const CREATE_CODING = {\n  coding: [\n    {\n      system: SYSTEM_PROVENANCE_ACTIVITY_TYPE,\n      code: \"CREATE\",\n      display: \"create\",\n    },\n  ],\n};\n\nexport const UPDATE_CODING = {\n  coding: [\n    {\n      system: SYSTEM_PROVENANCE_ACTIVITY_TYPE,\n      code: \"UPDATE\",\n      display: \"revise\",\n    },\n  ],\n};\n\nexport const createProvenance = async (\n  type: \"CREATE\" | \"UPDATE\",\n  resource: Resource,\n  requestContext: CTWRequestContext\n) => {\n  const { fhirClient } = requestContext;\n  const builderName = claimsBuilderName(requestContext.authToken);\n  const versionId = parseInt(resource.meta?.versionId || \"0\", 10);\n\n  const provenance: Provenance = {\n    resourceType: \"Provenance\",\n    agent: [\n      {\n        who: await getUsersPractitionerReference(requestContext),\n        onBehalfOf: { display: builderName },\n      },\n      {\n        type: {\n          coding: [ASSEMBLER_CODING],\n        },\n        who: { display: \"Zus Health\" },\n      },\n    ],\n    recorded: new Date().toISOString(),\n    target: [\n      {\n        reference: `${resource.resourceType}/${resource.id}/_history/${versionId}`,\n        type: resource.resourceType,\n      },\n    ],\n  };\n  provenance.activity = type === \"CREATE\" ? CREATE_CODING : UPDATE_CODING;\n  return fhirClient.create({\n    resourceType: \"Provenance\",\n    body: provenance,\n  });\n};\n\nexport async function searchProvenances<T extends fhir4.Resource>(\n  requestContext: CTWRequestContext,\n  models: FHIRModel<T>[]\n): Promise<Provenance[]> {\n  const target = uniq(models.map((m) => `${m.resourceType}/${m.id}`)).join(\",\");\n\n  const { resources } = await queryClient.fetchQuery(\n    [QUERY_KEY_PROVENANCE, target],\n    async () =>\n      searchAllRecords(\"Provenance\", requestContext, {\n        target,\n      })\n  );\n\n  return resources;\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { FhirResource, Resource } from \"fhir/r4\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { omitEmptyArrays } from \"./client\";\nimport { isFhirError } from \"./errors\";\nimport {\n  ASSEMBLER_CODING,\n  CREATE_CODING,\n  createProvenance,\n} from \"./provenance\";\nimport { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { getUsersPractitionerReference } from \"@/fhir/practitioner\";\nimport { claimsBuilderName } from \"@/utils/auth\";\nimport { Telemetry } from \"@/utils/telemetry\";\n\nexport async function createOrEditFhirResource(\n  resource: Resource,\n  requestContext: CTWRequestContext\n) {\n  const { fhirClient } = requestContext;\n  const resourceModified = resource;\n\n  try {\n    if (resource.id) {\n      const response = await fhirClient.update({\n        resourceType: resource.resourceType,\n        id: resource.id,\n        body: omitEmptyArrays(resource),\n      });\n      if (!isFhirError(response)) {\n        await createProvenance(\"UPDATE\", response, requestContext);\n      }\n      return response;\n    }\n    const response = await fhirClient.create({\n      resourceType: resource.resourceType,\n      body: omitEmptyArrays(resource),\n    });\n    if (!isFhirError(response)) {\n      resourceModified.id = response.id;\n    }\n    return response;\n  } catch (err) {\n    Telemetry.logError(err as Error);\n    return err;\n  }\n}\n\nexport async function createFhirResourceWithProvenance(\n  resource: FhirResource,\n  requestContext: CTWRequestContext\n) {\n  const { fhirClient } = requestContext;\n  const builderName = claimsBuilderName(requestContext.authToken);\n  const resourceId = resource.id || uuidv4();\n  const provenanceFullUrl = uuidv4();\n\n  const bundle: fhir4.Bundle = {\n    resourceType: \"Bundle\",\n    type: \"transaction\",\n    entry: [\n      {\n        request: {\n          method: \"POST\",\n          url: resource.resourceType,\n        },\n        fullUrl: resourceId,\n        resource,\n      },\n      {\n        request: {\n          method: \"POST\",\n          url: \"Provenance\",\n        },\n        fullUrl: provenanceFullUrl,\n        resource: {\n          resourceType: \"Provenance\",\n          activity: CREATE_CODING,\n          agent: [\n            {\n              who: await getUsersPractitionerReference(requestContext),\n              onBehalfOf: { display: builderName },\n            },\n            {\n              type: {\n                coding: [ASSEMBLER_CODING],\n              },\n              who: { display: \"Zus Health\" },\n            },\n          ],\n          recorded: new Date().toISOString(),\n          target: [\n            {\n              reference: `${resource.resourceType}/${resourceId}`,\n              type: resource.resourceType,\n            },\n          ],\n        },\n      },\n    ],\n  };\n\n  return fhirClient.transaction({\n    body: omitEmptyArrays({\n      ...bundle,\n      type: \"transaction\",\n    }),\n  });\n}\n\nexport async function deleteMetaTags(\n  resource: Resource,\n  requestContext: CTWRequestContext,\n  tag: fhir4.Coding[]\n) {\n  const post = {\n    resourceType: \"Parameters\",\n    parameter: [\n      {\n        name: \"meta\",\n        valueMeta: {\n          tag,\n        },\n      },\n    ],\n  };\n\n  const { fhirClient } = requestContext;\n  await fhirClient.request(\n    `${resource.resourceType}/${resource.id}/$meta-delete`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(post),\n      options: { headers: { \"content-type\": \"application/json\" } },\n    }\n  );\n}\n\nexport async function deleteFhirResource(\n  resource: Resource,\n  requestContext: CTWRequestContext\n) {\n  const { fhirClient } = requestContext;\n\n  if (!resource.id) {\n    throw new Error(`Tried to delete a resource that hasn't been created yet.`);\n  }\n\n  await fhirClient.request(\n    `${resource.resourceType}/${resource.id}?_cascade=delete`,\n    {\n      method: \"DELETE\",\n    }\n  );\n}\n","import { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { createOrEditFhirResource } from \"@/fhir/action-helper\";\nimport { dateToISO } from \"@/fhir/formatters\";\nimport { PatientModel } from \"@/fhir/models\";\nimport { cloneDeep } from \"@/utils/nodash\";\nimport { QUERY_KEY_PATIENT } from \"@/utils/query-keys\";\nimport { queryClient } from \"@/utils/request\";\n\nexport type PatientFormData = {\n  lastName: string;\n  firstName: string;\n  gender: fhir4.Patient[\"gender\"];\n  dateOfBirth: Date;\n  email: string;\n  phone: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n};\n\nexport const editPatient = async (\n  patient: PatientModel,\n  data: PatientFormData,\n  getRequestContext: () => Promise<CTWRequestContext>\n) => {\n  const requestContext = await getRequestContext();\n  const fhirPatient = cloneDeep(patient.resource);\n\n  fhirPatient.gender = data.gender;\n  fhirPatient.birthDate = dateToISO(data.dateOfBirth);\n\n  fhirPatient.name = [\n    {\n      use: \"official\",\n      family: data.lastName,\n      given: [data.firstName],\n    },\n  ];\n\n  fhirPatient.address = [\n    {\n      line: [data.address],\n      city: data.city,\n      state: data.state,\n      postalCode: data.zipCode,\n    },\n  ];\n\n  const telecom: fhir4.ContactPoint[] = [];\n\n  if (data.phone) {\n    telecom.push({ system: \"phone\", value: data.phone });\n  }\n\n  if (data.email) {\n    telecom.push({ system: \"email\", value: data.email });\n  }\n\n  fhirPatient.telecom = telecom;\n\n  const response = await createOrEditFhirResource(fhirPatient, requestContext);\n\n  await queryClient.invalidateQueries([QUERY_KEY_PATIENT]);\n\n  return response;\n};\n","import { createContext } from \"react\";\nimport { PatientFormData } from \"../../content/forms/actions/patients\";\nimport { Tag } from \"@/fhir/types\";\n\nexport type PatientState = {\n  patientID: string;\n  systemURL: string;\n  tags?: Tag[];\n  onPatientSave?: (data: PatientFormData) => Promise<void>;\n};\n\nexport const PatientContext = createContext<PatientState | undefined>(\n  undefined\n);\n","import { useQuery, UseQueryResult } from \"@tanstack/react-query\";\nimport { ReactNode, useCallback, useContext, useMemo } from \"react\";\nimport {\n  editPatient,\n  PatientFormData,\n} from \"../../content/forms/actions/patients\";\nimport { CTWRequestContext } from \"./ctw-context\";\nimport { useCTW } from \"./ctw-provider\";\nimport { DrawerProvider } from \"./drawer-provider\";\nimport { ModalProvider } from \"./modal-provider\";\nimport { PatientContext, PatientState } from \"./patient-context\";\nimport { PatientModel } from \"@/fhir/models/patient\";\nimport { getBuilderFhirPatient } from \"@/fhir/patient-helper\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\nimport { Tag } from \"@/fhir/types\";\nimport { QUERY_KEY_PATIENT } from \"@/utils/query-keys\";\nimport { queryClient } from \"@/utils/request\";\n\n// Cache patient for 5 minutes.\nconst PATIENT_STALE_TIME = 1000 * 60 * 5;\n\ntype ThirdPartyID = {\n  patientUPID?: never;\n  patientID: string;\n  systemURL: string;\n};\n\ntype PatientUPIDSpecified = {\n  patientUPID: string;\n  patientID?: never;\n  systemURL?: never;\n};\n\ntype PatientProviderProps = {\n  children: ReactNode;\n  tags?: Tag[];\n  onPatientSave?: (data: PatientFormData) => Promise<void>;\n} & (ThirdPartyID | PatientUPIDSpecified);\n\nexport function PatientProvider({\n  children,\n  patientUPID,\n  patientID,\n  systemURL,\n  tags,\n  onPatientSave,\n}: PatientProviderProps) {\n  const providerState = useMemo(\n    () => ({\n      patientID: patientUPID || patientID,\n      systemURL: patientUPID ? SYSTEM_ZUS_UNIVERSAL_ID : systemURL,\n      tags,\n      onPatientSave,\n    }),\n    [patientID, patientUPID, systemURL, tags, onPatientSave]\n  );\n\n  return (\n    <PatientContext.Provider value={providerState as PatientState}>\n      <ModalProvider>\n        <DrawerProvider>{children}</DrawerProvider>\n      </ModalProvider>\n    </PatientContext.Provider>\n  );\n}\n\nexport function usePatient(): UseQueryResult<PatientModel, unknown> {\n  const { getRequestContext } = useCTW();\n\n  const context = useContext(PatientContext);\n\n  if (!context) {\n    throw new Error(\"usePatient must be used within a PatientProvider\");\n  }\n\n  const { patientID, systemURL, tags } = context;\n\n  return useQuery(\n    [QUERY_KEY_PATIENT, patientID, systemURL, tags],\n    async () => {\n      const requestContext = await getRequestContext();\n      return getBuilderFhirPatient(requestContext, patientID, systemURL, {\n        _tag: tags?.map((tag) => `${tag.system}|${tag.code}`) ?? [],\n      });\n    },\n    { staleTime: PATIENT_STALE_TIME }\n  );\n}\n\nexport function usePatientPromise() {\n  const { getRequestContext } = useCTW();\n\n  const context = useContext(PatientContext);\n\n  return {\n    getPatient: useCallback(() => {\n      if (!context) {\n        throw new Error(\"usePatient must be used within a PatientProvider\");\n      }\n\n      const { patientID, systemURL, tags } = context;\n\n      return queryClient.fetchQuery(\n        [QUERY_KEY_PATIENT, patientID, systemURL, tags],\n        async () => {\n          const requestContext = await getRequestContext();\n          return getBuilderFhirPatient(requestContext, patientID, systemURL, {\n            _tag: tags?.map((tag) => `${tag.system}|${tag.code}`) ?? [],\n          });\n        },\n        { staleTime: PATIENT_STALE_TIME }\n      );\n    }, [context, getRequestContext]),\n  };\n}\n\nexport function useHandlePatientSave(patient: PatientModel) {\n  const { getRequestContext } = useCTW();\n  const context = useContext(PatientContext);\n\n  if (!context) {\n    throw new Error(\"usePatient must be used within a PatientProvider\");\n  }\n\n  const { onPatientSave } = context;\n\n  return useCallback(\n    async (data) => {\n      if (onPatientSave) {\n        return onPatientSave(data);\n      }\n\n      return editPatient(patient, data, getRequestContext);\n    },\n    [onPatientSave, patient, getRequestContext]\n  );\n}\n\nexport function useQueryWithPatient<T, T2>(\n  queryKey: string,\n  keys: T2[],\n  query: (\n    requestContext: CTWRequestContext,\n    patient: PatientModel,\n    keys?: T2[]\n  ) => Promise<T>,\n  enabled = true\n) {\n  const { getRequestContext } = useCTW();\n  const patientResponse = usePatient();\n\n  return useQuery(\n    [queryKey, patientResponse.data?.UPID, ...keys],\n    async () => {\n      const requestContext = await getRequestContext();\n      // Ignore eslint warning as we should always have a valid\n      // patient thanks to the enabled check.\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return query(requestContext, patientResponse.data!, keys);\n    },\n    { enabled: !!patientResponse.data?.UPID && enabled }\n  );\n}\n"],"names":["ModalContext","createContext","dummyChild","_props","React","ModalProvider","children","isOpen","setIsOpen","useState","modalProps","setProps","state","useMemo","props","useModal","context","useContext","DrawerContext","DrawerProvider","drawerProps","useDrawer","PractitionerModel","FHIRModel","firstEntryInName","_a","_b","n","getPractitioner","practitionerId","requestContext","practitioners","resources","searchBuilderRecords","error","getUsersPractitionerReference","claimsPractitionerId","practitioner","claimsAuthEmail","ASSEMBLER_CODING","SYSTEM_PROVENANCE_AGENT_TYPE","CREATE_CODING","SYSTEM_PROVENANCE_ACTIVITY_TYPE","UPDATE_CODING","createProvenance","type","resource","fhirClient","builderName","claimsBuilderName","versionId","provenance","searchProvenances","models","target","uniq","m","queryClient","QUERY_KEY_PROVENANCE","searchAllRecords","getRandomValues","rnds8","rng","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds","createOrEditFhirResource","resourceModified","response","omitEmptyArrays","isFhirError","err","Telemetry","createFhirResourceWithProvenance","resourceId","uuidv4","provenanceFullUrl","bundle","editPatient","patient","data","getRequestContext","fhirPatient","cloneDeep","dateToISO","telecom","QUERY_KEY_PATIENT","PatientContext","PATIENT_STALE_TIME","PatientProvider","patientUPID","patientID","systemURL","tags","onPatientSave","providerState","SYSTEM_ZUS_UNIVERSAL_ID","usePatient","useCTW","useQuery","getBuilderFhirPatient","tag","usePatientPromise","useCallback","useHandlePatientSave","useQueryWithPatient","queryKey","keys","query","enabled","patientResponse"],"mappings":"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"}