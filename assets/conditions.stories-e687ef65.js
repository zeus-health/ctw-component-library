import{R as n,r as l}from"./index-6f814c40.js";import{w as y,u as m,a as he,b as S,e as g}from"./index-f5b5f689.js";import{c as ge}from"./index-74f03c09.js";import{b as Ve,D as Me,c as Pe,m as u,g as ve,u as ke,d as Re,e as De,f as Oe,h as Fe,i as Le,j as We,k as je,n as ze,T as Ue,o as $e,p as Ke,q as oe,r as Ye,C as Ze,a as Ge,S as Je}from"./patient-allergies-537ec5b6.js";import{u as Xe,c as k,t as Qe,C as et,M as tt,o as nt,a as at,g as it,b as re,f as ot,s as Ce,d as rt,p as st,e as se}from"./requests-a8f87beb.js";import{T as dt}from"./table-f396f8bf.js";import{h as be}from"./request-47bfd586.js";import"./_baseToString-5e23e5e6.js";import"./_baseClone-59dfd81b.js";import{d as ct}from"./sortBy-7530ff7d.js";import"./_equalByTag-2573c09c.js";import"./_baseForOwn-0b302854.js";import"./_createSet-00935424.js";import"./_commonjsHelpers-042e6b4d.js";import"./isEqual-1a694167.js";import"./_baseIsEqual-4482d138.js";import"./uniq-38208ea9.js";import"./_baseUniq-701deb29.js";import"./index-63320c34.js";import"./index-356e4a49.js";import"./drawer-a8e46714.js";import"./index-6de6b113.js";import"./action-list-ada7e7df.js";import"./isPlainObject-d68c8411.js";import"./_basePickBy-d4bc7435.js";import"./mapValues-3edfa6db.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./data-list-254aa0b0.js";import"./spinner-66aa4ba7.js";import"./isString-45b38206.js";import"./extends-298b405d.js";import"./debounce-c94122dc.js";import"./toNumber-4334224f.js";import"./modal-ccda-22e2b23d.js";import"./coding-list-1d7c950f.js";function z({className:e}){return n.createElement("div",{className:ge("ctw-conditions",e)},n.createElement("div",{className:"ctw-heading-container"},n.createElement("div",{className:"ctw-title"},"Conditions")),n.createElement("div",{className:"ctw-p-5"},n.createElement(Ve,{header:"Conditions Unavailable"},n.createElement("div",null,"We are unable to access Condition information for this patient."),n.createElement("div",null,"Contact your system administrator or customer service for assistance."))))}try{z.displayName="ConditionsNoPatient",z.__docgenInfo={description:"",displayName:"ConditionsNoPatient",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}function B({className:e,conditions:t,rowMenuActions:i,hideMenu:a,sort:s={columnTitle:"Last Recorded",dir:"desc"},onSort:c,...f}){const o=[{title:"Condition",dataIndex:"display",widthPercent:40,minWidth:320,sortIndices:[{index:"display"},{index:"recorded",dir:"desc"}]},{title:"Category",dataIndex:"ccsGrouping",widthPercent:25,minWidth:192,sortIndices:[{index:"ccsGrouping"},{index:"display",dir:"asc"}]},{title:"Status",render:d=>n.createElement("div",{className:"ctw-capitalize"},n.createElement("div",{className:"ctw-text-content-black"},d.clinicalStatus),n.createElement("div",null,d.isArchived?"Archived":d.verificationStatus)),widthPercent:17.5,minWidth:128,sortIndices:[{index:"clinicalStatus"},{index:"verificationStatus"},{index:"recorded",dir:"desc"}]},{title:"Last Recorded",dataIndex:"recordedDate",widthPercent:17.5,minWidth:132,sortIndices:[{index:"recorded"},{index:"display",dir:"asc"}]}];return a||o.push({className:"ctw-table-action-column",render:d=>n.createElement(Me,{menuItems:i(d)},n.createElement(Pe,{className:"ctw-w-5"}))}),n.createElement(dt,{className:e,records:t,columns:o,sort:s,onSort:c,...f})}try{B.displayName="ConditionsTableBase",B.__docgenInfo={description:"",displayName:"ConditionsTableBase",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | (string & Mapping) | (string & ArgumentArray)"}},conditions:{defaultValue:null,description:"",name:"conditions",required:!0,type:{name:"ConditionModel[]"}},rowMenuActions:{defaultValue:null,description:"",name:"rowMenuActions",required:!0,type:{name:"(condition: ConditionModel) => MenuItem[]"}},hideMenu:{defaultValue:null,description:"",name:"hideMenu",required:!0,type:{name:"boolean"}},handleRowClick:{defaultValue:null,description:"",name:"handleRowClick",required:!1,type:{name:"((record: ConditionModel) => void)"}},RowActions:{defaultValue:null,description:"",name:"RowActions",required:!1,type:{name:"ComponentType<{ record: ConditionModel; }>"}},isLoading:{defaultValue:null,description:"",name:"isLoading",required:!1,type:{name:"boolean"}},emptyMessage:{defaultValue:null,description:"Displayed when we have 0 records.",name:"emptyMessage",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},showTableHead:{defaultValue:null,description:"",name:"showTableHead",required:!1,type:{name:"boolean"}},stacked:{defaultValue:null,description:"",name:"stacked",required:!1,type:{name:"boolean"}},sort:{defaultValue:{value:'{ columnTitle: "Last Recorded", dir: "desc" }'},description:"",name:"sort",required:!1,type:{name:"TableSort"}},onSort:{defaultValue:null,description:"",name:"onSort",required:!1,type:{name:"((sort: TableSort) => void)"}},hidePagination:{defaultValue:null,description:"",name:"hidePagination",required:!1,type:{name:"boolean"}}}}}catch{}const lt=/^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/,ut=/^\d{5}(-\d{4})?$/;function mt(e){return u.enum(["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"],{required_error:e})}function pt(e){return e?{alabama:"AL",alaska:"AK",arizona:"AZ",arkansas:"AR",california:"CA",colorado:"CO",connecticut:"CT",delaware:"DE",florida:"FL",georgia:"GA",hawaii:"HI",idaho:"ID",illinois:"IL",indiana:"IN",iowa:"IA",kansas:"KS",kentucky:"KY",louisiana:"LA",maine:"ME",maryland:"MD",massachusetts:"MA",michigan:"MI",minnesota:"MN",mississippi:"MS",missouri:"MO",montana:"MT",nebraska:"NE",nevada:"NV","new hampshire":"NH","new jersey":"NJ","new mexico":"NM","new york":"NY","north carolina":"NC","north dakota":"ND",ohio:"OH",oklahoma:"OK",oregon:"OR",pennsylvania:"PA","rhode island":"RI","south carolina":"SC","south dakota":"SD",tennessee:"TN",texas:"TX",utah:"UT",vermont:"VT",virginia:"VA",washington:"WA","west virginia":"WV",wisconsin:"WI",wyoming:"WY"}[e.toLowerCase()]||e.toUpperCase():""}const U=e=>{var t,i,a,s,c;return[{label:"treating-provider",render:()=>n.createElement("div",{className:"ctw-font-medium"},"Who is the treating provider for this patient?")},{label:"Practitioner Name",field:"name",value:"",readonly:!1},[{label:"NPI",field:"npi",value:"",readonly:!1},{label:"Role",field:"role",value:"",readonly:!1}],{label:"patient-information",render:()=>n.createElement("div",null,n.createElement("div",{className:"ctw-font-medium"},"Is the patient information below correct and up-to-date?"),n.createElement("div",null,"Complete as many fields as possible to increase matching results."))},{label:"First Name",field:"firstName",value:e.firstName,readonly:!1},{label:"Last Name",field:"lastName",value:e.lastName,readonly:!1},[{label:"Date of Birth",field:"dateOfBirth",value:e.dob,readonly:!1},{label:"Gender",field:"gender",value:e.gender,readonly:!1}],{label:"Address",field:"address",value:(i=(t=e.homeAddress)==null?void 0:t.line)==null?void 0:i.join(", "),readonly:!1},{label:"City",field:"city",value:(a=e.homeAddress)==null?void 0:a.city,readonly:!1},[{label:"State",field:"state",value:pt((s=e.homeAddress)==null?void 0:s.state),readonly:!1},{label:"Zip",field:"zipCode",value:(c=e.homeAddress)==null?void 0:c.postalCode,readonly:!1}],{label:"Phone",field:"phone",value:e.phoneNumber,readonly:!1},{label:"Email",field:"email",value:e.email,readonly:!1}]},yt=u.object({name:u.string({required_error:"Practitioner name must be specified."}),npi:u.string({required_error:"NPI must be specified."}).length(10),role:u.enum(["Doctor","Nurse","Other"]),firstName:u.string({required_error:"First name must be specified."}),lastName:u.string({required_error:"Last name must be specified."}),dateOfBirth:u.date().min(new Date("1900"),{message:"Date of birth is invalid."}).max(new Date,{message:"Date of birth cannot be a future date."}),gender:u.enum(["-","male","female","other","unknown"]),address:u.string({required_error:"Address must be specified."}),city:u.string({required_error:"City must be specified."}),state:mt("State must be specified."),zipCode:u.string({required_error:"Zip code must be specified."}).regex(ut,{message:"Zip code is invalid."}),phone:u.string().regex(lt,{message:"Phone number is invalid."}).optional(),email:u.string().email({message:"Email address is invalid."}).optional()});try{U.displayName="getRequestData",U.__docgenInfo={description:"",displayName:"getRequestData",props:{active:{defaultValue:null,description:"",name:"active",required:!0,type:{name:"boolean | undefined"}},contact:{defaultValue:null,description:"",name:"contact",required:!0,type:{name:"PatientContact[] | undefined"}},dob:{defaultValue:null,description:"",name:"dob",required:!0,type:{name:"string | undefined"}},age:{defaultValue:null,description:"",name:"age",required:!0,type:{name:"number | undefined"}},gender:{defaultValue:null,description:"",name:"gender",required:!0,type:{name:"string | undefined"}},maritalStatus:{defaultValue:null,description:"",name:"maritalStatus",required:!0,type:{name:"string | undefined"}},organization:{defaultValue:null,description:"",name:"organization",required:!0,type:{name:"OrganizationModel | undefined"}},use:{defaultValue:null,description:"",name:"use",required:!0,type:{name:"enum",value:[{value:"undefined"},{value:'"usual"'},{value:'"official"'},{value:'"temp"'},{value:'"nickname"'},{value:'"anonymous"'},{value:'"old"'},{value:'"maiden"'}]}},UPID:{defaultValue:null,description:"",name:"UPID",required:!0,type:{name:"string"}},getPhoneNumber:{defaultValue:null,description:"",name:"getPhoneNumber",required:!0,type:{name:'(use?: "temp" | "old" | "home" | "work" | "mobile" | undefined) => string | undefined'}},phoneNumber:{defaultValue:null,description:"",name:"phoneNumber",required:!0,type:{name:"string | undefined"}},email:{defaultValue:null,description:"",name:"email",required:!0,type:{name:"string | undefined"}},bestHomeAddress:{defaultValue:null,description:"",name:"bestHomeAddress",required:!0,type:{name:"Address | undefined"}},homeAddress:{defaultValue:null,description:"",name:"homeAddress",required:!0,type:{name:"Address | undefined"}},bestName:{defaultValue:null,description:"",name:"bestName",required:!0,type:{name:"HumanName"}},additionalNames:{defaultValue:null,description:"",name:"additionalNames",required:!0,type:{name:"string | undefined"}},display:{defaultValue:null,description:"",name:"display",required:!0,type:{name:"string"}},firstName:{defaultValue:null,description:"",name:"firstName",required:!0,type:{name:"string"}},fullName:{defaultValue:null,description:"",name:"fullName",required:!0,type:{name:"string"}},lastName:{defaultValue:null,description:"",name:"lastName",required:!0,type:{name:"string | undefined"}},nickname:{defaultValue:null,description:"",name:"nickname",required:!0,type:{name:"string | undefined"}},prefix:{defaultValue:null,description:"",name:"prefix",required:!0,type:{name:"string | undefined"}},suffix:{defaultValue:null,description:"",name:"suffix",required:!0,type:{name:"string | undefined"}},resource:{defaultValue:null,description:"",name:"resource",required:!0,type:{name:"Patient"}},includedResources:{defaultValue:null,description:"",name:"includedResources",required:!1,type:{name:"ResourceMap"}},revIncludes:{defaultValue:null,description:"",name:"revIncludes",required:!1,type:{name:"Resource[]"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},isSummaryResource:{defaultValue:null,description:"",name:"isSummaryResource",required:!0,type:{name:"boolean"}},resourceType:{defaultValue:null,description:"",name:"resourceType",required:!0,type:{name:"string"}},getBasicResourceByAction:{defaultValue:null,description:"",name:"getBasicResourceByAction",required:!0,type:{name:"(profileAction: string) => Basic | undefined"}},toString:{defaultValue:null,description:"",name:"toString",required:!1,type:{name:"() => string"}}}}}catch{}const ft=async(e,t,i)=>{const a=`${ve(e.env)}/patient-history/patient/${t}/refresh?consent=1`;try{return await(await be(a,{method:"POST",headers:{Authorization:`Bearer ${e.authToken}`,"practitioner-npi":i.npi,"practitioner-role":i.role.toLocaleLowerCase(),"practitioner-name":i.name,...e.contextBuilderId&&{"Zus-Account":e.contextBuilderId}}})).json()}catch{throw Error(`Error scheduling patient history job with id of ${t}`)}},$=({patient:e,header:t,isOpen:i,onClose:a,setClinicalHistoryExists:s})=>{const c=ke(e),f=async(o,d)=>{try{await c(o)}catch(N){const{requestErrors:b,responseIsSuccess:x}=De(N);return x?new Error("Failed to save patient data."):new Error(b.join(","))}const H=await d(),R=await ft(H,e.id,o);if("errors"in R){const N=[R.errors.map(b=>b.details)];return new Error(N.join(","))}return s(!0),R};return n.createElement(Re,{header:t,title:"Request Records",action:f,data:U(e),schema:yt,isOpen:i,onClose:a})};try{$.displayName="PatientHistoryRequestDrawer",$.__docgenInfo={description:"",displayName:"PatientHistoryRequestDrawer",props:{onClose:{defaultValue:null,description:"",name:"onClose",required:!0,type:{name:"() => void"}},isOpen:{defaultValue:null,description:"",name:"isOpen",required:!0,type:{name:"boolean"}},header:{defaultValue:null,description:"",name:"header",required:!1,type:{name:"ReactNode"}},patient:{defaultValue:null,description:"",name:"patient",required:!0,type:{name:"PatientModel"}},setClinicalHistoryExists:{defaultValue:null,description:"",name:"setClinicalHistoryExists",required:!0,type:{name:"Dispatch<SetStateAction<boolean | undefined>>"}}}}}catch{}const K=({onClick:e})=>n.createElement("div",{className:"ctw-flex ctw-justify-center ctw-space-x-2 ctw-border ctw-border-solid ctw-border-divider-light ctw-p-5"},n.createElement("div",{className:"ctw-flex ctw-justify-center ctw-text-icon-default"},"Retrieve patient clinical history."),n.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link",onClick:e},"Request Records"));try{K.displayName="PatientHistoryMessage",K.__docgenInfo={description:"",displayName:"PatientHistoryMessage",props:{onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLButtonElement>"}}}}}catch{}async function wt(e,t){const i=`${ve(e.env)}/patient-history/messages?patient-id=${t}`;try{const s=await(await be(i,{headers:{Authorization:`Bearer ${e.authToken}`,...e.contextBuilderId&&{"Zus-Account":e.contextBuilderId}}})).json();return Object.values(s.data)}catch(a){throw Oe("Failed fetching patient refresh history messages",a)}}async function ht(e,t){return(await wt(e,t)).length!==0}const gt="There are no conditions in this patient's record.",vt="There are no conditions available.",de="There was an error fetching conditions for this patient. Refresh the page or contact your organization's technical support if this issue persists.";function Y({className:e,readOnly:t=!1}){const i=l.useRef(null),a=Fe(i),[s,c]=l.useState(!1),[f,o]=l.useState(!1),d=Xe(),[H,R]=l.useState(!1),[N,b]=l.useState([]),[x,I]=l.useState([]),[T,Ee]=l.useState(!1),[G,J]=l.useState("Add"),[Ne,_]=l.useState(k),[Ae,V]=l.useState(),[C,X]=l.useState(),p=Le(),w=We(),E=je(),{getRequestContext:M}=ze(),[Q,ee]=l.useState(),[P,te]=l.useState(),Se=w.isError?de:gt,qe=E.isError?de:vt,Te=r=>{p.data&&(c(!0),J("Edit"),_(at),V(it({condition:r})),X(r))},Be=r=>{o(!0),X(r)},He=r=>{const h=Ke(r.resource);p.data&&(_(k),c(!0),J("Add"),V(re({condition:new oe(h)})))},ne=()=>{if(!p.data)return;const r=Ye(p.data.id);c(!0),_(k),V(re({condition:new oe(r)}))},xe=n.createElement("button",{className:"ctw-btn-primary",type:"button",onClick:ne},"Add Condition"),ae=P||E.data&&E.data.length>0,Ie=async r=>{const h=await M(),A=await ht(h,r);te(A)};return l.useEffect(()=>{var h;async function r(){const A=w.data,ie=E.data;A&&(b(A.filter(_e=>_e.active||T)),I(ie?ot(ie,A,T):[])),w.error&&(b([]),I([]))}r(),(h=p.data)!=null&&h.id&&P===void 0&&Ie(p.data.id)},[T,p.data,w.data,E.data,P,w.error]),p.isError?n.createElement(z,{className:e}):n.createElement("div",{ref:i,className:ge("ctw-conditions",e,{"ctw-conditions-stacked":a.sm})},!t&&n.createElement("div",{className:"ctw-conditions-heading-container"},n.createElement("div",{className:"ctw-title"},"Conditions"),n.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link",onClick:ne},"+ Add Condition")),n.createElement("div",{className:"ctw-conditions-body-container"},n.createElement("div",{className:"ctw-space-y-3"},n.createElement("div",{className:"ctw-conditions-title-container"},n.createElement("div",{className:"ctw-title"},"Patient Record"),n.createElement(Ue,{onFormChange:()=>Ee(!T),toggleProps:{name:"conditions",text:"Include Inactive"}})),n.createElement(B,{stacked:a.sm,conditions:N,isLoading:w.isLoading,hideMenu:t,sort:Q,onSort:r=>ee(r),emptyMessage:n.createElement(n.Fragment,null,n.createElement("div",null,Se),!w.isError&&!t&&n.createElement("div",{className:"ctw-mt-5"},xe)),rowMenuActions:r=>[{name:"Edit",action:async()=>{Te(r)}},{name:"View History",action:async()=>{d({condition:r,readOnly:t})}},{name:"Delete",className:"dangerous",action:async()=>{Be(r)}}]})),n.createElement("div",{className:"ctw-space-y-3"},n.createElement("div",{className:"ctw-conditions-title-container"},n.createElement("div",{className:"ctw-title"},"Other Provider Records"),ae&&n.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link",onClick:()=>R(!0)},"Request Records")),ae?n.createElement(B,{className:"ctw-conditions-not-reviewed",stacked:a.sm,conditions:x,sort:Q,onSort:r=>ee(r),isLoading:E.isLoading||w.isLoading,hideMenu:t,emptyMessage:qe,rowMenuActions:r=>[{name:"Add",action:async()=>{He(r)}},{name:"View History",action:async()=>{d({condition:r,readOnly:!0})}},{name:r.isArchived?"Un-Archive":"Archive",action:async()=>{const h=await M();await Qe(r,h)}}]}):n.createElement(K,{onClick:()=>R(!0)}))),p.data&&n.createElement(Re,{title:`${G} Condition`,header:G==="Edit"&&C&&n.createElement(et,{condition:C}),action:ct($e)(C,p.data.id),data:Ae,schema:Ne,isOpen:s,onClose:()=>c(!1)}),p.data&&n.createElement($,{header:n.createElement("div",{className:"ctw-pt-0 ctw-text-base"},"Request patient clinical history from 70K+ providers across the nation. No changes will be made to your patient record."),patient:p.data,isOpen:H,onClose:()=>R(!1),setClinicalHistoryExists:te}),C&&p.data&&n.createElement(tt,{resource:C,resourceName:C.display||"unnamed condition",onClose:()=>o(!1),isOpen:f,onDelete:async()=>{const r=await M();await nt(C.resource,r)}}))}try{Y.displayName="Conditions",Y.__docgenInfo={description:"",displayName:"Conditions",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},readOnly:{defaultValue:{value:"false"},description:"",name:"readOnly",required:!1,type:{name:"boolean"}}}}}catch{}function Z(e){const t=y(e),i=y(t.getByRole("dialog"));return{conditionSearch:a=>m.type(i.getByPlaceholderText("Type to search"),a),selectCondition:async a=>m.click(await i.findByRole("option",{name:a})),status:a=>m.selectOptions(i.getByTestId("form-field-status"),a),onset:a=>m.type(i.getByTestId("form-field-onset"),a),abatement:a=>m.type(i.getByTestId("form-field-abatement"),a),note:a=>m.type(i.getByTestId("form-field-note"),a),cancel:()=>m.click(i.getByRole("button",{name:"Cancel"})),save:async()=>{m.click(i.getByRole("button",{name:"Save"})),await he(()=>t.queryByRole("dialog"))}}}function ce(e,t){const i=y(e),a=y(t);async function s(o){m.click(f(o).getByRole("button",{name:/dropdown/i})),await i.findAllByRole("menuitem")}function c(o){m.click(i.getByRole("menuitem",{name:o}))}function f(o){const d=a.getAllByRole("rowgroup")[1];return y(y(d).queryAllByRole("row")[o])}return{table:a,toHaveRowCount:async o=>{const d=a.getAllByRole("rowgroup")[1];o===0?await S(()=>g(d).toBeFalsy()):await S(()=>g(y(d).queryAllByRole("row")).toHaveLength(o))},toHaveRowWithText:(o,d)=>{f(o).getByText(d)},add:async o=>{await s(o),c("Add")},delete:async o=>{await s(o),c("Delete"),m.click(await i.findByRole("button",{name:/remove/i})),await he(()=>i.queryByRole("dialog"))},edit:async o=>{await s(o),c("Edit")},viewHistory:async o=>{await s(o),c("View History")}}}async function q(e){const t=y(e);await S(()=>g(t.queryAllByRole("table")).toHaveLength(2));const i=t.queryAllByRole("table"),a=ce(e,i[0]),s=ce(e,i[1]);return await a.table.findAllByText("active"),await s.table.findAllByText("active"),{clickAddCondition:()=>m.click(t.getByRole("button",{name:"+ Add Condition"})),toggleInactive:()=>m.click(t.getByLabelText("Include Inactive")),patientRecord:a,otherProvider:s}}const tn={component:Y,tags:["autodocs"],argTypes:{className:{options:["Blank","Fixed Width"],control:"select",mapping:{Blank:"","Fixed Width":"ctw-m-auto ctw-max-w-[600px]"}}},args:{className:"Blank",readOnly:!1},decorators:[(e,{args:t})=>n.createElement(Ze,{env:"dev",authToken:"dummy-token",builderId:"b123"},n.createElement(Ge,{patientID:"u12345",systemURL:Je},n.createElement(e,{args:t})))]},v={...Ce({otherConditions:rt,patientConditions:st})},D={...Ce({otherConditions:se,patientConditions:se})},O={...v,play:async({canvasElement:e})=>{const t=await q(e);await t.patientRecord.toHaveRowCount(2);const i="Heart failure (disorder)";t.clickAddCondition();const a=Z(e);a.conditionSearch("heart"),await a.selectCondition(i),a.status("Active"),a.onset("2020-02-14"),await a.save(),await t.patientRecord.toHaveRowCount(3),g(await t.patientRecord.table.findByText(i)).toBeTruthy()}},F={...v,play:async({canvasElement:e})=>{const t=await q(e);await t.patientRecord.toHaveRowCount(2),await t.otherProvider.add(2),await Z(e).save(),await t.patientRecord.toHaveRowCount(3),g(await t.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy()}},L={...v,play:async({canvasElement:e})=>{const t=await q(e);await t.patientRecord.toHaveRowCount(2),await t.patientRecord.edit(0);const i=Z(e);i.note("hello world"),await i.save(),t.patientRecord.toHaveRowWithText(0,/confirmed/i)}},W={...v,play:async({canvasElement:e})=>{const t=await q(e);await t.patientRecord.toHaveRowCount(2),await t.patientRecord.delete(0),await t.patientRecord.toHaveRowCount(1),t.toggleInactive(),await t.patientRecord.toHaveRowCount(3),t.patientRecord.toHaveRowWithText(1,/entered-in-error/i),t.toggleInactive(),await t.patientRecord.toHaveRowCount(1)}},j={...v,play:async({canvasElement:e})=>{const t=await q(e);await t.patientRecord.toHaveRowCount(2),await t.patientRecord.viewHistory(0);const i=y(e);await S(()=>g(i.queryAllByRole("dialog")).toHaveLength(1));const a=y(i.getByRole("dialog"));g(await a.findByText(/generalized anxiety disorder/i)).toBeTruthy(),await S(()=>g(a.getAllByRole("button",{name:/details/i})).toHaveLength(3)),m.click(a.getAllByRole("button",{name:/close/i})[0])}};var le;v.parameters={...v.parameters,storySource:{source:`{
  ...setupConditionMocks({
    otherConditions,
    patientConditions
  })
}`,...(le=v.parameters)==null?void 0:le.storySource}};var ue;D.parameters={...D.parameters,storySource:{source:`{
  ...setupConditionMocks({
    otherConditions: emptyConditions,
    patientConditions: emptyConditions
  })
}`,...(ue=D.parameters)==null?void 0:ue.storySource}};var me;O.parameters={...O.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    const newCondition = "Heart failure (disorder)";
    conditions.clickAddCondition();
    const conditionForm = conditionFormDrawer(canvasElement);
    conditionForm.conditionSearch("heart");
    await conditionForm.selectCondition(newCondition);
    conditionForm.status("Active");
    conditionForm.onset("2020-02-14");
    await conditionForm.save();
    await conditions.patientRecord.toHaveRowCount(3);
    expect(await conditions.patientRecord.table.findByText(newCondition)).toBeTruthy();
  }
}`,...(me=O.parameters)==null?void 0:me.storySource}};var pe;F.parameters={...F.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.otherProvider.add(2);
    const conditionForm = conditionFormDrawer(canvasElement);
    await conditionForm.save();
    await conditions.patientRecord.toHaveRowCount(3);
    expect(await conditions.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy();
  }
}`,...(pe=F.parameters)==null?void 0:pe.storySource}};var ye;L.parameters={...L.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.edit(0);
    const conditionForm = conditionFormDrawer(canvasElement);
    conditionForm.note("hello world");
    await conditionForm.save();
    conditions.patientRecord.toHaveRowWithText(0, /confirmed/i);
  }
}`,...(ye=L.parameters)==null?void 0:ye.storySource}};var fe;W.parameters={...W.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.delete(0);
    await conditions.patientRecord.toHaveRowCount(1);
    conditions.toggleInactive();
    await conditions.patientRecord.toHaveRowCount(3);
    conditions.patientRecord.toHaveRowWithText(1, /entered-in-error/i);
    conditions.toggleInactive();
    await conditions.patientRecord.toHaveRowCount(1);
  }
}`,...(fe=W.parameters)==null?void 0:fe.storySource}};var we;j.parameters={...j.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.viewHistory(0);
    const canvas = within(canvasElement);
    await waitFor(() => expect(canvas.queryAllByRole("dialog")).toHaveLength(1));
    const drawer = within(canvas.getByRole("dialog"));
    expect(await drawer.findByText(/generalized anxiety disorder/i)).toBeTruthy();
    await waitFor(() => expect(drawer.getAllByRole("button", {
      name: /details/i
    })).toHaveLength(3));
    userEvent.click(drawer.getAllByRole("button", {
      name: /close/i
    })[0]);
  }
}`,...(we=j.parameters)==null?void 0:we.storySource}};const nn=["Basic","Empty","TestAdd","TestAddOther","TestEdit","TestDelete","TestViewHistory"];export{v as Basic,D as Empty,O as TestAdd,F as TestAddOther,W as TestDelete,L as TestEdit,j as TestViewHistory,nn as __namedExportsOrder,tn as default};
//# sourceMappingURL=conditions.stories-e687ef65.js.map
