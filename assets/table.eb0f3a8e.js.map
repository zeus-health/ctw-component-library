{"version":3,"file":"table.eb0f3a8e.js","sources":["../../node_modules/@heroicons/react/outline/esm/ChevronDownIcon.js","../../node_modules/@heroicons/react/outline/esm/ChevronUpIcon.js","../../src/components/core/pagination/pagination.tsx","../../src/components/core/table/table-colgroup.tsx","../../src/components/core/table/table-head.tsx","../../src/components/core/table/table-helpers.tsx","../../src/components/core/table/table-data-cell.tsx","../../src/components/core/table/table-full-length-row.tsx","../../src/components/core/table/table-rows.tsx","../../src/components/core/table/table.tsx"],"sourcesContent":["import * as React from \"react\";\n\nfunction ChevronDownIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19 9l-7 7-7-7\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronDownIcon);\nexport default ForwardRef;","import * as React from \"react\";\n\nfunction ChevronUpIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M5 15l7-7 7 7\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronUpIcon);\nexport default ForwardRef;","export const DEFAULT_PAGE_SIZE = 10;\n\nexport type PaginationProps = {\n  total: number;\n  count: number;\n  changeCount: (amount: number) => void;\n};\n\nexport const Pagination = ({ total, count, changeCount }: PaginationProps) => {\n  const allShown = count >= total || total === 0;\n  const hasPages = total > DEFAULT_PAGE_SIZE;\n\n  return (\n    <div className=\"ctw-pagination ctw-flex ctw-items-center ctw-justify-between ctw-px-6\">\n      <div className=\"ctw-text-gray-600 ctw-text-sm\">\n        Showing{\" \"}\n        <span className=\"ctw-font-medium\">{Math.min(count, total)}</span> of{\" \"}\n        <span className=\"ctw-font-medium\">{total}</span> results\n      </div>\n\n      {(!allShown || hasPages) && (\n        <div className=\"ctw-flex ctw-h-full ctw-justify-end ctw-space-x-3\">\n          {!allShown && total > DEFAULT_PAGE_SIZE * 2 && (\n            <button\n              type=\"button\"\n              className=\"ctw-btn-default\"\n              onClick={() => changeCount(count + DEFAULT_PAGE_SIZE)}\n            >\n              Show More\n            </button>\n          )}\n\n          {!allShown && (\n            <button\n              type=\"button\"\n              className=\"ctw-btn-primary ctw-w-28 ctw-whitespace-nowrap\"\n              onClick={() => changeCount(total)}\n            >\n              Show All\n            </button>\n          )}\n\n          {allShown && hasPages && (\n            <button\n              type=\"button\"\n              className=\"ctw-btn-primary ctw-w-28 ctw-whitespace-nowrap\"\n              onClick={() => changeCount(DEFAULT_PAGE_SIZE)}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { MinRecordItem, TableColumn } from \"./table-helpers\";\n\nexport type TableColGroupProps<T extends MinRecordItem> = {\n  columns: TableColumn<T>[];\n};\n\nexport const TableColGroup = <T extends MinRecordItem>({\n  columns,\n}: TableColGroupProps<T>) => (\n  <colgroup>\n    {columns.map((column, index) => (\n      <col\n        key={column.title ?? index}\n        className={column.className}\n        style={{\n          minWidth: column.minWidth,\n          width: `${column.widthPercent}%`,\n        }}\n      />\n    ))}\n  </colgroup>\n);\n","import { SortDir } from \"@/utils/sort\";\nimport { ChevronDownIcon, ChevronUpIcon } from \"@heroicons/react/outline\";\nimport cx from \"classnames\";\nimport { MinRecordItem, TableColumn, TableSort } from \"./table-helpers\";\n\ntype SortChevronProps = {\n  sortOrder?: SortDir;\n};\n\nconst SortChevron = ({ sortOrder }: SortChevronProps) => {\n  const sharedClasses = \"ctw-text-gray-900 ctw-h-4\";\n  const activeClasses = cx(sharedClasses, \"ctw-opacity-100\");\n\n  switch (sortOrder) {\n    case \"desc\":\n      return <ChevronUpIcon className={activeClasses} />;\n    case \"asc\":\n      return <ChevronDownIcon className={activeClasses} />;\n    default:\n      return (\n        <ChevronDownIcon\n          className={cx(\n            sharedClasses,\n            \"ctw-opacity-0 group-hover:ctw-opacity-100\"\n          )}\n        />\n      );\n  }\n};\n\nexport type TableHeadProps<T extends MinRecordItem> = {\n  columns: TableColumn<T>[];\n  sort?: TableSort;\n  onSort?: (sortColumn: string) => void;\n};\n\nexport const TableHead = <T extends MinRecordItem>({\n  columns,\n  sort,\n  onSort,\n}: TableHeadProps<T>) => (\n  <thead>\n    <tr>\n      {columns.map((column, index) => (\n        <th\n          className={cx(\n            \"ctw-group\",\n            (column.sortFnOverride || column.sortIndex) && \"ctw-cursor-pointer\"\n          )}\n          key={column.title ?? index}\n          scope=\"col\"\n          onClick={() =>\n            (column.sortFnOverride || column.sortIndex) &&\n            onSort &&\n            onSort(column.title || \"\")\n          }\n        >\n          <div className=\"ctw-flex ctw-items-center ctw-space-x-2\">\n            <div>{column.title}</div>\n            <SortChevron\n              sortOrder={\n                sort?.columnTitle === column.title ? sort?.dir : undefined\n              }\n            />\n          </div>\n        </th>\n      ))}\n    </tr>\n  </thead>\n);\n","import { alphaSortBlankLast, SortDir } from \"@/utils/sort\";\nimport { ReactNode } from \"react\";\n\nexport interface MinRecordItem {\n  id: string | number;\n}\n\nexport type TableSort = { columnTitle: string; dir: SortDir };\n\ntype DataIndexSpecified<T> = { dataIndex: keyof T; render?: never };\ntype RenderSpecified<T> = { dataIndex?: never; render: (row: T) => ReactNode };\n\n// A table column has an optional title\n// and then either a dataIndex or a render method but not both.\nexport type TableColumn<T extends MinRecordItem> = {\n  title?: string;\n  className?: string;\n  widthPercent?: number;\n  minWidth?: number;\n  sortIndex?: keyof T;\n  sortFnOverride?: (a: T, b: T, dir: SortDir) => number;\n} & (DataIndexSpecified<T> | RenderSpecified<T>);\n\nexport function sortRecords<T extends MinRecordItem>(\n  records: T[],\n  columns: TableColumn<T>[],\n  sort?: TableSort\n) {\n  const sortColumn = columns.find(\n    (column) => column.title === sort?.columnTitle\n  );\n  // If there is a sort applied to a column, then sort the records.\n  if (sort && sortColumn) {\n    // May be given a function, or just a property to be sorted by alphanumerically.\n    const sortFn =\n      sortColumn.sortFnOverride ||\n      (sortColumn.sortIndex &&\n        ((a, b, dir) =>\n          // Cast because sortIndex is a property of a and b.\n          alphaSortBlankLast(\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (a as any)[sortColumn.sortIndex],\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (b as any)[sortColumn.sortIndex],\n            dir\n          )));\n    if (sortFn) return records.sort((a, b) => sortFn(a, b, sort.dir));\n  }\n  return records;\n}\n","import cx from \"classnames\";\nimport { ReactNode } from \"react\";\nimport { MinRecordItem, TableColumn } from \"./table-helpers\";\n\ntype TableColumnProps<T extends MinRecordItem> = {\n  column: TableColumn<T>;\n  record: T;\n  index: number;\n};\n\nexport const TableDataCell = <T extends MinRecordItem>({\n  column,\n  record,\n  index,\n}: TableColumnProps<T>): JSX.Element => {\n  const value = column.dataIndex\n    ? (record[column.dataIndex] as unknown as ReactNode)\n    : undefined;\n\n  return (\n    <td\n      key={column.title ?? index}\n      className={cx(\n        { \"ctw-font-medium ctw-text-content-black\": index === 0 },\n        column.className,\n        // Added ctw-break-words because AbdominalReallyLongWordThatShouldBReakButDoeskadjlkajflkajsf doesn't wrap correclty without it.\n        \"ctw-hyphens-auto ctw-break-words\"\n      )}\n    >\n      {column.render ? column.render(record) : value}\n    </td>\n  );\n};\n","import { ReactNode } from \"react\";\n\nexport const TableFullLengthRow = ({\n  children,\n  colSpan,\n}: {\n  children: ReactNode;\n  colSpan: number;\n}) => (\n  <tr>\n    <td className=\"ctw-table-full-length-row\" colSpan={colSpan}>\n      {children}\n    </td>\n  </tr>\n);\n","import cx from \"classnames\";\nimport { ReactElement } from \"react\";\nimport { Spinner } from \"../spinner\";\nimport { TableDataCell } from \"./table-data-cell\";\nimport { TableFullLengthRow } from \"./table-full-length-row\";\nimport { MinRecordItem, TableColumn } from \"./table-helpers\";\n\ntype TableRowsProps<T extends MinRecordItem> = {\n  records: T[];\n  columns: TableColumn<T>[];\n  isLoading: boolean;\n  emptyMessage: string | ReactElement;\n  handleRowClick?: (record: T) => void;\n};\n\nexport const TableRows = <T extends MinRecordItem>({\n  records,\n  columns,\n  isLoading,\n  emptyMessage,\n  handleRowClick,\n}: TableRowsProps<T>) => {\n  if (isLoading) {\n    return (\n      <TableFullLengthRow colSpan={columns.length}>\n        <div className=\"ctw-flex ctw-justify-center ctw-space-x-2\">\n          <span>Loading...</span>\n          <Spinner />\n        </div>\n      </TableFullLengthRow>\n    );\n  }\n\n  if (records.length === 0) {\n    return (\n      <TableFullLengthRow colSpan={columns.length}>\n        {emptyMessage}\n      </TableFullLengthRow>\n    );\n  }\n\n  return (\n    <>\n      {records.map((record) => (\n        <tr\n          className={cx({\n            \"ctw-cursor-pointer\": typeof handleRowClick === \"function\",\n          })}\n          key={record.id}\n          onClick={() => {\n            if (handleRowClick) handleRowClick(record);\n          }}\n        >\n          {columns.map((column, index) => (\n            <TableDataCell\n              key={column.title ?? index}\n              column={column}\n              record={record}\n              index={index}\n            />\n          ))}\n        </tr>\n      ))}\n    </>\n  );\n};\n","import cx from \"classnames\";\nimport { ReactElement, useEffect, useRef, useState } from \"react\";\nimport { DEFAULT_PAGE_SIZE, Pagination } from \"../pagination/pagination\";\nimport { TableColGroup } from \"./table-colgroup\";\nimport { TableHead } from \"./table-head\";\nimport {\n  MinRecordItem,\n  sortRecords,\n  TableColumn,\n  TableSort,\n} from \"./table-helpers\";\nimport { TableRows } from \"./table-rows\";\nimport \"./table.scss\";\n\nexport type TableProps<T extends MinRecordItem> = {\n  className?: string;\n  records: T[];\n  columns: TableColumn<T>[];\n  isLoading?: boolean;\n  /** Displayed when we have 0 records. */\n  message?: string | ReactElement;\n  showTableHead?: boolean;\n  stacked?: boolean;\n  handleRowClick?: (record: T) => void;\n  sort?: TableSort;\n  onSort?: (sort: TableSort) => void;\n};\n\nexport type TableBaseProps<T extends MinRecordItem> = Omit<\n  TableProps<T>,\n  \"records\" | \"columns\"\n>;\n\nexport const Table = <T extends MinRecordItem>({\n  className,\n  columns,\n  records,\n  isLoading = false,\n  message = \"No records found\",\n  showTableHead = true,\n  stacked,\n  sort,\n  onSort,\n  handleRowClick,\n}: TableProps<T>) => {\n  const tableRef = useRef<HTMLTableElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [showLeftShadow, setShowLeftShadow] = useState(false);\n  const [showRightShadow, setShowRightShadow] = useState(false);\n  const [count, setCount] = useState(DEFAULT_PAGE_SIZE);\n\n  const sortedRecords = sortRecords(records, columns, sort);\n\n  const updateShadows = () => {\n    const container = scrollContainerRef.current;\n    const table = tableRef.current;\n    if (container && table) {\n      setShowLeftShadow(container.scrollLeft > 0);\n      const rightSide = container.scrollLeft + container.clientWidth;\n      setShowRightShadow(rightSide < table.clientWidth);\n    }\n  };\n\n  const switchSort = (newSortColumn: string) => {\n    const newState: TableSort = {\n      columnTitle: newSortColumn,\n      dir: \"asc\",\n    };\n    if (newSortColumn === sort?.columnTitle) {\n      newState.dir = sort.dir === \"asc\" ? \"desc\" : \"asc\";\n    }\n    if (onSort) onSort(newState);\n  };\n\n  useEffect(() => {\n    const container = scrollContainerRef.current;\n\n    // Update right away.\n    updateShadows();\n\n    // Update on scroll or resize events.\n    container?.addEventListener(\"scroll\", updateShadows);\n    window.addEventListener(\"resize\", updateShadows);\n\n    return () => {\n      container?.removeEventListener(\"scroll\", updateShadows);\n      window.removeEventListener(\"resize\", updateShadows);\n    };\n  }, [scrollContainerRef, isLoading]);\n\n  const hasData = !isLoading && records.length > 0;\n\n  return (\n    <div\n      className={cx(\"ctw-space-y-4\", className, {\n        \"ctw-table-stacked\": stacked,\n      })}\n    >\n      <div\n        className={cx(\"ctw-table-container\", {\n          \"ctw-table-scroll-left-shadow\": showLeftShadow,\n          \"ctw-table-scroll-right-shadow\": showRightShadow,\n        })}\n      >\n        <div className=\"ctw-scrollbar\" ref={scrollContainerRef}>\n          <table ref={tableRef}>\n            {hasData && <TableColGroup columns={columns} />}\n            {showTableHead && hasData && (\n              <TableHead columns={columns} sort={sort} onSort={switchSort} />\n            )}\n\n            <tbody>\n              <TableRows\n                records={sortedRecords.slice(0, count)}\n                handleRowClick={handleRowClick}\n                columns={columns}\n                isLoading={isLoading}\n                emptyMessage={message}\n              />\n            </tbody>\n          </table>\n        </div>\n      </div>\n      {records.length > 0 && !isLoading && (\n        <Pagination\n          total={records.length}\n          count={count}\n          changeCount={setCount}\n        />\n      )}\n    </div>\n  );\n};\n"],"names":["ChevronDownIcon","props","svgRef","React.createElement","ForwardRef","React.forwardRef","ChevronDownIcon$1","ChevronUpIcon","ChevronUpIcon$1","DEFAULT_PAGE_SIZE","Pagination","total","count","changeCount","allShown","hasPages","React","TableColGroup","columns","column","index","_a","SortChevron","sortOrder","sharedClasses","activeClasses","cx","TableHead","sort","onSort","sortRecords","records","sortColumn","sortFn","a","b","dir","alphaSortBlankLast","TableDataCell","record","value","TableFullLengthRow","children","colSpan","TableRows","isLoading","emptyMessage","handleRowClick","Spinner","Table","className","message","showTableHead","stacked","tableRef","useRef","scrollContainerRef","showLeftShadow","setShowLeftShadow","useState","showRightShadow","setShowRightShadow","setCount","sortedRecords","updateShadows","container","table","rightSide","switchSort","newSortColumn","newState","useEffect","hasData"],"mappings":"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"}