import{l as Z}from"./index-87936114.js";const N={resourceType:"Binary",id:"04ffee0b-0184-4916-a841-a5345973708a",meta:{extension:[{url:"https://zusapi.com/created-at",valueInstant:"2022-11-10T15:43:48.869+00:00"}],versionId:"1",lastUpdated:"2022-11-10T15:43:48.887+00:00",source:"#BLuW71jcCo5yhhdZ",tag:[{system:"https://zusapi.com/accesscontrol/owner",code:"builder/286e696b-9b74-476f-99ad-00a2800770ca",display:"Better Health"}]},contentType:"application/xml",securityContext:{reference:"DocumentReference/38d281d3-8987-4a13-a71a-2e18ef815ba8",type:"DocumentReference",display:"Continuity of Care Document"},data:"<?xml version="1.0" encoding="UTF-8"?>
<!-- Continuity of Care Document (CCD) (V3) IGpg115 -->
<ClinicalDocument xmlns="urn:hl7-org:v3" xmlns:sdtc="urn:hl7-org:sdtc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <realmCode code="US"/>
  <typeId root="2.16.840.1.113883.1.3" extension="POCD_HD000040"/>
  <templateId root="2.16.840.1.113883.10.20.22.1.1"/>
  <templateId root="2.16.840.1.113883.10.20.22.1.1" extension="2015-08-01"/>
  <templateId root="2.16.840.1.113883.10.20.22.1.2"/>
  <templateId root="2.16.840.1.113883.10.20.22.1.2" extension="2015-08-01"/>
  <id extension="3055" root="2.16.840.1.113883.1.3237.7"/>
  <code code="34133-9" displayName="Summarization of Episode Note" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
  <title>Continuity of Care Document</title>
  <effectiveTime value="202107271317-0500"/>
  <confidentialityCode code="N" codeSystem="2.16.840.1.113883.5.25"/>
  <languageCode code="en"/>
  <recordTarget>
    <patientRole>
      <!-- Patient Identifiers-->
      <id extension="K000030436" root="2.16.840.1.113883.1.3237.7.3.4.1"/>
      <id extension="C1-B20200511111000511" root="2.16.840.1.113883.1.3237.7"/>
      <id extension="939CB53B-444D-4694-9AD7-54484DB88CEB" root="2.16.840.1.113883.1.3237.7.2.1.3"/>
      <id extension="333-22-4444" root="2.16.840.1.113883.4.1"/>
      <!-- Patient Address -->
      <addr use="HP">
        <streetAddressLine>2798 Parsifal St NE</streetAddressLine>
        <city>ALBUQUERQUE</city>
        <state>NM</state>
        <postalCode>87112</postalCode>
        <country>US</country>
        <useablePeriod xsi:type="IVL_TS">
          <low nullFlavor="UNK"/>
          <high nullFlavor="NA"/>
        </useablePeriod>
      </addr>
      <!-- Patient Telephone/Contact Details -->
      <telecom value="tel:+1(706)999-1515"/>
      <telecom value="mailto:RBA@yahoo.com"/>
      <patient>
        <!-- Patient Name -->
        <name use="L">
          <family>Acacianna</family>
          <given>Rowena</given>
          <given>Baylie</given>
        </name>
        <!-- Administrative Gender -->
        <administrativeGenderCode code="F" displayName="Female" codeSystemName="AdministrativeGender" codeSystem="2.16.840.1.113883.5.1"/>
        <!-- Birthdate -->
        <birthTime value="19680329"/>
        <!-- Marital Status -->
        <maritalStatusCode code="S" displayName="Never Married" codeSystemName="MaritalStatus" codeSystem="2.16.840.1.113883.5.2"/>
        <!-- Religious Affiliation -->
        <religiousAffiliationCode code="1009" displayName="Baptist" codeSystemName="ReligiousAffiliation" codeSystem="2.16.840.1.113883.5.1076"/>
        <!-- Patient Race -->
        <raceCode code="2106-3" displayName="White" codeSystemName="Race &amp; Ethnicity - CDC" codeSystem="Race &amp; Ethnicity - CDC"/>
        <!-- Patient Ethnicity -->
        <ethnicGroupCode code="2186-5" displayName="Not Hispanic or Latino" codeSystemName="Race &amp; Ethnicity - CDC" codeSystem="Race &amp; Ethnicity - CDC"/>
        <!-- Detailed Ethnicity -->
        <sdtc:ethnicGroupCode nullFlavor="UNK"/>
        <!-- Place of birth -->
        <birthplace>
          <place>
            <addr nullFlavor="UNK"/>
          </place>
        </birthplace>
        <languageCommunication>
          <languageCode code="eng"/>
          <!-- "Patient's preferred language" -->
          <preferenceInd value="true"/>
        </languageCommunication>
      </patient>
      <!-- Provider Organization -->
      <providerOrganization>
        <id extension="1952359986" root="2.16.840.1.113883.4.6"/>
        <id extension="1952359986" root="2.16.840.1.113883.4.6"/>
        <name nullFlavor="UNK"/>
        <telecom nullFlavor="UNK"/>
        <addr>
          <streetAddressLine nullFlavor="UNK"/>
          <city nullFlavor="UNK"/>
        </addr>
      </providerOrganization>
    </patientRole>
  </recordTarget>
  <!-- The author element represents the creator of the clinical document. The author may be a device or a person. CDA R2 requires that
author and author timestamp be asserted in the document header. From there, authorship propagates to contained sections and contained
entries, unless explicitly overridden.-->
  <author>
    <time value="20210727131857-0500"/>
    <assignedAuthor>
      <id root="2.16.840.1.113883.1.3237.7"/>
      <id nullFlavor="UNK" root="2.16.840.1.113883.4.6"/>
      <addr use="WP">
        <streetAddressLine>5602 Southwest Lee Blvd.</streetAddressLine>
        <city>Lawton</city>
        <state>OK</state>
        <postalCode>73505</postalCode>
        <country>US</country>
      </addr>
      <telecom use="WP" value="tel:+1(580)531-4766"/>
      <assignedAuthoringDevice>
        <manufacturerModelName>CPLHCI.1.N</manufacturerModelName>
        <softwareName>CPLHCI.PPTEST.N</softwareName>
      </assignedAuthoringDevice>
      <representedOrganization>
        <id root="2.16.840.1.113883.1.3237.7"/>
        <name>Southwestern Medical Center</name>
        <telecom use="WP" value="tel:+1(580)531-4766"/>
        <addr use="WP">
          <streetAddressLine>5602 Southwest Lee Blvd.</streetAddressLine>
          <city>Lawton</city>
          <state>OK</state>
          <postalCode>73505</postalCode>
          <country>US</country>
        </addr>
      </representedOrganization>
    </assignedAuthor>
  </author>
  <!-- The custodian element represents the organization that is in charge of maintaining and is entrusted with
the care of the document. -->
  <custodian>
    <assignedCustodian>
      <representedCustodianOrganization>
        <id root="2.16.840.1.113883.4.6"/>
        <name>Southwestern Medical Center</name>
        <telecom use="WP" value="tel:+1(580)531-4700"/>
        <addr use="WP">
          <streetAddressLine>5602 SW Lee Blvd</streetAddressLine>
          <city>Lawton</city>
          <state>OK</state>
          <postalCode>73505</postalCode>
          <country>US</country>
        </addr>
      </representedCustodianOrganization>
    </assignedCustodian>
  </custodian>
  <!-- The participant represents supporting entities -->
  <participant typeCode="IND">
    <associatedEntity classCode="PRS">
      <code code="FRND" displayName="Friend" codeSystemName="RoleCode" codeSystem="2.16.840.1.113883.5.111">
        <originalText>Friend</originalText>
      </code>
      <addr>
        <streetAddressLine>TEST</streetAddressLine>
        <city>ALBUQUERQUE</city>
        <state>NM</state>
        <postalCode>87112</postalCode>
      </addr>
      <telecom value="tel:+1555"/>
      <associatedPerson>
        <name>
          <family>TEST</family>
          <given>TEST</given>
        </name>
      </associatedPerson>
    </associatedEntity>
  </participant>
  <!-- The participant represents supporting entities -->
  <participant typeCode="IND">
    <!-- Indicates the start and end date of the relationship between the contact and the patient. -->
    <time>
      <low value="202006261336-0500"/>
    </time>
    <associatedEntity classCode="PRS">
      <code displayName="Primary Care Provider">
        <originalText>Primary Care Provider</originalText>
      </code>
      <addr nullFlavor="UNK"/>
      <associatedPerson>
        <name>
          <prefix qualifier="AC">MD</prefix>
          <family>CPRMC</family>
          <given>DOCTOR</given>
          <given>INPATIENT</given>
        </name>
      </associatedPerson>
    </associatedEntity>
  </participant>
  <!-- The participant represents supporting entities -->
  <participant typeCode="IND">
    <!-- Indicates the start and end date of the relationship between the contact and the patient. -->
    <time>
      <low value="202006261336-0500"/>
    </time>
    <associatedEntity classCode="PRS">
      <code displayName="Admit Provider">
        <originalText>Admit Provider</originalText>
      </code>
      <addr>
        <city>ELLENBORO</city>
        <state>NC</state>
        <postalCode>28040</postalCode>
      </addr>
      <associatedPerson>
        <name>
          <prefix qualifier="AC">MD</prefix>
          <family>Test</family>
          <given>MD</given>
          <given>Bentley</given>
        </name>
      </associatedPerson>
    </associatedEntity>
  </participant>
  <documentationOf>
    <serviceEvent classCode="PCPR">
      <!-- The effectiveTime reflects the provision of care summarized in the document. -->
      <effectiveTime>
        <low value="20200626133616-0500"/>
        <high value="202107271318-0500"/>
      </effectiveTime>
    </serviceEvent>
  </documentationOf>
  <componentOf>
    <!-- The encompassingEncounter element records the specific encounter the document is detailing-->
    <encompassingEncounter>
      <id root="2.16.840.1.113883.1.3237.7" extension="KA0000000331"/>
      <effectiveTime>
        <low value="20200626133616-0500"/>
        <high value="20210727131726-0500"/>
      </effectiveTime>
      <dischargeDispositionCode nullFlavor="UNK"/>
      <location>
        <healthCareFacility>
          <id nullFlavor="UNK"/>
          <serviceProviderOrganization>
            <name>Southwestern Medical Center-Medical Unit</name>
            <telecom nullFlavor="UNK"/>
            <addr nullFlavor="UNK"/>
          </serviceProviderOrganization>
        </healthCareFacility>
      </location>
    </encompassingEncounter>
  </componentOf>
  <component>
    <structuredBody>
      <!-- Chief Complaint and Reason for Visit Section IGpg269-->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.13"/>
          <code code="46239-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Chief Complaint and Reason for Visit"/>
          <title>Chief Complaint and Reason for Visit</title>
          <text>
            <table>
              <tbody>
                <tr>
                  <th>Chief Complaint</th>
                  <td>TEST</td>
                </tr>
              </tbody>
            </table>
          </text>
        </section>
      </component>
      <!-- Health Concern Section IGpg303-->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.58" extension="2015-08-01"/>
          <code code="75310-3" displayName="Health Concerns" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
          <title>Health Concerns</title>
          <text>
            <table>
              <thead>
                <tr>
                  <th>Concerns</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="health_concern-1">Concerns regarding medical conditions discussed with patient:  </td>
                </tr>
              </tbody>
            </table>
          </text>
          <entry>
            <!-- Health Concern Act IGpg525-->
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.132" extension="2015-08-01"/>
              <id root="1aab2a82-b0d5-4712-3d8e-0b1e663d6427"/>
              <code code="75310-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Health Concern"/>
              <statusCode code="active"/>
              <effectiveTime nullFlavor="UNK"/>
              <entryRelationship typeCode="REFR">
                <observation classCode="OBS" moodCode="EVN">
                  <!-- ** Problem Observation (V3) ** -->
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" extension="2015-08-01"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.4"/>
                  <id root="de098967-2078-4aba-927a-a96d1edaa57e"/>
                  <code code="55607006" displayName="Problem" codeSystemName="SNOMED-CT" codeSystem="2.16.840.1.113883.6.96">
                    <!-- a.	This code SHALL contain at least one [1..*] translation, which SHOULD be selected from ValueSet Problem Type (LOINC)-->
                    <translation code="75326-9" displayName="Problem" codeSystemName="LOINC" codeSystem="2.16.840.1.113883.6.1"/>
                  </code>
                  <!-- The statusCode reflects the status of the observation itself -->
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low nullFlavor="NA"/>
                  </effectiveTime>
                  <value xsi:type="CD" nullFlavor="UNK">
                    <originalText>
                      <reference value="#health_concern-1"/>
                    </originalText>
                  </value>
                </observation>
              </entryRelationship>
            </act>
          </entry>
        </section>
      </component>
      <!-- Allergies and Intolerances Section (entries required) (V3) IGpg261-->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.6.1" extension="2015-08-01"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.6.1"/>
          <code code="48765-2" displayName="Allergies, adverse reactions, alerts" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
          <title>Allergies, Adverse Reactions, Alerts</title>
          <text>No known allergies</text>
          <entry typeCode="DRIV">
            <!-- *****Allergy Concern Act template***** IGpg433 -->
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.30" extension="2015-08-01"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.30"/>
              <id root="0d7b1ea2-17b9-4b44-b8d5-16d023a20ab6"/>
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6"/>
              <statusCode code="completed"/>
              <effectiveTime>
                <low nullFlavor="NA"/>
                <high nullFlavor="NA"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ">
                <!-- ***** Allergy - Intolerance Observation (V2) IGpg856-->
                <observation classCode="OBS" moodCode="EVN" negationInd="true">
                  <templateId root="2.16.840.1.113883.10.20.22.4.7" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.7"/>
                  <id root="f9d609c1-c5ad-467e-8350-4253ad33aac6"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <!-- Observation statusCode represents the status of the act of observing -->
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low nullFlavor="NA"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="419199007" displayName="Allergy to substance" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT"/>
                  <participant typeCode="CSM">
                    <participantRole classCode="MANU">
                      <playingEntity classCode="MMAT">
                        <code nullFlavor="NA"/>
                      </playingEntity>
                    </participantRole>
                  </participant>
                </observation>
              </entryRelationship>
            </act>
          </entry>
        </section>
      </component>
      <!-- Social History Section (V3) IGpg404 -->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.17" extension="2015-08-01"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.17"/>
          <code code="29762-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Social History"/>
          <title>Social History</title>
          <text>
            <content styleCode="Bold">Smoking Status</content>
            <br/>
            <content>Unknown if ever smoked</content>
            <br/>
            <content styleCode="Bold">Additional Data</content>
            <br/>
            <table>
              <tbody>
                <tr>
                  <th>Assigned Birth Sex</th>
                  <td ID="birthsex">Female</td>
                </tr>
              </tbody>
            </table>
          </text>
          <!-- Smoking Status - Meaningful Use (V2) IGpg834 -->
          <entry>
            <observation classCode="OBS" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.78" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.78"/>
              <id root="5efbdcb0-67a3-4821-bc68-d4f11db6e04a"/>
              <code code="72166-2" codeSystem="2.16.840.1.113883.6.1" displayName="Tobacco smoking status NHIS"/>
              <statusCode code="completed"/>
              <!-- The effectiveTime reflects when the current smoking status was observed. -->
              <effectiveTime nullFlavor="UNK"/>
              <!-- The value represents the patient's smoking status currently observed. -->
              <value xsi:type="CD" code="266927001" displayName="Unknown if ever smoked" codeSystem="2.16.840.1.113883.6.96"/>
            </observation>
          </entry>
          <!-- Birth Sex Observation CDA21CCIGpg85 -->
          <entry>
            <observation classCode="OBS" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.200" extension="2016-06-01"/>
              <id root="253259ca-b0f1-4702-96ee-4a6aa6018ab7"/>
              <code code="76689-9" codeSystem="2.16.840.1.113883.6.1" displayName="Sex Assigned At Birth"/>
              <statusCode code="completed"/>
              <effectiveTime value="19680329"/>
              <value xsi:type="CD" code="F" codeSystem="2.16.840.1.113883.5.1" codeSystemName="AdministrativeGender" displayName="Female">
                <originalText>
                  <reference value="#birthsex"/>
                </originalText>
              </value>
            </observation>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <!-- Problem Section (entries required) (V3) [section: identifier urn:hl7ii:2.16.840.1.113883.10.20.22.2.5.1:2015-08-01 IGpg371-->
          <templateId root="2.16.840.1.113883.10.20.22.2.5.1" extension="2015-08-01"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.5.1"/>
          <code code="11450-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="PROBLEM LIST"/>
          <title>Problems</title>
          <text>
            <content styleCode="Bold">Active Problems</content>
            <br/>
            <table>
              <thead>
                <tr>
                  <th>Medical Problem</th>
                  <th>Onset Date</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="problem-1">COVID-19 virus infection</td>
                  <td/>
                  <td>Active</td>
                </tr>
                <tr>
                  <td ID="problem-2">Neuropathic arthritis</td>
                  <td/>
                  <td>Active</td>
                </tr>
              </tbody>
            </table>
          </text>
          <entry typeCode="DRIV">
            <!-- Problem Concern Act (V3) [act: identifier urn:hl7ii:2.16.840.1.113883.10.20.22.4.3:2015-08-01 IGpg732 -->
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" extension="2015-08-01"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.3"/>
              <id root="9f6ae5ac-2ac6-4fed-4692-75c597accf53"/>
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" displayName="Concern" codeSystemName="HL7 ActClass"/>
              <!-- The statusCode represents the need to continue tracking the problem -->
              <!-- This is of ongoing concern to the provider -->
              <statusCode code="active"/>
              <!-- "The low value represents when the problem was first recorded in the patient's chart" -->
              <effectiveTime>
                <low value="20200511111503-0500"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ">
                <!-- Problem observation (V3) observation: identifier urn:hl7ii:2.16.840.1.113883.10.20.22.4.4:2015-08-01 IGpg737-->
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" extension="2015-08-01"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.4"/>
                  <id root="43caf80b-d2cd-4d52-9ccb-4fc4d330b294"/>
                  <code code="55607006" displayName="Problem" codeSystemName="SNOMED-CT" codeSystem="2.16.840.1.113883.6.96">
                    <!-- a.	This code SHALL contain at least one [1..*] translation, which SHOULD be selected from ValueSet Problem Type (LOINC)-->
                    <translation code="75326-9" displayName="Problem" codeSystemName="LOINC" codeSystem="2.16.840.1.113883.6.1"/>
                  </code>
                  <!-- The statusCode reflects the status of the observation itself -->
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low nullFlavor="UNK"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="840539006" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="COVID-19 virus infection">
                    <originalText>
                      <reference value="#problem-1"/>
                    </originalText>
                    <translation code="U07.1" codeSystem="2.16.840.1.113883.6.90" codeSystemName="ICD10" displayName="COVID-19 virus infection"/>
                    <translation code="079.89" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD9" displayName="COVID-19 virus infection"/>
                  </value>
                </observation>
              </entryRelationship>
            </act>
          </entry>
          <entry typeCode="DRIV">
            <!-- Problem Concern Act (V3) [act: identifier urn:hl7ii:2.16.840.1.113883.10.20.22.4.3:2015-08-01 IGpg732 -->
            <act classCode="ACT" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.3" extension="2015-08-01"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.3"/>
              <id root="172f3f27-9aa2-41f5-d087-2e9434b0fb2a"/>
              <code code="CONC" codeSystem="2.16.840.1.113883.5.6" displayName="Concern" codeSystemName="HL7 ActClass"/>
              <!-- The statusCode represents the need to continue tracking the problem -->
              <!-- This is of ongoing concern to the provider -->
              <statusCode code="active"/>
              <!-- "The low value represents when the problem was first recorded in the patient's chart" -->
              <effectiveTime>
                <low value="20210518124031-0500"/>
              </effectiveTime>
              <entryRelationship typeCode="SUBJ">
                <!-- Problem observation (V3) observation: identifier urn:hl7ii:2.16.840.1.113883.10.20.22.4.4:2015-08-01 IGpg737-->
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.4" extension="2015-08-01"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.4"/>
                  <id root="578bbba4-1476-4263-bca1-121bb36e4941"/>
                  <code code="55607006" displayName="Problem" codeSystemName="SNOMED-CT" codeSystem="2.16.840.1.113883.6.96">
                    <!-- a.	This code SHALL contain at least one [1..*] translation, which SHOULD be selected from ValueSet Problem Type (LOINC)-->
                    <translation code="75326-9" displayName="Problem" codeSystemName="LOINC" codeSystem="2.16.840.1.113883.6.1"/>
                  </code>
                  <!-- The statusCode reflects the status of the observation itself -->
                  <statusCode code="completed"/>
                  <effectiveTime>
                    <low nullFlavor="UNK"/>
                  </effectiveTime>
                  <value xsi:type="CD" code="67536000" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Neuropathic arthropathy">
                    <originalText>
                      <reference value="#problem-2"/>
                    </originalText>
                    <translation code="M14.60" codeSystem="2.16.840.1.113883.6.90" codeSystemName="ICD10" displayName="Neuropathic arthropathy"/>
                    <translation code="094.0" codeSystem="2.16.840.1.113883.6.103" codeSystemName="ICD9" displayName="Neuropathic arthropathy"/>
                  </value>
                </observation>
              </entryRelationship>
            </act>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <!-- Medications section IGpg338 -->
          <templateId root="2.16.840.1.113883.10.20.22.2.1.1" extension="2014-06-09"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.1.1"/>
          <code code="10160-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="History of Medication Use"/>
          <title>Medications</title>
          <text>
            <table>
              <thead>
                <tr>
                  <th>Medication</th>
                  <th>Status</th>
                  <th>Dose</th>
                  <th>Units</th>
                  <th>Route</th>
                  <th>Directions</th>
                  <th>Qty</th>
                  <th>Days</th>
                  <th>Start Date</th>
                  <th>End Date</th>
                  <th>Instructions</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="rxmed-1">Rivaroxaban (Xarelto) 10 mg tablet</td>
                  <td>Active</td>
                  <td>10</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-1">Once</td>
                  <td>14</td>
                  <td/>
                  <td>September 22nd, 2020 7:42am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-2">Modafinil (Provigil) 200 mg tablet</td>
                  <td>Active</td>
                  <td>200</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-2">Each Morning</td>
                  <td>30</td>
                  <td/>
                  <td>September 22nd, 2020 7:43am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-3">Levetiracetam (Keppra) 500 mg tablet</td>
                  <td>Active</td>
                  <td>500</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-3">Two Times a Day</td>
                  <td>30</td>
                  <td/>
                  <td>September 22nd, 2020 11:04am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-4">Gabapentin</td>
                  <td>Active</td>
                  <td>300</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-4">Three Times a Day</td>
                  <td>30</td>
                  <td/>
                  <td>September 22nd, 2020 11:04am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-5">Oxycodone</td>
                  <td>Active</td>
                  <td>15</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-5">Q8H</td>
                  <td>30</td>
                  <td/>
                  <td>September 22nd, 2020 11:05am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-6">Gabapentin</td>
                  <td>Active</td>
                  <td>300</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-6">Three Times a Day</td>
                  <td>30</td>
                  <td/>
                  <td>September 22nd, 2020 11:11am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-7">Pregabalin (Lyrica) 75 mg capsule</td>
                  <td>Active</td>
                  <td>75</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-7">Three Times a Day</td>
                  <td>30</td>
                  <td/>
                  <td>May 18th, 2021 12:39pm</td>
                  <td/>
                  <td ID="rxinst-7">Take with food</td>
                </tr>
                <tr>
                  <td ID="rxmed-8">Glyburide</td>
                  <td>Discontinued</td>
                  <td>2.5</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-8">daily</td>
                  <td>30</td>
                  <td/>
                  <td>May 11th, 2020 11:43am</td>
                  <td>May 11th, 2020 1:36pm</td>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-9">Glyburide</td>
                  <td>Active</td>
                  <td>2.5</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-9">Daily</td>
                  <td/>
                  <td/>
                  <td>May 11th, 2020 1:36pm</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-10">Crutches</td>
                  <td>Active</td>
                  <td/>
                  <td/>
                  <td/>
                  <td ID="rxsig-10"/>
                  <td>1</td>
                  <td/>
                  <td>May 11th, 2020 2:43pm</td>
                  <td/>
                  <td ID="rxinst-10">As Directed</td>
                </tr>
                <tr>
                  <td ID="rxmed-11">Clopidogrel</td>
                  <td>Active</td>
                  <td>75</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-11">Daily</td>
                  <td>30</td>
                  <td/>
                  <td>May 14th, 2020 12:43pm</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-12">Prednisolone</td>
                  <td>Active</td>
                  <td>0</td>
                  <td/>
                  <td>PO</td>
                  <td ID="rxsig-12">.COMPLEX</td>
                  <td>21</td>
                  <td/>
                  <td>May 19th, 2020 2:58pm</td>
                  <td/>
                  <td ID="rxinst-12">orally per package directions</td>
                </tr>
                <tr>
                  <td ID="rxmed-13">Lisinopril</td>
                  <td>Discontinued</td>
                  <td>2.5</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-13">daily</td>
                  <td>7</td>
                  <td/>
                  <td>June 5th, 2020 10:13am</td>
                  <td>September 22nd, 2020 11:09am</td>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-14">Hydrocodone-Acetaminophen</td>
                  <td>Active</td>
                  <td>1</td>
                  <td>TAB</td>
                  <td>PO</td>
                  <td ID="rxsig-14">QHS</td>
                  <td>7</td>
                  <td/>
                  <td>June 5th, 2020 10:25am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-15">Rivaroxaban (Xarelto) 10 mg tablet</td>
                  <td>Active</td>
                  <td>10</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-15">daily</td>
                  <td>30</td>
                  <td/>
                  <td>June 9th, 2020 10:46am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-16">Oxycodone (Oxycontin) 10 mg tablet,oral only,ext.rel.12 hr</td>
                  <td>Active</td>
                  <td>10</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-16">Two Times a Day</td>
                  <td>14</td>
                  <td/>
                  <td>June 9th, 2020 10:47am</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td ID="rxmed-17">Hydrocodone Bitartrate</td>
                  <td>Active</td>
                  <td>20</td>
                  <td>MG</td>
                  <td>PO</td>
                  <td ID="rxsig-17">Q12H</td>
                  <td>1</td>
                  <td/>
                  <td>June 9th, 2020 3:55pm</td>
                  <td/>
                  <td ID="rxinst-17">TESTING EPCS</td>
                </tr>
                <tr>
                  <td ID="rxmed-18">Oxycodone-Acetaminophen (Percocet) 10-325 mg tablet</td>
                  <td>Active</td>
                  <td>1</td>
                  <td>TAB</td>
                  <td>PO</td>
                  <td ID="rxsig-18">Three Times a Day</td>
                  <td>1</td>
                  <td/>
                  <td>June 9th, 2020 4:00pm</td>
                  <td/>
                  <td ID="rxinst-18">TESTING EPCS</td>
                </tr>
              </tbody>
            </table>
          </text>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="82a80383-1d86-4560-cf92-e78481a7bf1b"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200922074257-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="10" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="1a85365f-7227-4018-a62d-0643480ac723"/>
                  <manufacturedMaterial>
                    <code code="1114198" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Rivaroxaban">
                      <originalText>
                        <reference value="#rxmed-1"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="6a936da7-7796-4b28-9859-768d1835ace3"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="14"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="c1aba0bc-b580-4903-beb0-b1536bbebff5"/>
                      <manufacturedMaterial>
                        <code code="1114198" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Rivaroxaban"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-1"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="a4a8e806-7e46-4cd2-49a1-7b3354c5b38a"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200922074328-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="200" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="ea90a840-9800-4e49-bd10-35483c03dddd"/>
                  <manufacturedMaterial>
                    <code code="205324" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Modafinil">
                      <originalText>
                        <reference value="#rxmed-2"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="2c305e41-2e1b-4359-929f-f4937baf5ae5"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="b4a2d617-f78e-4f92-a7fa-070ecba3b1b5"/>
                      <manufacturedMaterial>
                        <code code="205324" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Modafinil"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-2"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="f5db49a8-1f16-4d0c-0ea9-af6af9efa099"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200922110417-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="500" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="1764bc2f-8856-479e-84e7-5c5a0e3b25d9"/>
                  <manufacturedMaterial>
                    <code code="311289" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Levetiracetam">
                      <originalText>
                        <reference value="#rxmed-3"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="c71ce85a-637b-4ddb-a33d-bd20d1363db0"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="a6cf892f-7bf2-4029-9d21-c062e595c858"/>
                      <manufacturedMaterial>
                        <code code="311289" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Levetiracetam"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-3"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="e92ec624-a8b2-4821-d3b4-e5bc8266468b"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200922110444-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="300" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="e3bf88c0-ac2f-4baf-ab02-446b28c2ebf2"/>
                  <manufacturedMaterial>
                    <code code="310431" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Gabapentin">
                      <originalText>
                        <reference value="#rxmed-4"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="d3460cd2-a4e0-42b1-a0ef-0a203eb82950"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="ec5bd4a6-c36e-4531-9af3-06ac7c8acf81"/>
                      <manufacturedMaterial>
                        <code code="310431" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Gabapentin"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-4"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="81c382a7-79f8-462a-168f-de6135b009c0"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200922110506-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="15" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="f0507de0-02ba-42bc-87be-06b266c970fa"/>
                  <manufacturedMaterial>
                    <code code="1049611" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Oxycodone">
                      <originalText>
                        <reference value="#rxmed-5"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="d8d69a91-8fdf-45b7-bc4b-49b90772a08b"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="adab4f3e-a494-439c-a877-2a97d27bcfd3"/>
                      <manufacturedMaterial>
                        <code code="1049611" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Oxycodone"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-5"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
              <!-- Precondition - medication is to be administered only when the associated criteria are met -->
              <precondition typeCode="PRCN">
                <!-- Precondition for Substance Administration (V2) IGpg717 -->
                <criterion>
                  <templateId root="2.16.840.1.113883.10.20.22.4.25" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.25"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <text>pain</text>
                  <value xsi:type="CD" nullFlavor="NI"/>
                </criterion>
              </precondition>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="453b45aa-05e5-42cb-0283-92df6c3fcedb"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200922111110-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="300" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="b8064791-57b4-438d-9598-ae405a0bd4eb"/>
                  <manufacturedMaterial>
                    <code code="310431" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Gabapentin">
                      <originalText>
                        <reference value="#rxmed-6"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="63caa407-a9b6-4407-962e-615016328468"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="b5b3fd97-d2a7-484f-9fd7-0896acde08d5"/>
                      <manufacturedMaterial>
                        <code code="310431" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Gabapentin"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-6"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="685c5c8f-6075-4525-b591-64a7700b37a6"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20210518123905-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="75" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="a6672d3b-0fbf-4496-b294-fe3c88df6178"/>
                  <manufacturedMaterial>
                    <code code="483450" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Pregabalin">
                      <originalText>
                        <reference value="#rxmed-7"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Instructions IGpg573-->
              <entryRelationship typeCode="SUBJ" inversionInd="true">
                <act classCode="ACT" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.20" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.20"/>
                  <code code="967006" codeSystem="2.16.840.1.113883.6.96" displayName="Medication education"/>
                  <text>
                    <reference value="#rxinst-7"/>
                  </text>
                  <statusCode code="completed"/>
                </act>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="7b3853c2-07b6-4606-8d22-19f44256ad7d"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="7bdcf2fb-97b8-4150-8d61-baeca51fe7c1"/>
                      <manufacturedMaterial>
                        <code code="483450" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Pregabalin"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-7"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="50c67d9f-209f-4b13-598d-deae2fd3da29"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200511114341-0500"/>
                <high value="20200511133600-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="2.5" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="d918b608-5348-4a25-830d-e37a52a03124"/>
                  <manufacturedMaterial>
                    <code code="310534" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Glyburide">
                      <originalText>
                        <reference value="#rxmed-8"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="bedeec3d-7bb2-4448-878e-6f01d1182dd3"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="2b2137ac-2ae0-472d-bb55-ebeaddca158d"/>
                      <manufacturedMaterial>
                        <code code="310534" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Glyburide"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-8"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="5e2bface-3233-4e44-4dbd-c794f203fcb8"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200511133608-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="2.5" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="1e794cac-6e7a-4fb4-baf7-fd0e14b2e6d0"/>
                  <manufacturedMaterial>
                    <code code="310534" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Glyburide">
                      <originalText>
                        <reference value="#rxmed-9"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="85a4db6d-7815-4ace-9ae5-341af3813ea6"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="d3d60b13-3b3c-4100-942c-940e5c8570e4"/>
                      <manufacturedMaterial>
                        <code code="310534" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Glyburide"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-9"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="3265cdf3-6bdd-4791-7e86-8c09f4fbcd3e"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200511144344-0500"/>
              </effectiveTime>
              <routeCode nullFlavor="UNK"/>
              <doseQuantity nullFlavor="NI"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="669466b2-c151-4f14-babe-971c5d548a4d"/>
                  <manufacturedMaterial>
                    <code nullFlavor="UNK">
                      <originalText>
                        <reference value="#rxmed-10"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Instructions IGpg573-->
              <entryRelationship typeCode="SUBJ" inversionInd="true">
                <act classCode="ACT" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.20" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.20"/>
                  <code code="967006" codeSystem="2.16.840.1.113883.6.96" displayName="Medication education"/>
                  <text>
                    <reference value="#rxinst-10"/>
                  </text>
                  <statusCode code="completed"/>
                </act>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="70618835-9f40-41cf-bd75-bfbb874cc2e4"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="1"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="f25cee03-5cd8-4391-ac37-2fac123b3624"/>
                      <manufacturedMaterial>
                        <code nullFlavor="UNK"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-10"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="e23c04df-16dd-4f60-9298-d948870e0605"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200514124310-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="75" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="4523c3b7-1373-4ae7-a140-4729c906f1e9"/>
                  <manufacturedMaterial>
                    <code code="309362" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Clopidogrel">
                      <originalText>
                        <reference value="#rxmed-11"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="d7a713e5-12ed-4336-a89c-b3da4702f636"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="4ce5b629-39b3-4b6e-8ae1-7311fa5156cf"/>
                      <manufacturedMaterial>
                        <code code="309362" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Clopidogrel"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-11"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="ab88dcd7-434f-4e30-9894-68ff6ca3fbe4"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200519145831-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="0"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="cd5ac539-cf0c-4135-a5fa-58bea6e2c604"/>
                  <manufacturedMaterial>
                    <code code="1013114" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Prednisolone">
                      <originalText>
                        <reference value="#rxmed-12"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Instructions IGpg573-->
              <entryRelationship typeCode="SUBJ" inversionInd="true">
                <act classCode="ACT" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.20" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.20"/>
                  <code code="967006" codeSystem="2.16.840.1.113883.6.96" displayName="Medication education"/>
                  <text>
                    <reference value="#rxinst-12"/>
                  </text>
                  <statusCode code="completed"/>
                </act>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="f51a350c-08a7-4674-bdb9-85e7b134de39"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="21"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="268070a8-2eac-4632-93d0-a10ea489c71e"/>
                      <manufacturedMaterial>
                        <code code="1013114" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Prednisolone"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-12"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="7fa13921-4673-4339-54a9-2b1d59c2f8c2"/>
              <statusCode code="completed"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200605101358-0500"/>
                <high value="20200922110959-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="2.5" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="4e6633c8-fb50-4f27-b44d-fcb44f5aedd1"/>
                  <manufacturedMaterial>
                    <code code="311353" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Lisinopril">
                      <originalText>
                        <reference value="#rxmed-13"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="d2bd066f-32ae-4bad-b904-77faabdfd50f"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="7"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="a0fdb1fd-ea80-4922-94e0-5324b30ba436"/>
                      <manufacturedMaterial>
                        <code code="311353" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Lisinopril"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-13"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="01e2d5c2-80f8-4111-35a6-ef773fcaf03e"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200605102552-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="1" unit="TAB"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="eecee06f-99a7-4fd3-85dc-29ae4ee3171d"/>
                  <manufacturedMaterial>
                    <code code="857005" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Hydrocodone-Acetaminophen">
                      <originalText>
                        <reference value="#rxmed-14"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="0d149a1e-d101-4c9d-8da6-b3d5610e28f8"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="7"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="590dadec-0596-40d3-8628-95ebf0ac9c69"/>
                      <manufacturedMaterial>
                        <code code="857005" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Hydrocodone-Acetaminophen"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-14"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
              <!-- Precondition - medication is to be administered only when the associated criteria are met -->
              <precondition typeCode="PRCN">
                <!-- Precondition for Substance Administration (V2) IGpg717 -->
                <criterion>
                  <templateId root="2.16.840.1.113883.10.20.22.4.25" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.25"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <text>pain</text>
                  <value xsi:type="CD" nullFlavor="NI"/>
                </criterion>
              </precondition>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="2961ed86-1df4-4dc0-4799-28e7f7ae85d7"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200609104648-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="10" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="f5083054-e13e-4be9-9d61-8946b8cabc2e"/>
                  <manufacturedMaterial>
                    <code code="1114198" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Rivaroxaban">
                      <originalText>
                        <reference value="#rxmed-15"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="dd6586a3-b45e-4a49-a6f4-a7ae7af12758"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="30"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="fc1aece8-82a9-4d1f-aea1-b1d886dd0832"/>
                      <manufacturedMaterial>
                        <code code="1114198" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Rivaroxaban"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-15"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="fea91c61-337a-4f2e-0f80-7464cd24bd5d"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200609104718-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="10" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="75e5e526-c504-4a0d-afd5-26c80d70cd80"/>
                  <manufacturedMaterial>
                    <code code="1049504" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Oxycodone">
                      <originalText>
                        <reference value="#rxmed-16"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="c3904e62-2401-4a6c-b357-3e63742b7615"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="14"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="b0226295-2d18-40e4-a668-5d5b0ca4f346"/>
                      <manufacturedMaterial>
                        <code code="1049504" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Oxycodone"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-16"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="758a9116-3618-475d-1383-d22ed9bf31db"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200609155533-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="20" unit="MG"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="7643872b-fd6a-4737-a343-c3fff303ad37"/>
                  <manufacturedMaterial>
                    <code code="1860495" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Hydrocodone Bitartrate">
                      <originalText>
                        <reference value="#rxmed-17"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Instructions IGpg573-->
              <entryRelationship typeCode="SUBJ" inversionInd="true">
                <act classCode="ACT" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.20" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.20"/>
                  <code code="967006" codeSystem="2.16.840.1.113883.6.96" displayName="Medication education"/>
                  <text>
                    <reference value="#rxinst-17"/>
                  </text>
                  <statusCode code="completed"/>
                </act>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="f0174f4b-c7b3-4a1e-a676-fbc9f16fda8a"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="1"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="98127d8a-a49c-462b-b0c5-48be36ad5726"/>
                      <manufacturedMaterial>
                        <code code="1860495" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Hydrocodone Bitartrate"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-17"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
            </substanceAdministration>
          </entry>
          <entry typeCode="DRIV">
            <substanceAdministration classCode="SBADM" moodCode="EVN">
              <!-- Medication Activity (V2) IGpg589 -->
              <templateId root="2.16.840.1.113883.10.20.22.4.16" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.16"/>
              <id root="c19d2b6d-0c69-4ff7-da8f-b01c8c522c3e"/>
              <statusCode code="active"/>
              <effectiveTime xsi:type="IVL_TS">
                <low value="20200609160021-0500"/>
              </effectiveTime>
              <routeCode code="C38288" displayName="[Multiple Names On File]" codeSystemName="NCI Thesaurus" codeSystem="NCI Thesaurus"/>
              <doseQuantity value="1" unit="TAB"/>
              <consumable>
                <!-- Medication Information (V2) IGpg604 -->
                <manufacturedProduct classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                  <id root="375b128c-56a7-41d3-97b0-288ca93184a0"/>
                  <manufacturedMaterial>
                    <code code="1049214" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Oxycodone-Acetaminophen">
                      <originalText>
                        <reference value="#rxmed-18"/>
                      </originalText>
                    </code>
                  </manufacturedMaterial>
                  <manufacturerOrganization>
                    <name nullFlavor="UNK"/>
                  </manufacturerOrganization>
                </manufacturedProduct>
              </consumable>
              <!-- Drug vehicle IGpg478-->
              <participant typeCode="CSM">
                <participantRole classCode="MANU">
                  <templateId root="2.16.840.1.113883.10.20.22.4.24"/>
                  <code code="412307009" displayName="Drug vehicle" codeSystem="2.16.840.1.113883.6.96"/>
                  <playingEntity classCode="MMAT">
                    <code nullFlavor="UNK"/>
                    <name/>
                  </playingEntity>
                </participantRole>
              </participant>
              <!-- Indication - Reason for medication IGpg570 -->
              <entryRelationship typeCode="RSON">
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.19" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.19"/>
                  <id nullFlavor="NA"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <statusCode code="completed"/>
                  <value xsi:type="CD" nullFlavor="UNK"/>
                </observation>
              </entryRelationship>
              <!-- Instructions IGpg573-->
              <entryRelationship typeCode="SUBJ" inversionInd="true">
                <act classCode="ACT" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.20" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.20"/>
                  <code code="967006" codeSystem="2.16.840.1.113883.6.96" displayName="Medication education"/>
                  <text>
                    <reference value="#rxinst-18"/>
                  </text>
                  <statusCode code="completed"/>
                </act>
              </entryRelationship>
              <!-- Medication Supply Order (V2) IGPG608 -->
              <entryRelationship typeCode="REFR">
                <supply classCode="SPLY" moodCode="INT">
                  <templateId root="2.16.840.1.113883.10.20.22.4.17" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.17"/>
                  <id root="f0efe62c-f15b-4ff2-b965-f866eee0e172"/>
                  <statusCode code="completed"/>
                  <effectiveTime xsi:type="IVL_TS">
                    <high nullFlavor="UNK"/>
                  </effectiveTime>
                  <repeatNumber value="0"/>
                  <quantity value="1"/>
                  <product>
                    <!-- Medication Information (V2) IGpg604 -->
                    <manufacturedProduct classCode="MANU">
                      <templateId root="2.16.840.1.113883.10.20.22.4.23" extension="2014-06-09"/>
                      <templateId root="2.16.840.1.113883.10.20.22.4.23"/>
                      <id root="a6b2f3fe-e4cd-44b4-b7d1-ff2d95f8a010"/>
                      <manufacturedMaterial>
                        <code code="1049214" codeSystem="2.16.840.1.113883.6.88" codeSystemName="RxNorm" displayName="Oxycodone-Acetaminophen"/>
                      </manufacturedMaterial>
                      <manufacturerOrganization>
                        <name nullFlavor="UNK"/>
                      </manufacturerOrganization>
                    </manufacturedProduct>
                  </product>
                </supply>
              </entryRelationship>
              <entryRelationship typeCode="COMP">
                <!-- Medication Free Text Sig IGpg602 -->
                <substanceAdministration classCode="SBADM" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.147"/>
                  <code code="76662-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Medication Instructions"/>
                  <text>
                    <reference value="#rxsig-18"/>
                  </text>
                  <consumable>
                    <manufacturedProduct>
                      <manufacturedLabeledDrug nullFlavor="NA"/>
                    </manufacturedProduct>
                  </consumable>
                </substanceAdministration>
              </entryRelationship>
              <!-- Precondition - medication is to be administered only when the associated criteria are met -->
              <precondition typeCode="PRCN">
                <!-- Precondition for Substance Administration (V2) IGpg717 -->
                <criterion>
                  <templateId root="2.16.840.1.113883.10.20.22.4.25" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.25"/>
                  <code code="ASSERTION" codeSystem="2.16.840.1.113883.5.4"/>
                  <text>pain</text>
                  <value xsi:type="CD" nullFlavor="NI"/>
                </criterion>
              </precondition>
            </substanceAdministration>
          </entry>
        </section>
      </component>
      <!-- Immunizations section IGpg320 -->
      <component>
        <section nullFlavor="NI">
          <templateId root="2.16.840.1.113883.10.20.22.2.2.1" extension="2014-06-09"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.2.1"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.2"/>
          <code code="11369-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="History of immunizations"/>
          <title>Immunizations</title>
          <text>No immunization information available</text>
        </section>
      </component>
      <!-- Medical equipment section CG21pg167-->
      <component>
        <section nullFlavor="NI">
          <templateId root="2.16.840.1.113883.10.20.22.2.23" extension="2014-06-09"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.23"/>
          <code code="46264-8" codeSystem="2.16.840.1.113883.6.1"/>
          <title>Medical Equipment</title>
          <text>No implantable device information available</text>
        </section>
      </component>
      <!-- Procedures Section (entries required) (V2) section: identifier urn:hl7ii:2.16.840.1.113883.10.20.22.2.7.1:2014-06-09 IGpg389-->
      <component>
        <section nullFlavor="NI">
          <templateId root="2.16.840.1.113883.10.20.22.2.7" extension="2014-06-09"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.7.1" extension="2014-06-09"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.7.1"/>
          <code code="47519-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="PROCEDURES"/>
          <title>Procedures</title>
          <text>No procedure information available</text>
        </section>
      </component>
      <!-- Results Section (entries required) (V3) IGpg 398 -->
      <component>
        <section nullFlavor="NI">
          <templateId root="2.16.840.1.113883.10.20.22.2.3.1" extension="2015-08-01"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.3.1"/>
          <code code="30954-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="2.16.840.1.113883.6.1" displayName="RELEVANT DIAGNOSTIC TESTS AND/OR LABORATORY DATA"/>
          <title>Relevant Diagnostic Tests and/or Laboratory Data</title>
          <text>No known relevant diagnostic tests and/or laboratory data.</text>
        </section>
      </component>
      <!-- Vital Signs Section (entries required) (V3) IGpg412 -->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.4.1" extension="2015-08-01"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.4.1"/>
          <code code="8716-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="VITAL SIGNS"/>
          <title>Vital Signs</title>
          <text>
            <table>
              <thead>
                <tr>
                  <th>Vital Reading</th>
                  <th>Result</th>
                  <th>Reference Range</th>
                  <th>Collection Date/Time</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Height</td>
                  <td ID="vitalSign-1.1">66 [in_i]</td>
                  <td/>
                  <td>June 26th, 2020 1:52pm</td>
                </tr>
                <tr>
                  <td>Weight</td>
                  <td ID="vitalSign-1.2">180.00 [lb_av]</td>
                  <td/>
                  <td>June 26th, 2020 1:52pm</td>
                </tr>
              </tbody>
            </table>
          </text>
          <!-- ** Vital signs organizer (V3) ** IGpg873-->
          <entry typeCode="DRIV">
            <organizer classCode="CLUSTER" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.26" extension="2015-08-01"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.26"/>
              <id root="1fe10cad-bfd2-423a-bb20-1544efc2bd64"/>
              <code code="46680005" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Vital signs">
                <translation code="74728-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Vital signs"/>
              </code>
              <statusCode code="completed"/>
              <effectiveTime>
                <low value="20200626133616-0500"/>
                <high value="20210727131726-0500"/>
              </effectiveTime>
              <!-- ** Vital sign observation (V2) IGpg869 -->
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.27"/>
                  <id root="01ab5a6c-fa6c-457c-7299-9ce868ab72f2"/>
                  <code code="8302-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Height"/>
                  <text>
                    <reference value="#vitalSign-1.1"/>
                  </text>
                  <statusCode code="completed"/>
                  <effectiveTime value="202006261352-0500"/>
                  <value xsi:type="PQ" value="66" unit="[in_i]"/>
                </observation>
              </component>
              <!-- ** Vital sign observation (V2) IGpg869 -->
              <component>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.27" extension="2014-06-09"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.27"/>
                  <id root="c7aa3def-7eab-43c4-1a9e-9cf98d0cbfa4"/>
                  <code code="29463-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Weight"/>
                  <text>
                    <reference value="#vitalSign-1.2"/>
                  </text>
                  <statusCode code="completed"/>
                  <effectiveTime value="202006261352-0500"/>
                  <value xsi:type="PQ" value="180.00" unit="[lb_av]"/>
                </observation>
              </component>
            </organizer>
          </entry>
        </section>
      </component>
      <component>
        <section>
          <!-- Payers section IGpg352 -->
          <templateId root="2.16.840.1.113883.10.20.22.2.18" extension="2015-08-01"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.18"/>
          <code code="48768-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Payer"/>
          <title>Insurance Providers</title>
          <text>
            <table>
              <tbody>
                <tr>
                  <th>Guarantor</th>
                  <td>Rowena Baylie Acacianna</td>
                </tr>
                <tr>
                  <th>Address</th>
                  <td>2798 Parsifal St NE<br/>ALBUQUERQUE NM 87112</td>
                </tr>
                <tr>
                  <th>Contact Info.</th>
                  <td>Home Phone: +1(706)999-1515</td>
                </tr>
              </tbody>
            </table>
            <br/>
            <table>
              <thead>
                <tr>
                  <th>Payer</th>
                  <th>Policy Id</th>
                  <th>Coverage Id</th>
                  <th>Subscriber's Name</th>
                  <th>Subscriber Id</th>
                  <th>Effective Date</th>
                  <th>Expiration Date</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="payer-1">System Assigned Code</td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
              </tbody>
            </table>
          </text>
          <entry typeCode="DRIV">
            <act classCode="ACT" moodCode="EVN">
              <!-- Coverage activity IGpg462-->
              <templateId root="2.16.840.1.113883.10.20.22.4.60" extension="2015-08-01"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.60"/>
              <id root="b7408a71-6475-4332-8995-5e7c317216a8"/>
              <code code="48768-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Payment sources"/>
              <statusCode code="completed"/>
              <entryRelationship typeCode="COMP">
                <!-- Policy activity IGpg704-->
                <act classCode="ACT" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.10.20.22.4.61" extension="2015-08-01"/>
                  <templateId root="2.16.840.1.113883.10.20.22.4.61"/>
                  <id nullFlavor="UNK"/>
                  <code nullFlavor="UNK">
                    <translation nullFlavor="UNK"/>
                  </code>
                  <statusCode code="completed"/>
                  <!-- Insurance Company Information (Payer) -->
                  <performer typeCode="PRF">
                    <templateId root="2.16.840.1.113883.10.20.22.4.87"/>
                    <assignedEntity>
                      <id nullFlavor="UNK"/>
                      <code code="PAYOR" codeSystem="2.16.840.1.113883.5.110" codeSystemName="HL7 RoleCode"/>
                      <representedOrganization>
                        <name>System Assigned Code</name>
                      </representedOrganization>
                    </assignedEntity>
                  </performer>
                  <!-- Guarantor Information -->
                  <performer typeCode="PRF">
                    <templateId root="2.16.840.1.113883.10.20.22.4.88"/>
                    <assignedEntity>
                      <id nullFlavor="NA"/>
                      <code code="GUAR" codeSystem="2.16.840.1.113883.5.110" codeSystemName="HL7 RoleCode"/>
                      <addr>
                        <streetAddressLine>2798 Parsifal St NE</streetAddressLine>
                        <city>ALBUQUERQUE</city>
                        <state>NM</state>
                        <postalCode>87112</postalCode>
                      </addr>
                      <telecom use="HP" value="tel:+1(706)999-1515"/>
                      <assignedPerson>
                        <name>
                          <family>Acacianna</family>
                          <given>Rowena</given>
                          <given>Baylie</given>
                        </name>
                      </assignedPerson>
                    </assignedEntity>
                  </performer>
                  <!-- Covered Party Participant -->
                  <participant typeCode="COV">
                    <templateId root="2.16.840.1.113883.10.20.22.4.89"/>
                    <time>
                      <low nullFlavor="UNK"/>
                      <high nullFlavor="UNK"/>
                    </time>
                    <participantRole classCode="PAT">
                      <!-- Health plan ID for patient. -->
                      <id root="9e27a5b4-67b6-4477-988d-de8780d6040c"/>
                      <code nullFlavor="UNK"/>
                      <addr>
                        <streetAddressLine>2798 Parsifal St NE</streetAddressLine>
                        <city>ALBUQUERQUE</city>
                        <state>NM</state>
                        <postalCode>87112</postalCode>
                      </addr>
                      <telecom use="HP" value="tel:+1(706)999-1515"/>
                      <telecom value="mailto:RBA@yahoo.com"/>
                      <playingEntity>
                        <name>
                          <family nullFlavor="UNK"/>
                          <given nullFlavor="UNK"/>
                        </name>
                        <sdtc:birthTime value="19680329"/>
                      </playingEntity>
                    </participantRole>
                  </participant>
                  <!-- Policy Holder -->
                  <participant typeCode="HLD">
                    <templateId root="2.16.840.1.113883.10.20.22.4.90"/>
                    <time>
                      <low nullFlavor="UNK"/>
                      <high nullFlavor="UNK"/>
                    </time>
                    <participantRole>
                      <id root="419194c4-b9f2-4d20-a734-a01983eb2775"/>
                      <playingEntity>
                        <name nullFlavor="UNK"/>
                      </playingEntity>
                    </participantRole>
                  </participant>
                  <entryRelationship typeCode="REFR">
                    <act classCode="ACT" moodCode="DEF">
                      <id nullFlavor="UNK"/>
                      <code nullFlavor="NA"/>
                      <text><reference value="#payer-1"/>
System Assigned Code
</text>
                    </act>
                  </entryRelationship>
                </act>
              </entryRelationship>
            </act>
          </entry>
        </section>
      </component>
      <!-- Encounters Section IGpg287-->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.22"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.22" extension="2015-08-01"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.22.1"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.22.1" extension="2015-08-01"/>
          <code code="46240-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="History of encounters"/>
          <title>Encounters</title>
          <text>
            <table>
              <thead>
                <tr>
                  <th>Encounter</th>
                  <th>Location(s)</th>
                  <th>Arrival/Admit Date</th>
                  <th>Discharge/Depart Date</th>
                  <th>Provider(s)</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td ID="encounter-1">Discharged Inpatient</td>
                  <td>Southwestern Medical Center-Medical Unit</td>
                  <td>June 26th, 2020 1:36pm</td>
                  <td>

July 27th, 2021 1:17pm

</td>
                  <td>Bentley Test , MD</td>
                </tr>
              </tbody>
            </table>
          </text>
          <!-- Encounter Activity IGpg479-->
          <entry typeCode="DRIV">
            <encounter classCode="ENC" moodCode="EVN">
              <templateId root="2.16.840.1.113883.10.20.22.4.49" extension="2015-08-01"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.49"/>
              <id root="27DB87A0-5412-4837-9980-4DC6E7330C87"/>
              <code nullFlavor="UNK">
                <originalText>
                  <reference value="#encounter-1"/>
                </originalText>
              </code>
              <effectiveTime>
                <low value="20200626133616-0500"/>
                <high value="20210727131726-0500"/>
              </effectiveTime>
              <!-- Provider Detail -->
              <performer>
                <assignedEntity>
                  <!-- Provider NPI -->
                  <id extension="8563789394" root="2.16.840.1.113883.4.6"/>
                  <code nullFlavor="UNK"/>
                </assignedEntity>
              </performer>
              <!-- Service Location -->
              <participant typeCode="LOC">
                <participantRole classCode="SDLOC">
                  <templateId root="2.16.840.1.113883.10.20.22.4.32"/>
                  <code nullFlavor="UNK"/>
                  <addr nullFlavor="UNK"/>
                  <playingEntity classCode="PLC">
                    <name>Southwestern Medical Center-Medical Unit</name>
                  </playingEntity>
                </participantRole>
              </participant>
            </encounter>
          </entry>
        </section>
      </component>
      <!-- Functional Status Section IGpg294 -->
      <component>
        <section nullFlavor="NI">
          <templateId root="2.16.840.1.113883.10.20.22.2.14" extension="2014-06-09"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.14"/>
          <code code="47420-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Functional Status"/>
          <title>Functional Status</title>
          <text>No functional status information available</text>
        </section>
      </component>
      <!-- Mental Status Section IGpg340-->
      <component>
        <section nullFlavor="NI">
          <templateId root="2.16.840.1.113883.10.20.22.2.56" extension="2015-08-01"/>
          <code code="10190-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Mental Status"/>
          <title>Mental Status</title>
          <text>No mental status information available</text>
        </section>
      </component>
      <!-- Assessment Section IGpg267-->
      <component>
        <section nullFlavor="NI">
          <templateId root="2.16.840.1.113883.10.20.22.2.8"/>
          <code codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" code="51848-0" displayName="ASSESSMENTS"/>
          <title>Assessments</title>
          <text>No assessment information available</text>
        </section>
      </component>
      <!-- Plan of Treatment Section (V2) IGpg357 -->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.10" extension="2014-06-09"/>
          <templateId root="2.16.840.1.113883.10.20.22.2.10"/>
          <code code="18776-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Treatment plan"/>
          <title>Plan of Treatment</title>
          <text><br/>Take Prescriptions as prescribed
<br/>Review patient education provided by nursing
<br/>Follow up with Referrals
<br/><content styleCode="Bold">Future Tests</content><br/>
Future scheduled test information is unavailable

<br/><content styleCode="Bold">Pending Tests</content><br/>
Pending diagnostic test information is unavailable

<br/><content styleCode="Bold">Future Visits</content><br/>
Future appointment information is unavailable

<br/><content styleCode="Bold">Referrals to Other Providers</content><br/><table><thead><tr><th>Reason for Referral</th><th>Referral Start Date</th><th>Provider</th><th>Provider Contact Information</th><th>Provider Address</th></tr></thead><tbody><tr><td ID="refToOther-1"/><td/><td>Doctor CPRMC , MD</td><td/><td/></tr></tbody></table><br/><content styleCode="Bold">Future Procedures</content><br/>
Future procedure information is unavailable

<br/><content styleCode="Bold">Future Medications</content><br/>
Future medication information is unavailable

<br/><content styleCode="Bold">Patient Instructions</content><br/>
Patient instructions are unavailable

</text>
          <!-- Planned Act (V2) IGpg650 -->
          <entry>
            <act classCode="ACT" moodCode="ARQ">
              <templateId root="2.16.840.1.113883.10.20.22.4.39" extension="2014-06-09"/>
              <templateId root="2.16.840.1.113883.10.20.22.4.39"/>
              <id root="a256bf2a-3baa-463b-89ea-4deb1dc863a7"/>
              <code code="3457005 " codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Patient referral"/>
              <statusCode code="active"/>
              <effectiveTime nullFlavor="UNK"/>
              <performer>
                <assignedEntity>
                  <id extension="8567882054" root="2.16.840.1.113883.4.6"/>
                  <code nullFlavor="UNK"/>
                  <addr nullFlavor="UNK"/>
                  <assignedPerson>
                    <name>
                      <prefix qualifier="AC">MD</prefix>
                      <family>CPRMC</family>
                      <given>Doctor</given>
                    </name>
                  </assignedPerson>
                  <representedOrganization>
                    <id nullFlavor="UNK"/>
                    <addr nullFlavor="UNK"/>
                  </representedOrganization>
                </assignedEntity>
              </performer>
            </act>
          </entry>
        </section>
      </component>
      <!-- Goals Section IGpg301 -->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.60"/>
          <code code="61146-7" displayName="Goals" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
          <title>Goals</title>
          <text>
            <table>
              <thead>
                <tr>
                  <th>Acute Goals</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Problem: Discharge from hospital.
<br/>Goal: Return to highest level of personal health.
<br/>Instructions: Follow all discharge instructions, take medications as ordered by your physician.</td>
                </tr>
              </tbody>
            </table>
            <br/>
          </text>
          <!-- Goal Observation IGpg515 -->
          <entry>
            <observation classCode="OBS" moodCode="GOL">
              <templateId root="2.16.840.1.113883.10.20.22.4.121"/>
              <id root="c9fe651c-d903-49c7-83aa-8967d593a8f1"/>
              <code nullFlavor="UNK"/>
              <statusCode code="active"/>
              <author>
                <templateId root="2.16.840.1.113883.10.20.22.4.119"/>
                <time nullFlavor="UNK"/>
                <assignedAuthor>
                  <id nullFlavor="UNK"/>
                </assignedAuthor>
              </author>
            </observation>
          </entry>
        </section>
      </component>
      <!-- Hospital Discharge Instructions Section IGpg314-->
      <component>
        <section>
          <templateId root="2.16.840.1.113883.10.20.22.2.41"/>
          <code code="8653-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="HOSPITAL DISCHARGE INSTRUCTIONS"/>
          <title>Hospital Discharge Instructions</title>
          <text><br/><content styleCode="Bold">Additional Instructions</content><br/>
Additional Instructions: [ ] 
<br/><br/>	Take Prescriptions as prescribed
<br/>	Review patient education provided by nursing
<br/>	Follow up with Referrals
<br/><br/>Contact your physician for worsening symptoms of chest pain, fever, chills, difficulty breathing, <br/>nausea, vomiting or any other concerns.


</text>
        </section>
      </component>
    </structuredBody>
  </component>
</ClinicalDocument>
"},l=(C,g,I,A)=>({toggles:[{name:C,enabled:A,variant:{name:g,payload:{type:"json",value:JSON.stringify(I)},enabled:!0}}]}),G=()=>[Z.rest.get("https://api.dev.zusapi.com/fhir/Binary/:BinaryId",async(C,g,I)=>g(I.status(200),I.json(N))),Z.rest.get("https://api.dev.zusapi.com/fqs/Binary/:BinaryId",async(C,g,I)=>g(I.status(500)))],b=C=>Z.rest.get("https://unleash-proxy-dev.zusapi.com/*",async(g,I,A)=>I(A.status(200),A.json(l("ctw-fqs","testingPurposes",{[C]:!0},!0))));export{G as a,b as m};
