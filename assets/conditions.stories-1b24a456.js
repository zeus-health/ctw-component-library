import{R as t,r as d}from"./index-6f814c40.js";import{w as u,u as l,a as ue,b as E,e as f}from"./index-f5b5f689.js";import{c as pe}from"./index-74f03c09.js";import{b as ke,D as _e,c as Ie,w as ye,g as Pe,e as Me,u as qe,d as Fe,f as De,h as Oe,i as Ve,T as Le,j as We,k as ze,m as je,n as ee,o as Ue,C as Ge,a as $e,S as Ye}from"./patient-allergies-7913bd41.js";import{u as Ze,c as _,t as Je,C as Ke,M as Xe,o as Qe,a as et,g as tt,b as te,f as nt,s as we,d as ot,p as at,e as ne}from"./requests-e9b49d79.js";import{T as it,f as st}from"./table-7a0d2d89.js";import{P as rt}from"./patient-history-request-drawer-d3f1d333.js";import"./_baseToString-5e23e5e6.js";import"./_baseClone-59dfd81b.js";import{d as ct}from"./sortBy-7530ff7d.js";import"./_equalByTag-2573c09c.js";import"./_baseForOwn-0b302854.js";import"./_createSet-00935424.js";import{h as dt}from"./request-47bfd586.js";import"./_commonjsHelpers-042e6b4d.js";import"./isEqual-1a694167.js";import"./_baseIsEqual-4482d138.js";import"./uniq-38208ea9.js";import"./_baseUniq-701deb29.js";import"./index-63320c34.js";import"./index-356e4a49.js";import"./drawer-39fcad7e.js";import"./index-6de6b113.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./mapValues-3edfa6db.js";import"./action-list-ada7e7df.js";import"./isPlainObject-d68c8411.js";import"./_basePickBy-d4bc7435.js";import"./data-list-254aa0b0.js";import"./extends-298b405d.js";import"./spinner-66aa4ba7.js";import"./isString-45b38206.js";import"./debounce-c94122dc.js";import"./toNumber-4334224f.js";import"./modal-ccda-d210e6b0.js";import"./coding-list-1d7c950f.js";function O({className:n}){return t.createElement("div",{className:pe("ctw-conditions",n)},t.createElement("div",{className:"ctw-heading-container"},t.createElement("div",{className:"ctw-title"},"Conditions")),t.createElement("div",{className:"ctw-p-5"},t.createElement(ke,{header:"Conditions Unavailable"},t.createElement("div",null,"We are unable to access Condition information for this patient."),t.createElement("div",null,"Contact your system administrator or customer service for assistance."))))}try{O.displayName="ConditionsNoPatient",O.__docgenInfo={description:"",displayName:"ConditionsNoPatient",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}function T({className:n,conditions:e,rowMenuActions:a,hideMenu:o,sort:r={columnTitle:"Last Recorded",dir:"desc"},onSort:y,...p}){const s=[{title:"Condition",dataIndex:"display",widthPercent:40,minWidth:320,sortIndices:[{index:"display"},{index:"recorded",dir:"desc"}]},{title:"Category",dataIndex:"ccsGrouping",widthPercent:25,minWidth:192,sortIndices:[{index:"ccsGrouping"},{index:"display",dir:"asc"}]},{title:"Status",render:c=>t.createElement("div",{className:"ctw-capitalize"},t.createElement("div",{className:"ctw-text-content-black"},c.clinicalStatus),t.createElement("div",null,c.isArchived?"Archived":c.verificationStatus)),widthPercent:17.5,minWidth:128,sortIndices:[{index:"clinicalStatus"},{index:"verificationStatus"},{index:"recorded",dir:"desc"}]},{title:"Last Recorded",dataIndex:"recordedDate",widthPercent:17.5,minWidth:132,sortIndices:[{index:"recorded"},{index:"display",dir:"asc"}]}];return o||s.push({className:"ctw-table-action-column",render:c=>t.createElement(_e,{menuItems:a(c),telemetryNamespace:"ConditionsTableBase"},t.createElement(Ie,{className:"ctw-w-5"}))}),t.createElement(it,{className:n,records:e,columns:s,sort:r,onSort:y,...p})}try{T.displayName="ConditionsTableBase",T.__docgenInfo={description:"",displayName:"ConditionsTableBase",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | (string & Mapping) | (string & ArgumentArray)"}},conditions:{defaultValue:null,description:"",name:"conditions",required:!0,type:{name:"ConditionModel[]"}},rowMenuActions:{defaultValue:null,description:"",name:"rowMenuActions",required:!0,type:{name:"(condition: ConditionModel) => MenuItem[]"}},hideMenu:{defaultValue:null,description:"",name:"hideMenu",required:!0,type:{name:"boolean"}},handleRowClick:{defaultValue:null,description:"",name:"handleRowClick",required:!1,type:{name:"((record: ConditionModel) => void)"}},RowActions:{defaultValue:null,description:"",name:"RowActions",required:!1,type:{name:"ComponentType<{ record: ConditionModel; }>"}},isLoading:{defaultValue:null,description:"",name:"isLoading",required:!1,type:{name:"boolean"}},emptyMessage:{defaultValue:null,description:"Displayed when we have 0 records.",name:"emptyMessage",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},showTableHead:{defaultValue:null,description:"",name:"showTableHead",required:!1,type:{name:"boolean"}},stacked:{defaultValue:null,description:"",name:"stacked",required:!1,type:{name:"boolean"}},sort:{defaultValue:{value:'{ columnTitle: "Last Recorded", dir: "desc" }'},description:"",name:"sort",required:!1,type:{name:"TableSort"}},onSort:{defaultValue:null,description:"",name:"onSort",required:!1,type:{name:"((sort: TableSort) => void)"}},hidePagination:{defaultValue:null,description:"",name:"hidePagination",required:!1,type:{name:"boolean"}}}}}catch{}const V=ye(({readOnly:n,onClick:e})=>t.createElement("div",{className:"ctw-flex ctw-justify-center ctw-space-x-2 ctw-border ctw-border-solid ctw-border-divider-light ctw-p-5","data-zus-telemetry-namespace":"PatientHistoryMessage"},n?t.createElement("span",null,"There are no condition records available."):t.createElement(t.Fragment,null,t.createElement("div",{className:"ctw-flex ctw-justify-center ctw-text-icon-default"},"Retrieve patient clinical history."),t.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link",onClick:e,"data-zus-telemetry-click":"Request records"},"Request Records"))),"PatientHistoryMessage");try{V.displayName="PatientHistoryMessage",V.__docgenInfo={description:"",displayName:"PatientHistoryMessage",props:{readOnly:{defaultValue:null,description:"",name:"readOnly",required:!0,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLButtonElement>"}}}}}catch{}async function lt(n,e){const a=`${Pe(n.env)}/patient-history/messages?patient-id=${e}`;try{const r=await(await dt(a,{headers:{Authorization:`Bearer ${n.authToken}`,...n.contextBuilderId&&{"Zus-Account":n.contextBuilderId}}})).json();return Object.values(r.data)}catch(o){throw Me("Failed fetching patient refresh history messages",o)}}async function mt(n,e){const a=await lt(n,e);if(a.length===0)return;const o=st(a,{_messages:[{status:"done"}]});return{lastRetrievedAt:o==null?void 0:o._createdAt,status:a[0].status,dateCreated:a[0]._createdAt}}const ut="There are no conditions in this patient's record.",pt="There are no conditions available.",oe="There was an error fetching conditions for this patient. Refresh the page or contact your organization's technical support if this issue persists.",L=ye(({className:n,readOnly:e=!1,hideRequestRecords:a=!1})=>{const o=d.useRef(null),r=qe(o),[y,p]=d.useState(!1),[s,c]=d.useState(!1),z=Ze(),[ve,A]=d.useState(!1),[Re,j]=d.useState([]),[fe,H]=d.useState([]),[B,he]=d.useState(!1),[U,G]=d.useState("Add"),[ge,S]=d.useState(_),[Ce,x]=d.useState(),[g,$]=d.useState(),m=Fe(),w=De(),C=Oe(),{getRequestContext:N}=Ve(),[Y,Z]=d.useState(),[k,J]=d.useState(),[yt,Ee]=d.useState(),be=w.isError?oe:ut,Be=C.isError?oe:pt,Te=i=>{m.data&&(p(!0),G("Edit"),S(et),x(tt({condition:i})),$(i))},Ae=i=>{c(!0),$(i)},He=i=>{const v=je(i.resource);m.data&&(S(_),p(!0),G("Add"),x(te({condition:new ee(v)})))},K=()=>{if(!m.data)return;const i=Ue(m.data.id);p(!0),S(_),x(te({condition:new ee(i)}))},Se=t.createElement("button",{className:"ctw-btn-primary",type:"button",onClick:K,"data-zus-telemetry-click":"Add new condition (Empty table)"},"Add Condition"),X=k||C.data&&C.data.length>0,xe=async i=>{const v=await N(),R=await mt(v,i);J(!!(R!=null&&R.lastRetrievedAt)),Ee(R)};return d.useEffect(()=>{var v;async function i(){const R=w.data,Q=C.data;R&&(j(R.filter(Ne=>Ne.active||B)),H(Q?nt(Q,R,B):[])),w.error&&(j([]),H([]))}i(),(v=m.data)!=null&&v.id&&k===void 0&&xe(m.data.id)},[B,m.data,w.data,C.data,k,w.error]),m.isError?t.createElement(O,{className:n}):t.createElement("div",{ref:o,"data-zus-telemetry-namespace":"Conditions",className:pe("ctw-conditions",n,{"ctw-conditions-stacked":r.sm})},!e&&t.createElement("div",{className:"ctw-conditions-heading-container"},t.createElement("div",{className:"ctw-title"},"Conditions"),t.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link","data-zus-telemetry-click":"Add new condition",onClick:K},"+ Add Condition")),t.createElement("div",{className:"ctw-conditions-body-container"},t.createElement("div",{className:"ctw-space-y-3"},t.createElement("div",{className:"ctw-conditions-title-container"},t.createElement("div",{className:"ctw-title"},"Patient Record"),t.createElement(Le,{onFormChange:()=>he(!B),toggleProps:{name:"conditions",text:"Include Inactive"}})),t.createElement(T,{stacked:r.sm,conditions:Re,isLoading:w.isLoading,hideMenu:e,sort:Y,onSort:i=>Z(i),emptyMessage:t.createElement(t.Fragment,null,t.createElement("div",null,be),!w.isError&&!e&&t.createElement("div",{className:"ctw-mt-5"},Se)),rowMenuActions:i=>[{name:"Edit",action:async()=>{Te(i)}},{name:"View History",action:async()=>{z({condition:i,readOnly:e})}},{name:"Delete",className:"dangerous",action:async()=>{Ae(i)}}]})),t.createElement("div",{className:"ctw-space-y-3"},t.createElement("div",{className:"ctw-conditions-title-container"},t.createElement("div",{className:"ctw-title"},"Other Provider Records"),X&&!e&&!a&&t.createElement("button",{type:"button",className:"ctw-btn-clear ctw-link",onClick:()=>A(!0),"data-zus-telemetry-click":"Request records"},"Request Records")),X?t.createElement(T,{className:"ctw-conditions-not-reviewed",stacked:r.sm,conditions:fe,sort:Y,onSort:i=>Z(i),isLoading:C.isLoading||w.isLoading,hideMenu:e,emptyMessage:Be,rowMenuActions:i=>[{name:"Add",action:async()=>{He(i)}},{name:"View History",action:async()=>{z({condition:i,readOnly:!0})}},{name:i.isArchived?"Un-Archive":"Archive",action:async()=>{const v=await N();await Je(i,v)}}]}):t.createElement(V,{readOnly:e||a,onClick:()=>A(!0)}))),m.data&&t.createElement(We,{title:`${U} Condition`,header:U==="Edit"&&g&&t.createElement(Ke,{condition:g}),action:ct(ze)(g,m.data.id),data:Ce,schema:ge,isOpen:y,onClose:()=>p(!1)}),m.data&&t.createElement(rt,{header:t.createElement("div",{className:"ctw-pt-0 ctw-text-base"},"Request patient clinical history from 70K+ providers across the nation. No changes will be made to your patient record."),patient:m.data,isOpen:ve,onClose:()=>A(!1),setClinicalHistoryExists:J}),g&&m.data&&t.createElement(Xe,{resource:g,resourceName:g.display||"unnamed condition",onClose:()=>c(!1),isOpen:s,onDelete:async()=>{const i=await N();await Qe(g.resource,i)}}))},"Conditions");try{L.displayName="Conditions",L.__docgenInfo={description:"",displayName:"Conditions",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},hideRequestRecords:{defaultValue:null,description:"",name:"hideRequestRecords",required:!1,type:{name:"boolean"}}}}}catch{}function W(n){const e=u(n),a=u(e.getByRole("dialog"));return{conditionSearch:o=>l.type(a.getByPlaceholderText("Type to search"),o),selectCondition:async o=>l.click(await a.findByRole("option",{name:o})),status:o=>l.selectOptions(a.getByTestId("form-field-status"),o),onset:o=>l.type(a.getByTestId("form-field-onset"),o),abatement:o=>l.type(a.getByTestId("form-field-abatement"),o),note:o=>l.type(a.getByTestId("form-field-note"),o),cancel:()=>l.click(a.getByRole("button",{name:"Cancel"})),save:async()=>{l.click(a.getByRole("button",{name:"Save"})),await ue(()=>e.queryByRole("dialog"))}}}function ae(n,e){const a=u(n),o=u(e);async function r(s){l.click(p(s).getByRole("button",{name:/dropdown/i})),await a.findAllByRole("menuitem")}function y(s){l.click(a.getByRole("menuitem",{name:s}))}function p(s){const c=o.getAllByRole("rowgroup")[1];return u(u(c).queryAllByRole("row")[s])}return{table:o,toHaveRowCount:async s=>{const c=o.getAllByRole("rowgroup")[1];s===0?await E(()=>f(c).toBeFalsy()):await E(()=>f(u(c).queryAllByRole("row")).toHaveLength(s))},toHaveRowWithText:(s,c)=>{p(s).getByText(c)},add:async s=>{await r(s),y("Add")},delete:async s=>{await r(s),y("Delete"),l.click(await a.findByRole("button",{name:/remove/i})),await ue(()=>a.queryByRole("dialog"))},edit:async s=>{await r(s),y("Edit")},viewHistory:async s=>{await r(s),y("View History")}}}async function b(n){const e=u(n);await E(()=>f(e.queryAllByRole("table")).toHaveLength(2));const a=e.queryAllByRole("table"),o=ae(n,a[0]),r=ae(n,a[1]);return await o.table.findAllByText("active"),await r.table.findAllByText("active"),{clickAddCondition:()=>l.click(e.getByRole("button",{name:"+ Add Condition"})),toggleInactive:()=>l.click(e.getByLabelText("Include Inactive")),patientRecord:o,otherProvider:r}}const Kt={component:L,tags:["autodocs"],argTypes:{className:{options:["Blank","Fixed Width"],control:"select",mapping:{Blank:"","Fixed Width":"ctw-m-auto ctw-max-w-[600px]"}}},args:{className:"Blank",readOnly:!1,hideRequestRecords:!1},decorators:[(n,{args:e})=>t.createElement(Ge,{env:"dev",authToken:"dummy-token",builderId:"b123"},t.createElement($e,{patientID:"u12345",systemURL:Ye},t.createElement(n,{args:e})))]},h={...we({otherConditions:ot,patientConditions:at})},I={...we({otherConditions:ne,patientConditions:ne})},P={...h,play:async({canvasElement:n})=>{const e=await b(n);await e.patientRecord.toHaveRowCount(2);const a="Heart failure (disorder)";e.clickAddCondition();const o=W(n);o.conditionSearch("heart"),await o.selectCondition(a),o.status("Active"),o.onset("2020-02-14"),await o.save(),await e.patientRecord.toHaveRowCount(3),f(await e.patientRecord.table.findByText(a)).toBeTruthy()}},M={...h,play:async({canvasElement:n})=>{const e=await b(n);await e.patientRecord.toHaveRowCount(2),await e.otherProvider.add(2),await W(n).save(),await e.patientRecord.toHaveRowCount(3),f(await e.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy()}},q={...h,play:async({canvasElement:n})=>{const e=await b(n);await e.patientRecord.toHaveRowCount(2),await e.patientRecord.edit(0);const a=W(n);a.note("hello world"),await a.save(),e.patientRecord.toHaveRowWithText(0,/confirmed/i)}},F={...h,play:async({canvasElement:n})=>{const e=await b(n);await e.patientRecord.toHaveRowCount(2),await e.patientRecord.delete(0),await e.patientRecord.toHaveRowCount(1),e.toggleInactive(),await e.patientRecord.toHaveRowCount(3),e.patientRecord.toHaveRowWithText(1,/entered-in-error/i),e.toggleInactive(),await e.patientRecord.toHaveRowCount(1)}},D={...h,play:async({canvasElement:n})=>{const e=await b(n);await e.patientRecord.toHaveRowCount(2),await e.patientRecord.viewHistory(0);const a=u(n);await E(()=>f(a.queryAllByRole("dialog")).toHaveLength(1));const o=u(a.getByRole("dialog"));f(await o.findByText(/generalized anxiety disorder/i)).toBeTruthy(),await E(()=>f(o.getAllByRole("button",{name:/details/i})).toHaveLength(3)),l.click(o.getAllByRole("button",{name:/close/i})[0])}};var ie;h.parameters={...h.parameters,storySource:{source:`{
  ...setupConditionMocks({
    otherConditions,
    patientConditions
  })
}`,...(ie=h.parameters)==null?void 0:ie.storySource}};var se;I.parameters={...I.parameters,storySource:{source:`{
  ...setupConditionMocks({
    otherConditions: emptyConditions,
    patientConditions: emptyConditions
  })
}`,...(se=I.parameters)==null?void 0:se.storySource}};var re;P.parameters={...P.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    const newCondition = "Heart failure (disorder)";
    conditions.clickAddCondition();
    const conditionForm = conditionFormDrawer(canvasElement);
    conditionForm.conditionSearch("heart");
    await conditionForm.selectCondition(newCondition);
    conditionForm.status("Active");
    conditionForm.onset("2020-02-14");
    await conditionForm.save();
    await conditions.patientRecord.toHaveRowCount(3);
    expect(await conditions.patientRecord.table.findByText(newCondition)).toBeTruthy();
  }
}`,...(re=P.parameters)==null?void 0:re.storySource}};var ce;M.parameters={...M.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.otherProvider.add(2);
    const conditionForm = conditionFormDrawer(canvasElement);
    await conditionForm.save();
    await conditions.patientRecord.toHaveRowCount(3);
    expect(await conditions.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy();
  }
}`,...(ce=M.parameters)==null?void 0:ce.storySource}};var de;q.parameters={...q.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.edit(0);
    const conditionForm = conditionFormDrawer(canvasElement);
    conditionForm.note("hello world");
    await conditionForm.save();
    conditions.patientRecord.toHaveRowWithText(0, /confirmed/i);
  }
}`,...(de=q.parameters)==null?void 0:de.storySource}};var le;F.parameters={...F.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.delete(0);
    await conditions.patientRecord.toHaveRowCount(1);
    conditions.toggleInactive();
    await conditions.patientRecord.toHaveRowCount(3);
    conditions.patientRecord.toHaveRowWithText(1, /entered-in-error/i);
    conditions.toggleInactive();
    await conditions.patientRecord.toHaveRowCount(1);
  }
}`,...(le=F.parameters)==null?void 0:le.storySource}};var me;D.parameters={...D.parameters,storySource:{source:`{
  ...Basic,
  play: async ({
    canvasElement
  }) => {
    const conditions = await conditionsObject(canvasElement);
    await conditions.patientRecord.toHaveRowCount(2);
    await conditions.patientRecord.viewHistory(0);
    const canvas = within(canvasElement);
    await waitFor(() => expect(canvas.queryAllByRole("dialog")).toHaveLength(1));
    const drawer = within(canvas.getByRole("dialog"));
    expect(await drawer.findByText(/generalized anxiety disorder/i)).toBeTruthy();
    await waitFor(() => expect(drawer.getAllByRole("button", {
      name: /details/i
    })).toHaveLength(3));
    userEvent.click(drawer.getAllByRole("button", {
      name: /close/i
    })[0]);
  }
}`,...(me=D.parameters)==null?void 0:me.storySource}};const Xt=["Basic","Empty","TestAdd","TestAddOther","TestEdit","TestDelete","TestViewHistory"];export{h as Basic,I as Empty,P as TestAdd,M as TestAddOther,F as TestDelete,q as TestEdit,D as TestViewHistory,Xt as __namedExportsOrder,Kt as default};
//# sourceMappingURL=conditions.stories-1b24a456.js.map
