var y=Object.defineProperty;var h=(e,a,t)=>a in e?y(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t;var p=(e,a,t)=>(h(e,typeof a!="symbol"?a+"":a,t),t);import{R as n,r as _}from"./index-6f814c40.js";import{c as A}from"./index-74f03c09.js";import{u as b}from"./resource-details-drawer-b03884fb.js";import{w as D}from"./error-boundary-4a876c30.js";import{T as E}from"./table-a6e3434f.js";import{f as w,a as o,m as I,F as P,c as l,w as R,s as T,Q as v}from"./patient-helper-0838fee9.js";import"./_baseToString-4993715b.js";import{o as F}from"./sortBy-df4456c4.js";import"./_baseClone-25b1595e.js";import"./sortBy-d677d734.js";import"./_equalByTag-aaf39779.js";import"./_baseForOwn-d8306f34.js";import{i as N}from"./isEqual-b08f36b0.js";import"./_createSet-12ef9b81.js";import{u as q}from"./collapsible-data-list-details-b542a54e.js";import{u as x}from"./patient-provider-d1b391ca.js";import{u as S}from"./use-breakpoints-3902bba3.js";const C=[{title:"Onset",render:e=>n.createElement("div",{className:"group-hover:ctw-underline"},e.onset)},{title:"Description",dataIndex:"display"},{title:"Type",dataIndex:"type"},{title:"Category",dataIndex:"categories"},{title:"Manifestations",dataIndex:"manifestations"}];function L(e){var a,t;return e.onsetAge?w(e.onsetAge):e.onsetDateTime?o(e.onsetDateTime):e.onsetPeriod?o(e.onsetPeriod.start):e.onsetRange?o((t=(a=e.onsetRange.low)==null?void 0:a.value)==null?void 0:t.toString()):I(e.onsetString)}class M extends P{constructor(){super(...arguments);p(this,"kind","Allergy")}get categories(){var t;return(t=this.resource.category)==null?void 0:t.join(", ")}get clinicalStatus(){return l(this.resource.clinicalStatus)}get display(){return l(this.resource.code)}get manifestations(){var s;const t=[];return(s=this.resource.reaction)==null||s.forEach(r=>r.manifestation.forEach(i=>t.push(l(i)))),t.join(", ")}get onset(){return L(this.resource)}get type(){return this.resource.type??""}}const c=e=>{const a=e.map(s=>new M(s));return q(a,(s,r)=>N(m(s),m(r)))},m=e=>[e.categories,e.clinicalStatus,e.display,e.manifestations,e.onset,e.type];try{c.displayName="applyAllergyFilters",c.__docgenInfo={description:"",displayName:"applyAllergyFilters",props:{}}}catch{}function k(e=!1){return x(v,[],R(async(a,t)=>{try{const r=(await T("AllergyIntolerance",a,{patientUPID:t.UPID})).resources;return F(c(r),"onset",["desc"])}catch{throw new Error(`Failed fetching allergies information for patient ${t.UPID}`)}},"req.patient_allergies"))}function O({className:e,enableFqs:a}){const t=_.useRef(null),s=S(t),r=k(a),i=b({header:f=>f.display,details:Q}),u=r.data??[],{isLoading:g}=r;return n.createElement("div",{className:A(e,"ctw-scrollable-pass-through-height"),ref:t,"data-zus-telemetry-namespace":"Allergies"},n.createElement("div",{className:"ctw-scrollable-pass-through-height"},n.createElement(E,{stacked:s.sm,isLoading:g,records:u,columns:C,handleRowClick:i})))}const d=D(O,"PatientAllergies"),Q=e=>[{label:"Onset",value:e.onset},{label:"Description",value:e.display},{label:"Type",value:e.type},{label:"Category",value:e.categories},{label:"Manifestations",value:e.manifestations}];try{d.displayName="PatientAllergies",d.__docgenInfo={description:"",displayName:"PatientAllergies",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},enableFqs:{defaultValue:null,description:"",name:"enableFqs",required:!1,type:{name:"boolean"}}}}}catch{}export{d as P};
