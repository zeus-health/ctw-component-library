{"version":3,"file":"patient-medications.stories-00f8ccd1.js","sources":["../../src/components/content/medications/story-helpers/medication-form-drawer.ts","../../src/components/content/medications/story-helpers/patient-medications.ts","../../src/utils/delay.ts","../../src/components/content/medications/patient-medications.stories.tsx"],"sourcesContent":["import { userEvent, within } from \"@storybook/testing-library\";\n\nexport function medicationFormDrawer(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  const drawer = within(canvas.getByRole(\"dialog\"));\n\n  return {\n    search: (search: string) =>\n      userEvent.type(drawer.getByPlaceholderText(\"Type to search\"), search),\n    selectMedication: async (name: string) =>\n      userEvent.click(await drawer.findByRole(\"option\", { name })),\n    status: (status: string) =>\n      userEvent.selectOptions(drawer.getByTestId(\"form-field-status\"), status),\n    instructions: (instructions: string) =>\n      userEvent.type(drawer.getByLabelText(\"Instructions\"), instructions),\n    cancel: () =>\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Cancel\" })),\n    save: async () => {\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Save\" }));\n    },\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport { userEvent, waitFor, within } from \"@storybook/testing-library\";\n\nexport async function medicationsTables(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  await waitFor(() => expect(canvas.queryAllByRole(\"table\")).toHaveLength(2));\n  const tables = canvas.queryAllByRole(\"table\");\n  const patientRecord = singleMedicationsTable(canvasElement, tables[0]);\n  const otherProvider = singleMedicationsTable(canvasElement, tables[1]);\n\n  return {\n    patientRecord,\n    otherProvider,\n    clickAddMedication: () =>\n      userEvent.click(canvas.getByRole(\"button\", { name: \"+ Add Medication\" })),\n  };\n}\n\nexport function singleMedicationsTable(\n  canvasElement: HTMLElement,\n  tableEl: HTMLElement\n) {\n  async function clickInRow(row: number, menuItemId: string) {\n    userEvent.hover(getRow(row));\n    userEvent.click(within(getRow(row)).getByTestId(menuItemId));\n  }\n\n  function getRow(row: number) {\n    const tbody = within(tableEl).getAllByRole(\"rowgroup\")[1];\n    return within(tbody).queryAllByRole(\"row\")[row];\n  }\n\n  return {\n    table: within(tableEl),\n    // When switching between tests, we need to wait for the\n    // mocked data to refresh/update.\n    toHaveRowCount: async (count: number) => {\n      if (count === 0) {\n        await waitFor(() => {\n          const tbody = within(tableEl).getAllByRole(\"rowgroup\")[1];\n          expect(tbody).toBeFalsy();\n        });\n      } else {\n        await waitFor(() => {\n          const tbody = within(tableEl).getAllByRole(\"rowgroup\")[1];\n          expect(within(tbody).queryAllByRole(\"row\")).toHaveLength(count);\n        });\n      }\n    },\n    toHaveRowWithText: (row: number, text: string | RegExp) =>\n      within(getRow(row)).getByText(text),\n    toHaveAnyRowWithText: async (text: string | RegExp) => {\n      const tbody = await within(tableEl).getAllByRole(\"rowgroup\")[1];\n      expect(\n        within(tbody)\n          .getAllByRole(\"row\")\n          .some((next) => !!within(next).queryByText(text))\n      ).toBeTruthy();\n    },\n    addToRecord: (row: number) => clickInRow(row, \"add-to-record\"),\n  };\n}\n","export const delay = (ms: number) =>\n  new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n","import { expect } from \"@storybook/jest\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport { setupMedicationMocks } from \"./story-helpers/mocks/requests\";\nimport { PatientMedications, PatientMedicationsProps } from \"@/components/content/medications/patient-medications\";\nimport { medicationFormDrawer } from \"@/components/content/medications/story-helpers/medication-form-drawer\";\nimport { otherProviderMedications } from \"@/components/content/medications/story-helpers/mocks/other-provider-medications\";\nimport { providerMedications } from \"@/components/content/medications/story-helpers/mocks/provider-medications\";\nimport { medicationsTables } from \"@/components/content/medications/story-helpers/patient-medications\";\nimport { CTWProvider } from \"@/components/core/providers/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/providers/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\nimport { delay } from \"@/utils/delay\";\ntype Props = PatientMedicationsProps;\nexport default ({\n  tags: [\"autodocs\"],\n  component: PatientMedications,\n  decorators: [(Story, {\n    args\n  }) => <CTWProvider env=\"dev\" authToken=\"ey.12345\" builderId=\"12345\">\n        <PatientProvider patientID=\"007\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>]\n} as Meta<Props>);\nexport const Basic: StoryObj<Props> = {\n  ...setupMedicationMocks({\n    providerMedications,\n    otherProviderMedications\n  })\n};\nexport const TestAddNewMed: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const medications = await medicationsTables(canvasElement);\n    await medications.patientRecord.toHaveRowCount(1);\n    const newMedication = \"albendazole 200 MG Oral Tablet [Albenza]\";\n    medications.clickAddMedication();\n    const addMedicationForm = medicationFormDrawer(canvasElement);\n    addMedicationForm.search(\"alb\");\n    await addMedicationForm.selectMedication(newMedication);\n    addMedicationForm.status(\"Active\");\n    addMedicationForm.instructions(\"Take 2.3 every 3.14 hours, if dose is missed spin around 4.5 times\");\n    await addMedicationForm.save();\n    await medications.patientRecord.toHaveRowCount(2);\n    expect(await medications.patientRecord.table.findByText(newMedication)).toBeTruthy();\n  }\n};\nexport const TestAddToRecord: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const medications = await medicationsTables(canvasElement);\n    await medications.patientRecord.toHaveRowCount(1);\n    await medications.otherProvider.toHaveRowCount(4);\n    let medicationName = \"3 ML insulin aspart protamine, human 70 UNT/ML / insulin aspart, human 30 UNT/ML Pen Injector [NovoLog Mix]\";\n    medications.otherProvider.toHaveRowWithText(0, medicationName);\n    await medications.otherProvider.addToRecord(0);\n    await medicationFormDrawer(canvasElement).save();\n    await medications.patientRecord.toHaveRowCount(2);\n    await medications.otherProvider.toHaveRowCount(3);\n    await medications.patientRecord.toHaveAnyRowWithText(medicationName);\n    await delay(1000);\n    medicationName = \"3 ML insulin glargine 100 UNT/ML Pen Injector [Lantus]\";\n    // Test adding a second medication from other provider records.\n    medications.otherProvider.toHaveRowWithText(0, medicationName);\n    await medications.otherProvider.addToRecord(0);\n    await medicationFormDrawer(canvasElement).save();\n    await medications.patientRecord.toHaveRowCount(3);\n    await medications.otherProvider.toHaveRowCount(2);\n    await medications.patientRecord.toHaveAnyRowWithText(medicationName);\n  }\n};\nexport const TestCancelAddNewMed: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const medications = await medicationsTables(canvasElement);\n    await medications.patientRecord.toHaveRowCount(1);\n    const newMedication = \"cabozantinib 20 MG Oral Capsule [Cometriq]\";\n    medications.clickAddMedication();\n    const addMedicationForm = medicationFormDrawer(canvasElement);\n    addMedicationForm.search(\"cab\");\n    await addMedicationForm.selectMedication(newMedication);\n    addMedicationForm.status(\"Active\");\n    await addMedicationForm.cancel();\n    await medications.patientRecord.toHaveRowCount(1);\n    expect(await medications.patientRecord.table.queryByText(newMedication)).toBeFalsy();\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  storySource: {\n    source: \"{\\n  ...setupMedicationMocks({\\n    providerMedications,\\n    otherProviderMedications\\n  })\\n}\",\n    ...Basic.parameters?.storySource\n  }\n};\nTestAddNewMed.parameters = {\n  ...TestAddNewMed.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const medications = await medicationsTables(canvasElement);\\n    await medications.patientRecord.toHaveRowCount(1);\\n    const newMedication = \\\"albendazole 200 MG Oral Tablet [Albenza]\\\";\\n    medications.clickAddMedication();\\n    const addMedicationForm = medicationFormDrawer(canvasElement);\\n    addMedicationForm.search(\\\"alb\\\");\\n    await addMedicationForm.selectMedication(newMedication);\\n    addMedicationForm.status(\\\"Active\\\");\\n    addMedicationForm.instructions(\\\"Take 2.3 every 3.14 hours, if dose is missed spin around 4.5 times\\\");\\n    await addMedicationForm.save();\\n    await medications.patientRecord.toHaveRowCount(2);\\n    expect(await medications.patientRecord.table.findByText(newMedication)).toBeTruthy();\\n  }\\n}\",\n    ...TestAddNewMed.parameters?.storySource\n  }\n};\nTestAddToRecord.parameters = {\n  ...TestAddToRecord.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const medications = await medicationsTables(canvasElement);\\n    await medications.patientRecord.toHaveRowCount(1);\\n    await medications.otherProvider.toHaveRowCount(4);\\n    let medicationName = \\\"3 ML insulin aspart protamine, human 70 UNT/ML / insulin aspart, human 30 UNT/ML Pen Injector [NovoLog Mix]\\\";\\n    medications.otherProvider.toHaveRowWithText(0, medicationName);\\n    await medications.otherProvider.addToRecord(0);\\n    await medicationFormDrawer(canvasElement).save();\\n    await medications.patientRecord.toHaveRowCount(2);\\n    await medications.otherProvider.toHaveRowCount(3);\\n    await medications.patientRecord.toHaveAnyRowWithText(medicationName);\\n    await delay(1000);\\n    medicationName = \\\"3 ML insulin glargine 100 UNT/ML Pen Injector [Lantus]\\\";\\n    // Test adding a second medication from other provider records.\\n    medications.otherProvider.toHaveRowWithText(0, medicationName);\\n    await medications.otherProvider.addToRecord(0);\\n    await medicationFormDrawer(canvasElement).save();\\n    await medications.patientRecord.toHaveRowCount(3);\\n    await medications.otherProvider.toHaveRowCount(2);\\n    await medications.patientRecord.toHaveAnyRowWithText(medicationName);\\n  }\\n}\",\n    ...TestAddToRecord.parameters?.storySource\n  }\n};\nTestCancelAddNewMed.parameters = {\n  ...TestCancelAddNewMed.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const medications = await medicationsTables(canvasElement);\\n    await medications.patientRecord.toHaveRowCount(1);\\n    const newMedication = \\\"cabozantinib 20 MG Oral Capsule [Cometriq]\\\";\\n    medications.clickAddMedication();\\n    const addMedicationForm = medicationFormDrawer(canvasElement);\\n    addMedicationForm.search(\\\"cab\\\");\\n    await addMedicationForm.selectMedication(newMedication);\\n    addMedicationForm.status(\\\"Active\\\");\\n    await addMedicationForm.cancel();\\n    await medications.patientRecord.toHaveRowCount(1);\\n    expect(await medications.patientRecord.table.queryByText(newMedication)).toBeFalsy();\\n  }\\n}\",\n    ...TestCancelAddNewMed.parameters?.storySource\n  }\n};"],"names":["medicationFormDrawer","canvasElement","canvas","within","drawer","search","userEvent","name","status","instructions","medicationsTables","waitFor","expect","tables","patientRecord","singleMedicationsTable","otherProvider","tableEl","clickInRow","row","menuItemId","getRow","tbody","count","text","next","delay","ms","resolve","patientMedications_stories","PatientMedications","Story","args","CTWProvider","React","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupMedicationMocks","providerMedications","otherProviderMedications","TestAddNewMed","medications","newMedication","addMedicationForm","TestAddToRecord","medicationName","TestCancelAddNewMed","_a"],"mappings":"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"}