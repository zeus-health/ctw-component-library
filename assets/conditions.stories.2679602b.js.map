{"version":3,"file":"conditions.stories.2679602b.js","sources":["../../src/components/content/conditions/story-helpers/condition-form-drawer.ts","../../src/components/content/conditions/story-helpers/condition-table.ts","../../src/components/content/conditions/story-helpers/conditions.ts","../../src/components/content/conditions/story-helpers/mocks/empty-conditions.ts","../../src/components/content/conditions/conditions.stories.tsx"],"sourcesContent":["import {\n  userEvent,\n  waitForElementToBeRemoved,\n  within,\n} from \"@storybook/testing-library\";\n\nexport function conditionFormDrawer(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  const drawer = within(canvas.getByRole(\"dialog\"));\n\n  return {\n    conditionSearch: (search: string) =>\n      userEvent.type(drawer.getByPlaceholderText(\"Type to search\"), search),\n    selectCondition: async (name: string) =>\n      userEvent.click(await drawer.findByRole(\"option\", { name })),\n    clinicalStatus: (status: string) =>\n      userEvent.selectOptions(drawer.getByLabelText(\"Clinical Status\"), status),\n    verificationStatus: (status: string) =>\n      userEvent.selectOptions(\n        drawer.getByLabelText(\"Verification Status\"),\n        status\n      ),\n    onset: (date: string) =>\n      userEvent.type(drawer.getByLabelText(\"Onset\"), date),\n    abatement: (date: string) =>\n      userEvent.type(drawer.getByLabelText(\"Abatement\"), date),\n    note: (note: string) => userEvent.type(drawer.getByLabelText(\"Note\"), note),\n\n    cancel: () =>\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Cancel\" })),\n    save: async () => {\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Save\" }));\n      await waitForElementToBeRemoved(() => canvas.queryByRole(\"dialog\"));\n    },\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport {\n  userEvent,\n  waitFor,\n  waitForElementToBeRemoved,\n  within,\n} from \"@storybook/testing-library\";\n\nexport function conditionTable(\n  canvasElement: HTMLElement,\n  tableEl: HTMLElement\n) {\n  const canvas = within(canvasElement);\n  const table = within(tableEl);\n\n  async function openMenu(row: number) {\n    userEvent.click(getRow(row).getByRole(\"button\", { name: /dropdown/i }));\n    await canvas.findAllByRole(\"menuitem\");\n  }\n\n  function clickMenu(menuItem: string) {\n    userEvent.click(canvas.getByRole(\"menuitem\", { name: menuItem }));\n  }\n\n  function getRow(row: number) {\n    const tbody = table.getAllByRole(\"rowgroup\")[1];\n    return within(within(tbody).queryAllByRole(\"row\")[row]);\n  }\n\n  return {\n    table,\n    // We use waitFor here as there is a race condition\n    // when switching between tests, where the new\n    // mocked data has yet to update.\n    toHaveRowCount: async (count: number) => {\n      const tbody = table.getAllByRole(\"rowgroup\")[1];\n      if (count === 0) {\n        await waitFor(() => expect(tbody).toBeFalsy());\n      } else {\n        await waitFor(() =>\n          expect(within(tbody).queryAllByRole(\"row\")).toHaveLength(count)\n        );\n      }\n    },\n    toHaveRowWithText: (row: number, text: string | RegExp) => {\n      getRow(row).getByText(text);\n    },\n    add: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Add\");\n    },\n    delete: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Delete\");\n      userEvent.click(await canvas.findByRole(\"button\", { name: /remove/i }));\n      await waitForElementToBeRemoved(() => canvas.queryByRole(\"dialog\"));\n    },\n    edit: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Edit\");\n    },\n    viewHistory: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"View History\");\n    },\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport { userEvent, waitFor, within } from \"@storybook/testing-library\";\nimport { conditionTable } from \"./condition-table\";\n\nexport async function conditionsObject(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  await waitFor(() => expect(canvas.queryAllByRole(\"table\")).toHaveLength(2));\n  const tables = canvas.queryAllByRole(\"table\");\n  const patientRecord = conditionTable(canvasElement, tables[0]);\n  const otherProvider = conditionTable(canvasElement, tables[1]);\n\n  // Wait for loading to finish, we should have an active condition in each table.\n  await patientRecord.table.findAllByText(\"active\");\n  await otherProvider.table.findAllByText(\"active\");\n\n  return {\n    clickAddCondition: () =>\n      userEvent.click(canvas.getByRole(\"button\", { name: \"+ Add Condition\" })),\n\n    toggleInactive: () =>\n      userEvent.click(canvas.getByLabelText(\"Include Inactive\")),\n\n    patientRecord,\n    otherProvider,\n  };\n}\n","export const emptyConditions: fhir4.Bundle = {\n  resourceType: \"Bundle\",\n  id: \"eacb4f45-4e83-45db-9114-7d3e05eb1fb3\",\n  meta: {\n    lastUpdated: \"2022-11-16T15:13:00.795+00:00\",\n  },\n  type: \"searchset\",\n  total: 0,\n  entry: [],\n};\n","import { expect } from \"@storybook/jest\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport { userEvent, within } from \"@storybook/testing-library\";\nimport { Conditions, ConditionsProps } from \"../conditions\";\nimport { conditionFormDrawer } from \"./story-helpers/condition-form-drawer\";\nimport { conditionsObject } from \"./story-helpers/conditions\";\nimport { emptyConditions } from \"./story-helpers/mocks/empty-conditions\";\nimport { otherConditions } from \"./story-helpers/mocks/other-conditions\";\nimport { patientConditions } from \"./story-helpers/mocks/patient-conditions\";\nimport { setupConditionMocks } from \"./story-helpers/mocks/requests\";\nimport { CTWProvider } from \"@/components/core/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\n\ntype Props = ConditionsProps;\n\nexport default {\n  component: Conditions,\n  tags: [\"docsPage\"],\n  argTypes: {\n    className: {\n      options: [\"Blank\", \"Fixed Width\"],\n      control: \"select\",\n      mapping: {\n        Blank: \"\",\n        \"Fixed Width\": \"ctw-m-auto ctw-max-w-[600px]\",\n      },\n    },\n  },\n  args: {\n    className: \"Blank\",\n    readOnly: false,\n  },\n  decorators: [\n    (Story, { args }) => (\n      <CTWProvider env=\"dev\" authToken=\"dummy-token\" builderId=\"b123\">\n        <PatientProvider patientID=\"u12345\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>\n    ),\n  ],\n} as Meta<Props>;\n\nexport const Basic: StoryObj<Props> = {\n  ...setupConditionMocks({ otherConditions, patientConditions }),\n};\n\nexport const Empty: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions: emptyConditions,\n    patientConditions: emptyConditions,\n  }),\n};\n\nexport const TestAdd: StoryObj<Props> = {\n  ...Basic,\n  play: async ({ canvasElement }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    const newCondition = \"Heart failure (disorder)\";\n    conditions.clickAddCondition();\n    const conditionForm = conditionFormDrawer(canvasElement);\n    conditionForm.conditionSearch(\"heart\");\n    await conditionForm.selectCondition(newCondition);\n    conditionForm.onset(\"2020-02-14\");\n    await conditionForm.save();\n    await conditions.patientRecord.toHaveRowCount(3);\n    expect(\n      await conditions.patientRecord.table.findByText(newCondition)\n    ).toBeTruthy();\n  },\n};\n\nexport const TestAddOther: StoryObj<Props> = {\n  ...Basic,\n  play: async ({ canvasElement }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.otherProvider.add(2);\n    const conditionForm = conditionFormDrawer(canvasElement);\n    await conditionForm.save();\n    await conditions.patientRecord.toHaveRowCount(3);\n    expect(\n      await conditions.patientRecord.table.findByText(/iron deficiency/i)\n    ).toBeTruthy();\n  },\n};\n\nexport const TestEdit: StoryObj<Props> = {\n  ...Basic,\n  play: async ({ canvasElement }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.edit(0);\n    const conditionForm = conditionFormDrawer(canvasElement);\n    conditionForm.verificationStatus(\"Confirmed\");\n    conditionForm.note(\"hello world\");\n    await conditionForm.save();\n    conditions.patientRecord.toHaveRowWithText(0, /confirmed/i);\n  },\n};\n\nexport const TestDelete: StoryObj<Props> = {\n  ...Basic,\n  play: async ({ canvasElement }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.delete(0);\n    await conditions.patientRecord.toHaveRowCount(1);\n    conditions.toggleInactive();\n    await conditions.patientRecord.toHaveRowCount(3);\n    conditions.patientRecord.toHaveRowWithText(0, /entered-in-error/i);\n    conditions.toggleInactive();\n    await conditions.patientRecord.toHaveRowCount(1);\n  },\n};\n\nexport const TestViewHistory: StoryObj<Props> = {\n  ...Basic,\n  play: async ({ canvasElement }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.viewHistory(0);\n    const canvas = within(canvasElement);\n    const drawer = within(canvas.getByRole(\"dialog\"));\n    expect(\n      await drawer.findByText(/generalized anxiety disorder/i)\n    ).toBeTruthy();\n    expect(drawer.getAllByRole(\"button\", { name: /details/i })).toHaveLength(3);\n    userEvent.click(drawer.getAllByRole(\"button\", { name: /close/i })[0]);\n  },\n};\n"],"names":["conditionFormDrawer","canvasElement","canvas","within","drawer","search","userEvent","name","status","date","note","waitForElementToBeRemoved","conditionTable","tableEl","table","openMenu","row","getRow","clickMenu","menuItem","tbody","count","waitFor","expect","text","conditionsObject","tables","patientRecord","otherProvider","emptyConditions","conditions_stories","Conditions","Story","args","React","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupConditionMocks","otherConditions","patientConditions","Empty","TestAdd","conditions","newCondition","conditionForm","TestAddOther","TestEdit","TestDelete","TestViewHistory"],"mappings":"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"}