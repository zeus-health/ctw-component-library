{"version":3,"file":"conditions.stories-1b24a456.js","sources":["../../src/components/content/conditions-no-patient.tsx","../../src/components/content/conditions-table-base.tsx","../../src/components/content/patient-history/patient-history-message.tsx","../../src/services/patient-history/patient-history.ts","../../src/components/content/conditions.tsx","../../src/components/content/conditions/story-helpers/condition-form-drawer.ts","../../src/components/content/conditions/story-helpers/condition-table.ts","../../src/components/content/conditions/story-helpers/conditions.ts","../../src/components/content/conditions/conditions.stories.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport { CautionAlert } from \"../core/alert\";\n\nexport function ConditionsNoPatient({ className }: { className?: string }) {\n  return (\n    <div className={cx(\"ctw-conditions\", className)}>\n      <div className=\"ctw-heading-container\">\n        <div className=\"ctw-title\">Conditions</div>\n      </div>\n      <div className=\"ctw-p-5\">\n        <CautionAlert header=\"Conditions Unavailable\">\n          <div>\n            We are unable to access Condition information for this patient.\n          </div>\n          <div>\n            Contact your system administrator or customer service for\n            assistance.\n          </div>\n        </CautionAlert>\n      </div>\n    </div>\n  );\n}\n","import { DotsHorizontalIcon } from \"@heroicons/react/outline\";\nimport { DropdownMenu, MenuItem } from \"../core/dropdown-menu\";\nimport { Table, TableBaseProps } from \"../core/table/table\";\nimport { TableColumn } from \"../core/table/table-helpers\";\nimport { ConditionModel } from \"@/fhir/models/condition\";\n\nexport type ConditionsTableBaseProps = {\n  className?: string;\n  conditions: ConditionModel[];\n  rowMenuActions: (condition: ConditionModel) => MenuItem[];\n  hideMenu: boolean;\n} & TableBaseProps<ConditionModel>;\n\nexport function ConditionsTableBase({\n  className,\n  conditions,\n  rowMenuActions,\n  hideMenu,\n  sort = { columnTitle: \"Last Recorded\", dir: \"desc\" },\n  onSort,\n  ...tableProps\n}: ConditionsTableBaseProps) {\n  const columns: TableColumn<ConditionModel>[] = [\n    {\n      title: \"Condition\",\n      dataIndex: \"display\",\n      widthPercent: 40,\n      minWidth: 320,\n      sortIndices: [{ index: \"display\" }, { index: \"recorded\", dir: \"desc\" }],\n    },\n    {\n      title: \"Category\",\n      dataIndex: \"ccsGrouping\",\n      widthPercent: 25,\n      minWidth: 192,\n      sortIndices: [{ index: \"ccsGrouping\" }, { index: \"display\", dir: \"asc\" }],\n    },\n    {\n      title: \"Status\",\n      render: (condition) => (\n        <div className=\"ctw-capitalize\">\n          <div className=\"ctw-text-content-black\">\n            {condition.clinicalStatus}\n          </div>\n          <div>\n            {condition.isArchived ? \"Archived\" : condition.verificationStatus}\n          </div>\n        </div>\n      ),\n      widthPercent: 17.5,\n      minWidth: 128,\n      sortIndices: [\n        { index: \"clinicalStatus\" },\n        { index: \"verificationStatus\" },\n        { index: \"recorded\", dir: \"desc\" },\n      ],\n    },\n    {\n      title: \"Last Recorded\",\n      dataIndex: \"recordedDate\",\n      widthPercent: 17.5,\n      minWidth: 132,\n      sortIndices: [{ index: \"recorded\" }, { index: \"display\", dir: \"asc\" }],\n    },\n  ];\n\n  if (!hideMenu) {\n    columns.push({\n      className: \"ctw-table-action-column\",\n      render: (condition: ConditionModel) => (\n        <DropdownMenu\n          menuItems={rowMenuActions(condition)}\n          telemetryNamespace=\"ConditionsTableBase\"\n        >\n          <DotsHorizontalIcon className=\"ctw-w-5\" />\n        </DropdownMenu>\n      ),\n    });\n  }\n\n  return (\n    <Table\n      className={className}\n      records={conditions}\n      columns={columns}\n      sort={sort}\n      onSort={onSort}\n      {...tableProps}\n    />\n  );\n}\n","import { withErrorBoundary } from \"@/components/core/error-boundary\";\n\nexport type PatientHistoryProps = {\n  readOnly: boolean;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n};\n\nexport const PatientHistoryMessage = withErrorBoundary(\n  ({ readOnly, onClick }: PatientHistoryProps) => (\n    <div\n      className=\"ctw-flex ctw-justify-center ctw-space-x-2 ctw-border ctw-border-solid ctw-border-divider-light ctw-p-5\"\n      data-zus-telemetry-namespace=\"PatientHistoryMessage\"\n    >\n      {readOnly ? (\n        <span>There are no condition records available.</span>\n      ) : (\n        <>\n          <div className=\"ctw-flex ctw-justify-center ctw-text-icon-default\">\n            Retrieve patient clinical history.\n          </div>\n          <button\n            type=\"button\"\n            className=\"ctw-btn-clear ctw-link\"\n            onClick={onClick}\n            data-zus-telemetry-click=\"Request records\"\n          >\n            Request Records\n          </button>\n        </>\n      )}\n    </div>\n  ),\n  \"PatientHistoryMessage\"\n);\n","import { PatientRefreshHistoryMessage } from \"./patient-history-types\";\nimport { getZusApiBaseUrl } from \"@/api/urls\";\nimport { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { errorResponse } from \"@/utils/errors\";\nimport { find } from \"@/utils/nodash\";\nimport { ctwFetch } from \"@/utils/request\";\n\nexport async function getPatientRefreshHistoryMessages(\n  requestContext: CTWRequestContext,\n  patientID: string\n) {\n  const endpointUrl = `${getZusApiBaseUrl(\n    requestContext.env\n  )}/patient-history/messages?patient-id=${patientID}`;\n\n  try {\n    const response = await ctwFetch(endpointUrl, {\n      headers: {\n        Authorization: `Bearer ${requestContext.authToken}`,\n        ...(requestContext.contextBuilderId && {\n          \"Zus-Account\": requestContext.contextBuilderId,\n        }),\n      },\n    });\n    const result = await response.json();\n\n    /* eslint no-underscore-dangle: 0 */\n    return Object.values(result.data) as PatientRefreshHistoryMessage[];\n  } catch (err) {\n    throw errorResponse(\n      \"Failed fetching patient refresh history messages\",\n      err\n    );\n  }\n}\n\nexport type PatientHistoryDetails = {\n  lastRetrievedAt?: string;\n  status: string;\n  dateCreated: string;\n};\n\nexport async function getPatientHistoryDetails(\n  requestContext: CTWRequestContext,\n  patientID: string\n): Promise<PatientHistoryDetails | undefined> {\n  const messages = await getPatientRefreshHistoryMessages(\n    requestContext,\n    patientID\n  );\n\n  if (messages.length === 0) {\n    return undefined;\n  }\n\n  const latestDone = find(messages, {\n    _messages: [\n      {\n        status: \"done\",\n      },\n    ],\n  }) as PatientRefreshHistoryMessage | undefined;\n\n  return {\n    lastRetrievedAt: latestDone?._createdAt,\n    status: messages[0].status,\n    dateCreated: messages[0]._createdAt,\n  };\n}\n","import cx from \"classnames\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  DrawerFormWithFields,\n  FormActionTypes,\n  FormEntry,\n} from \"../core/form/drawer-form-with-fields\";\nimport { ModalConfirmDelete } from \"../core/modal-confirm-delete\";\nimport { useCTW } from \"../core/providers/ctw-provider\";\nimport { usePatient } from \"../core/providers/patient-provider\";\nimport { TableSort } from \"../core/table/table-helpers\";\nimport { ToggleControl } from \"../core/toggle-control\";\nimport { ConditionHeader } from \"./condition-header\";\nimport { useConditionHistory } from \"./condition-history/conditions-history-drawer\";\nimport { onConditionDelete, toggleArchive } from \"./conditions-helper\";\nimport { ConditionsNoPatient } from \"./conditions-no-patient\";\nimport { ConditionsTableBase } from \"./conditions-table-base\";\nimport \"./conditions.scss\";\nimport { filterOtherConditions } from \"./conditions/helpers\";\nimport {\n  createOrEditCondition,\n  getAddConditionWithDefaults,\n} from \"./forms/actions/conditions\";\nimport { getAddConditionData } from \"./forms/schemas/condition-schema\";\nimport { PatientHistoryRequestDrawer } from \"./patient-history-request-drawer\";\nimport { PatientHistoryMessage } from \"./patient-history/patient-history-message\";\nimport {\n  conditionAddSchema,\n  conditionEditSchema,\n  getEditingPatientConditionData,\n} from \"@/components/content/forms/schemas/condition-schema\";\nimport { withErrorBoundary } from \"@/components/core/error-boundary\";\nimport {\n  getNewCondition,\n  useOtherProviderConditions,\n  usePatientConditions,\n} from \"@/fhir/conditions\";\nimport { ConditionModel } from \"@/fhir/models/condition\";\nimport { useBreakpoints } from \"@/hooks/use-breakpoints\";\nimport {\n  getPatientHistoryDetails,\n  PatientHistoryDetails,\n} from \"@/services/patient-history/patient-history\";\nimport { AnyZodSchema } from \"@/utils/form-helper\";\nimport { curry } from \"@/utils/nodash\";\n\nexport type ConditionsProps = {\n  className?: string;\n  readOnly?: boolean;\n  hideRequestRecords?: boolean;\n};\n\nconst EMPTY_MESSAGE_PATIENT_RECORD =\n  \"There are no conditions in this patient's record.\";\nconst EMPTY_MESSAGE_PROVIDER = \"There are no conditions available.\";\nconst ERROR_MSG =\n  \"There was an error fetching conditions for this patient. Refresh the page or contact your organization's technical support if this issue persists.\";\n\nexport const Conditions = withErrorBoundary(\n  ({\n    className,\n    readOnly = false,\n    hideRequestRecords = false,\n  }: ConditionsProps) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const breakpoints = useBreakpoints(containerRef);\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n    const [showConfirmDelete, setShowConfirmDelete] = useState(false);\n\n    const showConditionHistory = useConditionHistory();\n    const [requestRecordsDrawerIsOpen, setRequestDrawerIsOpen] =\n      useState(false);\n    const [patientRecords, setPatientRecords] = useState<ConditionModel[]>([]);\n    const [otherProviderRecords, setOtherProviderRecords] = useState<\n      ConditionModel[]\n    >([]);\n    const [includeInactive, setIncludeInactive] = useState(false);\n    const [formAction, setFormAction] = useState<FormActionTypes>(\"Add\");\n    const [schema, setSchema] = useState<AnyZodSchema>(conditionAddSchema);\n    const [currentSelectedData, setCurrentlySelectedData] =\n      useState<FormEntry[]>();\n    const [selectedCondition, setSelectedCondition] =\n      useState<ConditionModel>();\n    const patientResponse = usePatient();\n    const patientRecordsResponse = usePatientConditions();\n    const otherProviderRecordsResponse = useOtherProviderConditions();\n    const { getRequestContext } = useCTW();\n    const [sort, setSort] = useState<TableSort>();\n\n    const [clinicalHistoryExists, setClinicalHistoryExists] =\n      useState<boolean>();\n    const [patientHistoryInfo, setPatientHistoryInfo] =\n      useState<PatientHistoryDetails>();\n\n    const patientRecordsMessage = patientRecordsResponse.isError\n      ? ERROR_MSG\n      : EMPTY_MESSAGE_PATIENT_RECORD;\n\n    const otherProviderRecordMessage = otherProviderRecordsResponse.isError\n      ? ERROR_MSG\n      : EMPTY_MESSAGE_PROVIDER;\n\n    const handleEditCondition = (condition: ConditionModel) => {\n      if (patientResponse.data) {\n        setDrawerIsOpen(true);\n        setFormAction(\"Edit\");\n        setSchema(conditionEditSchema);\n        setCurrentlySelectedData(getEditingPatientConditionData({ condition }));\n        setSelectedCondition(condition);\n      }\n    };\n\n    const handleConditionDelete = (condition: ConditionModel) => {\n      setShowConfirmDelete(true);\n      setSelectedCondition(condition);\n    };\n\n    const handleAddOtherProviderCondition = (condition: ConditionModel) => {\n      const newCondition = getAddConditionWithDefaults(condition.resource);\n\n      if (patientResponse.data) {\n        setSchema(conditionAddSchema);\n        setDrawerIsOpen(true);\n        setFormAction(\"Add\");\n        setCurrentlySelectedData(\n          getAddConditionData({\n            condition: new ConditionModel(newCondition),\n          })\n        );\n      }\n    };\n\n    const handleAddNewCondition = () => {\n      if (!patientResponse.data) return;\n\n      const newCondition = getNewCondition(patientResponse.data.id);\n      setDrawerIsOpen(true);\n      setSchema(conditionAddSchema);\n      setCurrentlySelectedData(\n        getAddConditionData({\n          condition: new ConditionModel(newCondition),\n        })\n      );\n    };\n\n    const addConditionBtn = (\n      <button\n        className=\"ctw-btn-primary\"\n        type=\"button\"\n        onClick={handleAddNewCondition}\n        data-zus-telemetry-click=\"Add new condition (Empty table)\"\n      >\n        Add Condition\n      </button>\n    );\n\n    const shouldShowClinicalHistoryArea =\n      clinicalHistoryExists ||\n      (otherProviderRecordsResponse.data &&\n        otherProviderRecordsResponse.data.length > 0);\n\n    const checkClinicalHistory = async (patientID: string) => {\n      const requestContext = await getRequestContext();\n\n      const patientHistoryMessage = await getPatientHistoryDetails(\n        requestContext,\n        patientID\n      );\n\n      setClinicalHistoryExists(!!patientHistoryMessage?.lastRetrievedAt);\n      setPatientHistoryInfo(patientHistoryMessage);\n    };\n\n    useEffect(() => {\n      async function load() {\n        const patientConditions = patientRecordsResponse.data;\n        const otherConditions = otherProviderRecordsResponse.data;\n\n        if (patientConditions) {\n          setPatientRecords(\n            patientConditions.filter((c) => c.active || includeInactive)\n          );\n\n          if (otherConditions) {\n            setOtherProviderRecords(\n              filterOtherConditions(\n                otherConditions,\n                patientConditions,\n                includeInactive\n              )\n            );\n          } else {\n            setOtherProviderRecords([]);\n          }\n        }\n\n        if (patientRecordsResponse.error) {\n          setPatientRecords([]);\n          setOtherProviderRecords([]);\n        }\n      }\n      void load();\n      if (patientResponse.data?.id && clinicalHistoryExists === undefined) {\n        void checkClinicalHistory(patientResponse.data.id);\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n      includeInactive,\n      patientResponse.data,\n      patientRecordsResponse.data,\n      otherProviderRecordsResponse.data,\n      clinicalHistoryExists,\n      patientRecordsResponse.error,\n    ]);\n\n    if (patientResponse.isError) {\n      return <ConditionsNoPatient className={className} />;\n    }\n\n    return (\n      <div\n        ref={containerRef}\n        data-zus-telemetry-namespace=\"Conditions\"\n        className={cx(\"ctw-conditions\", className, {\n          \"ctw-conditions-stacked\": breakpoints.sm,\n        })}\n      >\n        {!readOnly && (\n          <div className=\"ctw-conditions-heading-container\">\n            <div className=\"ctw-title\">Conditions</div>\n            <button\n              type=\"button\"\n              className=\"ctw-btn-clear ctw-link\"\n              data-zus-telemetry-click=\"Add new condition\"\n              onClick={handleAddNewCondition}\n            >\n              + Add Condition\n            </button>\n          </div>\n        )}\n\n        <div className=\"ctw-conditions-body-container\">\n          <div className=\"ctw-space-y-3\">\n            <div className=\"ctw-conditions-title-container\">\n              <div className=\"ctw-title\">Patient Record</div>\n              <ToggleControl\n                onFormChange={() => setIncludeInactive(!includeInactive)}\n                toggleProps={{ name: \"conditions\", text: \"Include Inactive\" }}\n              />\n            </div>\n\n            <ConditionsTableBase\n              stacked={breakpoints.sm}\n              conditions={patientRecords}\n              isLoading={patientRecordsResponse.isLoading}\n              hideMenu={readOnly}\n              sort={sort}\n              onSort={(newSort) => setSort(newSort)}\n              emptyMessage={\n                <>\n                  <div>{patientRecordsMessage}</div>\n                  {!patientRecordsResponse.isError && !readOnly && (\n                    <div className=\"ctw-mt-5\">{addConditionBtn}</div>\n                  )}\n                </>\n              }\n              rowMenuActions={(condition) => [\n                {\n                  name: \"Edit\",\n                  action: async () => {\n                    handleEditCondition(condition);\n                  },\n                },\n                {\n                  name: \"View History\",\n                  action: async () => {\n                    showConditionHistory({\n                      condition,\n                      readOnly,\n                    });\n                  },\n                },\n                {\n                  name: \"Delete\",\n                  className: \"dangerous\",\n                  action: async () => {\n                    handleConditionDelete(condition);\n                  },\n                },\n              ]}\n            />\n          </div>\n          <div className=\"ctw-space-y-3\">\n            <div className=\"ctw-conditions-title-container\">\n              <div className=\"ctw-title\">Other Provider Records</div>\n              {shouldShowClinicalHistoryArea &&\n                !readOnly &&\n                !hideRequestRecords && (\n                  <button\n                    type=\"button\"\n                    className=\"ctw-btn-clear ctw-link\"\n                    onClick={() => setRequestDrawerIsOpen(true)}\n                    data-zus-telemetry-click=\"Request records\"\n                  >\n                    Request Records\n                  </button>\n                )}\n            </div>\n            {shouldShowClinicalHistoryArea ? (\n              <ConditionsTableBase\n                className=\"ctw-conditions-not-reviewed\"\n                stacked={breakpoints.sm}\n                conditions={otherProviderRecords}\n                sort={sort}\n                onSort={(newSort) => setSort(newSort)}\n                isLoading={\n                  otherProviderRecordsResponse.isLoading ||\n                  patientRecordsResponse.isLoading\n                }\n                hideMenu={readOnly}\n                emptyMessage={otherProviderRecordMessage}\n                rowMenuActions={(condition) => [\n                  {\n                    name: \"Add\",\n                    action: async () => {\n                      handleAddOtherProviderCondition(condition);\n                    },\n                  },\n                  {\n                    name: \"View History\",\n                    action: async () => {\n                      showConditionHistory({ condition, readOnly: true });\n                    },\n                  },\n                  {\n                    name: condition.isArchived ? \"Un-Archive\" : \"Archive\",\n                    action: async () => {\n                      const requestContext = await getRequestContext();\n                      await toggleArchive(condition, requestContext);\n                    },\n                  },\n                ]}\n              />\n            ) : (\n              <PatientHistoryMessage\n                readOnly={readOnly || hideRequestRecords}\n                onClick={() => setRequestDrawerIsOpen(true)}\n              />\n            )}\n          </div>\n        </div>\n\n        {patientResponse.data && (\n          <DrawerFormWithFields\n            title={`${formAction} Condition`}\n            header={\n              formAction === \"Edit\" &&\n              selectedCondition && (\n                <ConditionHeader condition={selectedCondition} />\n              )\n            }\n            action={curry(createOrEditCondition)(\n              selectedCondition,\n              patientResponse.data.id\n            )}\n            data={currentSelectedData}\n            schema={schema}\n            isOpen={drawerIsOpen}\n            onClose={() => setDrawerIsOpen(false)}\n          />\n        )}\n\n        {patientResponse.data && (\n          <PatientHistoryRequestDrawer\n            header={\n              <div className=\"ctw-pt-0 ctw-text-base\">\n                Request patient clinical history from 70K+ providers across the\n                nation. No changes will be made to your patient record.\n              </div>\n            }\n            patient={patientResponse.data}\n            isOpen={requestRecordsDrawerIsOpen}\n            onClose={() => setRequestDrawerIsOpen(false)}\n            setClinicalHistoryExists={setClinicalHistoryExists}\n          />\n        )}\n\n        {selectedCondition && patientResponse.data && (\n          <ModalConfirmDelete\n            resource={selectedCondition}\n            resourceName={selectedCondition.display || \"unnamed condition\"}\n            onClose={() => setShowConfirmDelete(false)}\n            isOpen={showConfirmDelete}\n            onDelete={async () => {\n              const requestContext = await getRequestContext();\n              await onConditionDelete(\n                selectedCondition.resource,\n                requestContext\n              );\n            }}\n          />\n        )}\n      </div>\n    );\n  },\n  \"Conditions\"\n);\n","import {\n  userEvent,\n  waitForElementToBeRemoved,\n  within,\n} from \"@storybook/testing-library\";\n\nexport function conditionFormDrawer(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  const drawer = within(canvas.getByRole(\"dialog\"));\n\n  return {\n    conditionSearch: (search: string) =>\n      userEvent.type(drawer.getByPlaceholderText(\"Type to search\"), search),\n    selectCondition: async (name: string) =>\n      userEvent.click(await drawer.findByRole(\"option\", { name })),\n    status: (status: string) =>\n      userEvent.selectOptions(drawer.getByTestId(\"form-field-status\"), status),\n\n    onset: (date: string) =>\n      userEvent.type(drawer.getByTestId(\"form-field-onset\"), date),\n    abatement: (date: string) =>\n      userEvent.type(drawer.getByTestId(\"form-field-abatement\"), date),\n    note: (note: string) =>\n      userEvent.type(drawer.getByTestId(\"form-field-note\"), note),\n\n    cancel: () =>\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Cancel\" })),\n    save: async () => {\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Save\" }));\n      await waitForElementToBeRemoved(() => canvas.queryByRole(\"dialog\"));\n    },\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport {\n  userEvent,\n  waitFor,\n  waitForElementToBeRemoved,\n  within,\n} from \"@storybook/testing-library\";\n\nexport function conditionTable(\n  canvasElement: HTMLElement,\n  tableEl: HTMLElement\n) {\n  const canvas = within(canvasElement);\n  const table = within(tableEl);\n\n  async function openMenu(row: number) {\n    userEvent.click(getRow(row).getByRole(\"button\", { name: /dropdown/i }));\n    await canvas.findAllByRole(\"menuitem\");\n  }\n\n  function clickMenu(menuItem: string) {\n    userEvent.click(canvas.getByRole(\"menuitem\", { name: menuItem }));\n  }\n\n  function getRow(row: number) {\n    const tbody = table.getAllByRole(\"rowgroup\")[1];\n    return within(within(tbody).queryAllByRole(\"row\")[row]);\n  }\n\n  return {\n    table,\n    // We use waitFor here as there is a race condition\n    // when switching between tests, where the new\n    // mocked data has yet to update.\n    toHaveRowCount: async (count: number) => {\n      const tbody = table.getAllByRole(\"rowgroup\")[1];\n      if (count === 0) {\n        await waitFor(() => expect(tbody).toBeFalsy());\n      } else {\n        await waitFor(() =>\n          expect(within(tbody).queryAllByRole(\"row\")).toHaveLength(count)\n        );\n      }\n    },\n    toHaveRowWithText: (row: number, text: string | RegExp) => {\n      getRow(row).getByText(text);\n    },\n    add: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Add\");\n    },\n    delete: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Delete\");\n      userEvent.click(await canvas.findByRole(\"button\", { name: /remove/i }));\n      await waitForElementToBeRemoved(() => canvas.queryByRole(\"dialog\"));\n    },\n    edit: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Edit\");\n    },\n    viewHistory: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"View History\");\n    },\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport { userEvent, waitFor, within } from \"@storybook/testing-library\";\nimport { conditionTable } from \"./condition-table\";\n\nexport async function conditionsObject(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  await waitFor(() => expect(canvas.queryAllByRole(\"table\")).toHaveLength(2));\n  const tables = canvas.queryAllByRole(\"table\");\n  const patientRecord = conditionTable(canvasElement, tables[0]);\n  const otherProvider = conditionTable(canvasElement, tables[1]);\n\n  // Wait for loading to finish, we should have an active condition in each table.\n  await patientRecord.table.findAllByText(\"active\");\n  await otherProvider.table.findAllByText(\"active\");\n\n  return {\n    clickAddCondition: () =>\n      userEvent.click(canvas.getByRole(\"button\", { name: \"+ Add Condition\" })),\n\n    toggleInactive: () =>\n      userEvent.click(canvas.getByLabelText(\"Include Inactive\")),\n\n    patientRecord,\n    otherProvider,\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport { userEvent, waitFor, within } from \"@storybook/testing-library\";\nimport { Conditions, ConditionsProps } from \"../conditions\";\nimport { conditionFormDrawer } from \"./story-helpers/condition-form-drawer\";\nimport { conditionsObject } from \"./story-helpers/conditions\";\nimport { emptyConditions } from \"./story-helpers/mocks/empty-conditions\";\nimport { otherConditions } from \"./story-helpers/mocks/other-conditions\";\nimport { patientConditions } from \"./story-helpers/mocks/patient-conditions\";\nimport { setupConditionMocks } from \"./story-helpers/mocks/requests\";\nimport { CTWProvider } from \"@/components/core/providers/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/providers/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\ntype Props = ConditionsProps;\nexport default ({\n  component: Conditions,\n  tags: [\"autodocs\"],\n  argTypes: {\n    className: {\n      options: [\"Blank\", \"Fixed Width\"],\n      control: \"select\",\n      mapping: {\n        Blank: \"\",\n        \"Fixed Width\": \"ctw-m-auto ctw-max-w-[600px]\"\n      }\n    }\n  },\n  args: {\n    className: \"Blank\",\n    readOnly: false,\n    hideRequestRecords: false\n  },\n  decorators: [(Story, {\n    args\n  }) => <CTWProvider env=\"dev\" authToken=\"dummy-token\" builderId=\"b123\">\n        <PatientProvider patientID=\"u12345\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>]\n} as Meta<Props>);\nexport const Basic: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions,\n    patientConditions\n  })\n};\nexport const Empty: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions: emptyConditions,\n    patientConditions: emptyConditions\n  })\n};\nexport const TestAdd: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    const newCondition = \"Heart failure (disorder)\";\n    conditions.clickAddCondition();\n    const conditionForm = conditionFormDrawer(canvasElement);\n    conditionForm.conditionSearch(\"heart\");\n    await conditionForm.selectCondition(newCondition);\n    conditionForm.status(\"Active\");\n    conditionForm.onset(\"2020-02-14\");\n    await conditionForm.save();\n    await conditions.patientRecord.toHaveRowCount(3);\n    expect(await conditions.patientRecord.table.findByText(newCondition)).toBeTruthy();\n  }\n};\nexport const TestAddOther: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.otherProvider.add(2);\n    const conditionForm = conditionFormDrawer(canvasElement);\n    await conditionForm.save();\n    await conditions.patientRecord.toHaveRowCount(3);\n    expect(await conditions.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy();\n  }\n};\nexport const TestEdit: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.edit(0);\n    const conditionForm = conditionFormDrawer(canvasElement);\n    conditionForm.note(\"hello world\");\n    await conditionForm.save();\n    conditions.patientRecord.toHaveRowWithText(0, /confirmed/i);\n  }\n};\nexport const TestDelete: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.delete(0);\n    await conditions.patientRecord.toHaveRowCount(1);\n    conditions.toggleInactive();\n    await conditions.patientRecord.toHaveRowCount(3);\n    conditions.patientRecord.toHaveRowWithText(1, /entered-in-error/i);\n    conditions.toggleInactive();\n    await conditions.patientRecord.toHaveRowCount(1);\n  }\n};\nexport const TestViewHistory: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.viewHistory(0);\n    const canvas = within(canvasElement);\n    await waitFor(() => expect(canvas.queryAllByRole(\"dialog\")).toHaveLength(1));\n    const drawer = within(canvas.getByRole(\"dialog\"));\n    expect(await drawer.findByText(/generalized anxiety disorder/i)).toBeTruthy();\n    await waitFor(() => expect(drawer.getAllByRole(\"button\", {\n      name: /details/i\n    })).toHaveLength(3));\n    userEvent.click(drawer.getAllByRole(\"button\", {\n      name: /close/i\n    })[0]);\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  storySource: {\n    source: \"{\\n  ...setupConditionMocks({\\n    otherConditions,\\n    patientConditions\\n  })\\n}\",\n    ...Basic.parameters?.storySource\n  }\n};\nEmpty.parameters = {\n  ...Empty.parameters,\n  storySource: {\n    source: \"{\\n  ...setupConditionMocks({\\n    otherConditions: emptyConditions,\\n    patientConditions: emptyConditions\\n  })\\n}\",\n    ...Empty.parameters?.storySource\n  }\n};\nTestAdd.parameters = {\n  ...TestAdd.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    const newCondition = \\\"Heart failure (disorder)\\\";\\n    conditions.clickAddCondition();\\n    const conditionForm = conditionFormDrawer(canvasElement);\\n    conditionForm.conditionSearch(\\\"heart\\\");\\n    await conditionForm.selectCondition(newCondition);\\n    conditionForm.status(\\\"Active\\\");\\n    conditionForm.onset(\\\"2020-02-14\\\");\\n    await conditionForm.save();\\n    await conditions.patientRecord.toHaveRowCount(3);\\n    expect(await conditions.patientRecord.table.findByText(newCondition)).toBeTruthy();\\n  }\\n}\",\n    ...TestAdd.parameters?.storySource\n  }\n};\nTestAddOther.parameters = {\n  ...TestAddOther.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    await conditions.otherProvider.add(2);\\n    const conditionForm = conditionFormDrawer(canvasElement);\\n    await conditionForm.save();\\n    await conditions.patientRecord.toHaveRowCount(3);\\n    expect(await conditions.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy();\\n  }\\n}\",\n    ...TestAddOther.parameters?.storySource\n  }\n};\nTestEdit.parameters = {\n  ...TestEdit.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    await conditions.patientRecord.edit(0);\\n    const conditionForm = conditionFormDrawer(canvasElement);\\n    conditionForm.note(\\\"hello world\\\");\\n    await conditionForm.save();\\n    conditions.patientRecord.toHaveRowWithText(0, /confirmed/i);\\n  }\\n}\",\n    ...TestEdit.parameters?.storySource\n  }\n};\nTestDelete.parameters = {\n  ...TestDelete.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    await conditions.patientRecord.delete(0);\\n    await conditions.patientRecord.toHaveRowCount(1);\\n    conditions.toggleInactive();\\n    await conditions.patientRecord.toHaveRowCount(3);\\n    conditions.patientRecord.toHaveRowWithText(1, /entered-in-error/i);\\n    conditions.toggleInactive();\\n    await conditions.patientRecord.toHaveRowCount(1);\\n  }\\n}\",\n    ...TestDelete.parameters?.storySource\n  }\n};\nTestViewHistory.parameters = {\n  ...TestViewHistory.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    await conditions.patientRecord.viewHistory(0);\\n    const canvas = within(canvasElement);\\n    await waitFor(() => expect(canvas.queryAllByRole(\\\"dialog\\\")).toHaveLength(1));\\n    const drawer = within(canvas.getByRole(\\\"dialog\\\"));\\n    expect(await drawer.findByText(/generalized anxiety disorder/i)).toBeTruthy();\\n    await waitFor(() => expect(drawer.getAllByRole(\\\"button\\\", {\\n      name: /details/i\\n    })).toHaveLength(3));\\n    userEvent.click(drawer.getAllByRole(\\\"button\\\", {\\n      name: /close/i\\n    })[0]);\\n  }\\n}\",\n    ...TestViewHistory.parameters?.storySource\n  }\n};"],"names":["ConditionsNoPatient","className","React","cx","CautionAlert","ConditionsTableBase","conditions","rowMenuActions","hideMenu","sort","onSort","tableProps","columns","condition","DropdownMenu","DotsHorizontalIcon","Table","PatientHistoryMessage","withErrorBoundary","readOnly","onClick","getPatientRefreshHistoryMessages","requestContext","patientID","endpointUrl","getZusApiBaseUrl","result","ctwFetch","err","errorResponse","getPatientHistoryDetails","messages","latestDone","find","EMPTY_MESSAGE_PATIENT_RECORD","EMPTY_MESSAGE_PROVIDER","ERROR_MSG","Conditions","hideRequestRecords","containerRef","useRef","breakpoints","useBreakpoints","drawerIsOpen","setDrawerIsOpen","useState","showConfirmDelete","setShowConfirmDelete","showConditionHistory","useConditionHistory","requestRecordsDrawerIsOpen","setRequestDrawerIsOpen","patientRecords","setPatientRecords","otherProviderRecords","setOtherProviderRecords","includeInactive","setIncludeInactive","formAction","setFormAction","schema","setSchema","conditionAddSchema","currentSelectedData","setCurrentlySelectedData","selectedCondition","setSelectedCondition","patientResponse","usePatient","patientRecordsResponse","usePatientConditions","otherProviderRecordsResponse","useOtherProviderConditions","getRequestContext","useCTW","setSort","clinicalHistoryExists","setClinicalHistoryExists","patientHistoryInfo","setPatientHistoryInfo","patientRecordsMessage","otherProviderRecordMessage","handleEditCondition","conditionEditSchema","getEditingPatientConditionData","handleConditionDelete","handleAddOtherProviderCondition","newCondition","getAddConditionWithDefaults","getAddConditionData","ConditionModel","handleAddNewCondition","getNewCondition","addConditionBtn","shouldShowClinicalHistoryArea","checkClinicalHistory","patientHistoryMessage","useEffect","load","patientConditions","otherConditions","c","filterOtherConditions","_a","ToggleControl","newSort","toggleArchive","DrawerFormWithFields","ConditionHeader","curry","createOrEditCondition","PatientHistoryRequestDrawer","ModalConfirmDelete","onConditionDelete","conditionFormDrawer","canvasElement","canvas","within","drawer","search","userEvent","name","status","date","note","waitForElementToBeRemoved","conditionTable","tableEl","table","openMenu","row","getRow","clickMenu","menuItem","tbody","count","waitFor","expect","text","conditionsObject","tables","patientRecord","otherProvider","conditions_stories","Story","args","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupConditionMocks","Empty","emptyConditions","TestAdd","conditionForm","TestAddOther","TestEdit","TestDelete","TestViewHistory"],"mappings":"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"}