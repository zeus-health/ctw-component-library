{"version":3,"file":"error-boundary-d1aa0574.js","sources":["../../src/components/core/error-boundary.tsx"],"sourcesContent":["import React, { Component, ErrorInfo, ReactNode } from \"react\";\nimport * as CTWBox from \"@/components/core/ctw-box\";\nimport { pickBy } from \"@/utils/nodash\";\nimport { Telemetry } from \"@/utils/telemetry\";\n\ninterface Props {\n  children?: ReactNode;\n  name?: string;\n  trackView?: boolean;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\n/**\n * Error Boundary for internal use.\n */\nexport class ErrorBoundary extends Component<Props, State> {\n  static getDerivedStateFromError(error: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, error };\n  }\n\n  state: State = {\n    hasError: false,\n  };\n\n  componentDidMount() {\n    const { props } = this;\n    if (props.name) {\n      Telemetry.logger.info(`Loaded component ${props.name}`);\n      if (props.trackView) {\n        Telemetry.trackView(props.name);\n      }\n    }\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    const { props } = this;\n    Telemetry.logger.error(\n      error.message,\n      pickBy({\n        ...errorInfo,\n        componentName: props.name,\n        error: {\n          stack: error.stack,\n        },\n      })\n    );\n  }\n\n  resetState = () => {\n    this.setState({ hasError: false });\n  };\n\n  public render() {\n    const { state, props } = this;\n\n    if (state.hasError) {\n      return (\n        <CTWBox.Wrapper>\n          <CTWBox.Body\n            title=\"Sorry, we have encountered an error.\"\n            className=\"ctw-flex ctw-items-center ctw-justify-between\"\n          >\n            <div className=\"ctw-py-1 ctw-px-5\">\n              <p>{state.error?.message || \"Unknown\"}</p>\n              <button\n                type=\"button\"\n                className=\"ctw-btn-primary ctw-capitalize\"\n                onClick={this.resetState}\n              >\n                Refresh component\n              </button>\n            </div>\n          </CTWBox.Body>\n        </CTWBox.Wrapper>\n      );\n    }\n\n    return props.children;\n  }\n}\n\nexport function withErrorBoundary<T>(\n  wrappedComponent: (props: T) => ReactNode,\n  name?: string,\n  trackView = true\n) {\n  return (props: T) => (\n    <ErrorBoundary name={name} trackView={trackView}>\n      {wrappedComponent(props)}\n    </ErrorBoundary>\n  );\n}\n"],"names":["ErrorBoundary","Component","__publicField","error","props","Telemetry","errorInfo","pickBy","state","React","CTWBox.Wrapper","CTWBox.Body","_a","withErrorBoundary","wrappedComponent","name","trackView"],"mappings":"skBAoBO,MAAAA,UAAAC,EAAAA,SAAA,CAAA,kCAILC,EAAA,aAAA,CAEe,SAAA,EACH,GAyBZA,EAAA,kBAAA,IAAA,CAGE,KAAA,SAAA,CAAA,SAAA,EAAA,CAAA,CAAiC,GAnCsB,OAAA,yBAAAC,EAAA,CAGvD,MAAA,CAAA,SAAA,GAAA,MAAAA,EAA+B,CAKjC,mBAAA,CAGE,KAAA,CAAA,MAAAC,CAAA,EAAA,KACAA,EAAA,OACEC,EAAA,OAAA,KAAA,oBAAAD,EAAA,MAAA,EACAA,EAAA,WACEC,EAAA,UAAAD,EAAA,IAAA,EAEJ,CACF,kBAAAD,EAAAG,EAAA,CAGE,KAAA,CAAA,MAAAF,CAAA,EAAA,KACAC,EAAA,OAAA,MAAiBF,EAAA,QACTI,EAAA,CACC,GAAAD,EACF,cAAAF,EAAA,KACkB,MAAA,CACd,MAAAD,EAAA,KACQ,CACf,CAAA,CACD,CACH,CAKF,QAAA,OAGE,KAAA,CAAA,MAAAK,EAAA,MAAAJ,CAAA,EAAA,KAEA,OAAAI,EAAA,SACEC,EAAA,cAAAC,EAAA,KAAAD,EAAA,cAEIE,EAAQ,CAAP,MAAA,uCACO,UAAA,+CACI,EAAAF,EAAA,cAAA,MAAA,CAAA,UAAA,mBAAA,EAAAA,EAAA,cAAA,IAAA,OAAAG,EAAAJ,EAAA,QAAA,YAAAI,EAAA,UAAA,SAAA,EAAAH,EAAA,cAIR,SAAC,CAAA,KAAA,SACM,UAAA,iCACK,QAAA,KAAA,UACI,EAAA,mBACf,CAAA,CAGH,CAAA,EAMRL,EAAA,QAAa,CAEjB,CAEO,SAAAS,EAAAC,EAAAC,EAAAC,EAAA,GAAA,CAKL,OAAAZ,GAAAK,EAAA,cAAAT,EAAA,CAAA,KAAAe,EAAA,UAAAC,CAAA,EAAAF,EAAAV,CAAA,CAAA,CAKF"}