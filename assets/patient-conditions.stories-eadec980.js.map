{"version":3,"file":"patient-conditions.stories-eadec980.js","sources":["../../src/components/content/conditions/patient-conditions-actions.tsx","../../src/components/content/conditions/patient-conditions-columns.tsx","../../src/components/content/conditions/patient-conditions-filters.tsx","../../src/components/content/conditions/patient-conditions-menu-actions.tsx","../../src/components/content/conditions/patient-conditions-tabs.tsx","../../src/components/content/conditions/patient-conditions.tsx","../../src/components/content/conditions/patient-conditions.stories.tsx"],"sourcesContent":["import { useAddConditionForm } from \"./condition-hooks\";\nimport { Toggle } from \"@/components/core/toggle\";\n\nexport type PatientConditionsActionsProps = {\n  hideAdd: boolean;\n  onToggleShowHistoric: () => void;\n};\n\nexport function PatientConditionsActions({\n  hideAdd,\n  onToggleShowHistoric,\n}: PatientConditionsActionsProps) {\n  const showAddConditionForm = useAddConditionForm();\n\n  return (\n    <div className=\"ctw-flex ctw-items-center ctw-justify-end ctw-space-x-2 ctw-p-3\">\n      <Toggle name=\"historic\" text=\"Historic\" onChange={onToggleShowHistoric} />\n      {!hideAdd && (\n        <button\n          type=\"button\"\n          className=\"ctw-btn-primary\"\n          onClick={() => showAddConditionForm()}\n        >\n          Add Condition\n        </button>\n      )}\n    </div>\n  );\n}\n","import cx from \"classnames\";\nimport { TableColumn } from \"@/components/core/table/table-helpers\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { compact } from \"@/utils/nodash\";\n\nfunction statusToColor(status: string) {\n  switch (status) {\n    case \"Active\":\n      return \"ctw-text-success-main\";\n    case \"Pending\":\n      return \"ctw-text-caution-main\";\n    default:\n      return \"ctw-text-content-lighter\";\n  }\n}\n\nexport const patientConditionsColumns: TableColumn<ConditionModel>[] = [\n  {\n    widthPercent: 30,\n    minWidth: 320,\n    render: (condition) => (\n      <div>\n        <div className=\"ctw-pc-title group-hover:ctw-underline\">\n          {condition.display}\n        </div>\n        <div className=\"ctw-pc-chapter\">{condition.ccsChapter}</div>\n      </div>\n    ),\n  },\n  {\n    render: (condition) => (\n      <div className=\"ctw-pc-status-container\">\n        <div\n          className={cx(\n            \"ctw-pc-status-dot\",\n            statusToColor(condition.displayStatus)\n          )}\n        >\n          &bull;\n        </div>\n        <div className=\"ctw-pc-status-and-extra\">\n          <div className=\"ctw-pc-status\">{condition.displayStatus}</div>\n\n          {condition.isSummaryResource ? (\n            <div>\n              {compact([\n                condition.patient?.organization?.name,\n                condition.recordedDate,\n              ]).join(\" \")}\n            </div>\n          ) : (\n            <div>\n              {compact([condition.recorder, condition.recordedDate]).join(\" \")}\n            </div>\n          )}\n        </div>\n      </div>\n    ),\n    widthPercent: 30,\n    minWidth: 128,\n  },\n  {\n    widthPercent: 40,\n    minWidth: 132,\n    render: (condition) => {\n      const onsetText = condition.isSummaryResource\n        ? \"Earliest known onset:\"\n        : \"Onset:\";\n\n      return (\n        <div className=\"ctw-pc-onset-notes\">\n          {condition.onset && (\n            <div>\n              {onsetText} {condition.onset}\n            </div>\n          )}\n          <div className=\"ctw-pc-notes\">{condition.notes.join(\" \")}</div>\n        </div>\n      );\n    },\n  },\n];\n","import { useState } from \"react\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { cloneDeep, merge } from \"@/utils/nodash\";\n\nexport type FilterCollection = \"patient\" | \"other\";\n\nexport type Filters = {\n  collection: FilterCollection;\n  showHistoric: boolean;\n};\n\nexport function useConditionFilters() {\n  const [filters, setFilters] = useState<Filters>({\n    collection: \"patient\",\n    showHistoric: false,\n  });\n\n  function updateFilters(newFilters: Partial<Filters>) {\n    setFilters(merge(cloneDeep(filters), newFilters));\n  }\n\n  function applyFilters(\n    patientConditions: ConditionModel[],\n    otherConditions: ConditionModel[]\n  ) {\n    const conditions =\n      filters.collection === \"patient\" ? patientConditions : otherConditions;\n    return conditions.filter((c) => {\n      if (filters.showHistoric) return true;\n\n      return [\"Active\", \"Pending\"].includes(c.displayStatus);\n    });\n  }\n\n  return { filters, updateFilters, applyFilters };\n}\n","import { toggleArchive } from \"../conditions-helper\";\nimport {\n  useAddConditionForm,\n  useConfirmDeleteCondition,\n  useEditConditionForm,\n} from \"./condition-hooks\";\nimport { ConditionModel } from \"@/fhir/models\";\nimport { RowActionsProps, useCTW } from \"@/index\";\n\nexport const PatientConditionHoverActions = ({\n  record,\n}: RowActionsProps<ConditionModel>) => {\n  const showEditConditionForm = useEditConditionForm();\n  const confirmDelete = useConfirmDeleteCondition();\n\n  return (\n    <div className=\"ctw-flex ctw-space-x-2\">\n      {!record.isDeleted && (\n        <button\n          type=\"button\"\n          className=\"ctw-btn-default\"\n          onClick={(event) => {\n            event.stopPropagation();\n            confirmDelete(record);\n          }}\n        >\n          Remove\n        </button>\n      )}\n\n      <button\n        type=\"button\"\n        className=\"ctw-btn-primary\"\n        onClick={(event) => {\n          event.stopPropagation();\n          showEditConditionForm(record);\n        }}\n      >\n        Edit\n      </button>\n    </div>\n  );\n};\n\nexport const OtherProviderConditionHoverActions = ({\n  record,\n}: RowActionsProps<ConditionModel>) => {\n  const showAddConditionForm = useAddConditionForm();\n  const { getRequestContext } = useCTW();\n\n  return (\n    <div className=\"ctw-flex ctw-space-x-2\">\n      <button\n        type=\"button\"\n        className=\"ctw-btn-default\"\n        onClick={async (event) => {\n          event.stopPropagation();\n          await toggleArchive(record, await getRequestContext());\n        }}\n      >\n        {record.isArchived ? \"Restore\" : \"Dismiss\"}\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"ctw-btn-primary\"\n        onClick={(event) => {\n          event.stopPropagation();\n          showAddConditionForm(record);\n        }}\n      >\n        Add\n      </button>\n    </div>\n  );\n};\n","import { Tab } from \"@headlessui/react\";\nimport cx from \"classnames\";\nimport { FilterCollection } from \"./patient-conditions-filters\";\nimport { Badge } from \"@/components/core/badge\";\nimport { ConditionModel } from \"@/fhir/models\";\n\nexport type PatientConditionsTabsProps = {\n  collection: FilterCollection;\n  otherConditions: ConditionModel[];\n  onCollectionChange: (collection: FilterCollection) => void;\n};\n\nexport function PatientConditionsTabs({\n  collection,\n  otherConditions,\n  onCollectionChange,\n}: PatientConditionsTabsProps) {\n  function activeClass(collection2: FilterCollection) {\n    return collection === collection2\n      ? \"ctw-text-content-black\"\n      : \"ctw-text-content-light\";\n  }\n\n  const activeCount = otherConditions.filter(\n    (condition) => condition.displayStatus === \"Active\"\n  ).length;\n\n  // Issue: Clicking on tab enables focus-visible and not only via keyboard interactions.\n  // Resolution: https://github.com/tailwindlabs/headlessui/issues/1694\n  function blurClicked() {\n    // Guard against server side where document isn't defined.\n    if (typeof document !== \"undefined\") {\n      requestAnimationFrame(() => {\n        if (document.activeElement instanceof HTMLElement) {\n          document.activeElement.blur();\n        }\n      });\n    }\n  }\n\n  const sharedTabStyles = \"ctw-relative ctw-tab-underline ctw-tab\";\n\n  return (\n    <div className=\"ctw-justify-end ctw-space-x-2 ctw-border-0 ctw-border-b ctw-border-t ctw-border-solid ctw-border-divider-light\">\n      <div className=\"ctw-space-x-4\">\n        <Tab.Group\n          // Keyboard navigation requires onChange instead of onClick.\n          onChange={(index) => {\n            onCollectionChange(index === 0 ? \"patient\" : \"other\");\n          }}\n        >\n          <Tab.List className=\"ctw-mt-3\">\n            <Tab\n              onClick={blurClicked}\n              className={({ selected }) =>\n                cx(activeClass(\"patient\"), sharedTabStyles, {\n                  \"ctw-tab-underline-selected\": selected,\n                })\n              }\n            >\n              Condition List\n            </Tab>\n            <Tab\n              onClick={blurClicked}\n              className={({ selected }) =>\n                cx(activeClass(\"other\"), sharedTabStyles, \"ctw-space-x-2\", {\n                  \"ctw-tab-underline-selected\": selected,\n                })\n              }\n            >\n              <span>Other Provider Records</span>\n              <Badge text={`${activeCount}`} color=\"primary\" />\n            </Tab>\n          </Tab.List>\n        </Tab.Group>\n      </div>\n    </div>\n  );\n}\n","import cx from \"classnames\";\nimport { useRef } from \"react\";\nimport { useConditionHistory } from \"../condition-history/conditions-history-drawer\";\nimport { filterOtherConditions } from \"./helpers\";\nimport { PatientConditionsActions } from \"./patient-conditions-actions\";\nimport { patientConditionsColumns } from \"./patient-conditions-columns\";\nimport { useConditionFilters } from \"./patient-conditions-filters\";\nimport {\n  OtherProviderConditionHoverActions,\n  PatientConditionHoverActions,\n} from \"./patient-conditions-menu-actions\";\nimport { PatientConditionsTabs } from \"./patient-conditions-tabs\";\nimport { withErrorBoundary } from \"@/components/core/error-boundary\";\nimport { FormEntry } from \"@/components/core/form/drawer-form-with-fields\";\nimport { Table } from \"@/components/core/table/table\";\nimport {\n  useOtherProviderConditions,\n  usePatientConditions,\n} from \"@/fhir/conditions\";\nimport { useBreakpoints } from \"@/hooks/use-breakpoints\";\nimport { AnyZodSchema } from \"@/utils/form-helper\";\nimport \"./patient-conditions.scss\";\n\nexport type PatientConditionsProps = {\n  className?: string;\n  readOnly?: boolean;\n};\n\nexport type ConditionFormData = {\n  schema: AnyZodSchema;\n  actionType: string;\n  data: FormEntry[] | undefined;\n  drawerIsOpen: boolean;\n};\n\nexport const PatientConditions = withErrorBoundary(\n  ({ className, readOnly = false }: PatientConditionsProps) => {\n    // State.\n    const { filters, updateFilters, applyFilters } = useConditionFilters();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const breakpoints = useBreakpoints(containerRef);\n\n    // Drawer helpers.\n    const showConditionHistory = useConditionHistory();\n\n    // Data fetching.\n    const patientConditionsQuery = usePatientConditions();\n    const otherConditionsQuery = useOtherProviderConditions();\n\n    function isLoading() {\n      const isLoadingPatient = patientConditionsQuery.isLoading;\n      const isLoadingOther = isLoadingPatient || otherConditionsQuery.isLoading;\n      return filters.collection === \"patient\"\n        ? isLoadingPatient\n        : isLoadingOther;\n    }\n\n    // Get our conditions.\n    const patientConditions = patientConditionsQuery.data ?? [];\n    const otherConditions = filterOtherConditions(\n      otherConditionsQuery.data ?? [],\n      patientConditions,\n      true\n    );\n    const conditions = applyFilters(patientConditions, otherConditions);\n    const RowActions =\n      filters.collection === \"patient\"\n        ? PatientConditionHoverActions\n        : OtherProviderConditionHoverActions;\n\n    return (\n      <div\n        ref={containerRef}\n        className={cx(\"ctw-patient-conditions\", className, {\n          \"ctw-patient-conditions-stacked\": breakpoints.sm,\n        })}\n      >\n        <div className=\"ctw-items-center ctw-justify-between ctw-py-5\">\n          <div className=\"ctw-ml-3 ctw-text-xl ctw-font-medium ctw-text-content-black\">\n            Conditions\n          </div>\n          <PatientConditionsTabs\n            otherConditions={otherConditions}\n            collection={filters.collection}\n            onCollectionChange={(collection) => updateFilters({ collection })}\n          />\n\n          <PatientConditionsActions\n            hideAdd={readOnly || filters.collection === \"other\"}\n            onToggleShowHistoric={() =>\n              updateFilters({ showHistoric: !filters.showHistoric })\n            }\n          />\n\n          <Table\n            stacked={breakpoints.sm}\n            className=\"-ctw-mx-px !ctw-rounded-none\"\n            showTableHead={false}\n            emptyMessage=\"There are no condition records available.\"\n            isLoading={isLoading()}\n            records={conditions}\n            RowActions={readOnly ? undefined : RowActions}\n            columns={patientConditionsColumns}\n            handleRowClick={(condition) =>\n              showConditionHistory({\n                condition,\n                readOnly: readOnly || condition.isSummaryResource,\n              })\n            }\n          />\n        </div>\n      </div>\n    );\n  },\n  \"PatientConditions\"\n);\n","import type { Meta, StoryObj } from \"@storybook/react\";\nimport { PatientConditions, PatientConditionsProps } from \"./patient-conditions\";\nimport { emptyConditions } from \"./story-helpers/mocks/empty-conditions\";\nimport { otherConditions } from \"./story-helpers/mocks/other-conditions\";\nimport { patientConditions } from \"./story-helpers/mocks/patient-conditions\";\nimport { setupConditionMocks } from \"./story-helpers/mocks/requests\";\nimport { CTWProvider } from \"@/components/core/providers/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/providers/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\ntype Props = PatientConditionsProps;\nexport default ({\n  component: PatientConditions,\n  tags: [\"autodocs\"],\n  argTypes: {\n    className: {\n      options: [\"Blank\", \"Fixed Width\"],\n      control: \"select\",\n      mapping: {\n        Blank: \"\",\n        \"Fixed Width\": \"ctw-m-auto ctw-max-w-[600px]\"\n      }\n    }\n  },\n  args: {\n    className: \"Blank\",\n    readOnly: false\n  },\n  decorators: [(Story, {\n    args\n  }) => <CTWProvider env=\"dev\" authToken=\"dummy-token\" builderId=\"b123\">\n        <PatientProvider patientID=\"u12345\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>]\n} as Meta<Props>);\nexport const Basic: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions,\n    patientConditions\n  })\n};\nexport const Empty: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions: emptyConditions,\n    patientConditions: emptyConditions\n  })\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  storySource: {\n    source: \"{\\n  ...setupConditionMocks({\\n    otherConditions,\\n    patientConditions\\n  })\\n}\",\n    ...Basic.parameters?.storySource\n  }\n};\nEmpty.parameters = {\n  ...Empty.parameters,\n  storySource: {\n    source: \"{\\n  ...setupConditionMocks({\\n    otherConditions: emptyConditions,\\n    patientConditions: emptyConditions\\n  })\\n}\",\n    ...Empty.parameters?.storySource\n  }\n};"],"names":["PatientConditionsActions","hideAdd","onToggleShowHistoric","showAddConditionForm","useAddConditionForm","React","Toggle","statusToColor","status","patientConditionsColumns","condition","cx","compact","_b","_a","onsetText","useConditionFilters","filters","setFilters","useState","updateFilters","newFilters","merge","cloneDeep","applyFilters","patientConditions","otherConditions","c","PatientConditionHoverActions","record","showEditConditionForm","useEditConditionForm","confirmDelete","useConfirmDeleteCondition","event","OtherProviderConditionHoverActions","getRequestContext","useCTW","toggleArchive","PatientConditionsTabs","collection","onCollectionChange","activeClass","collection2","activeCount","blurClicked","sharedTabStyles","Tab","index","selected","Badge","PatientConditions","withErrorBoundary","className","readOnly","containerRef","useRef","breakpoints","useBreakpoints","showConditionHistory","useConditionHistory","patientConditionsQuery","usePatientConditions","otherConditionsQuery","useOtherProviderConditions","isLoading","isLoadingPatient","isLoadingOther","filterOtherConditions","conditions","RowActions","Table","patientConditions_stories","Story","args","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupConditionMocks","Empty","emptyConditions"],"mappings":"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"}