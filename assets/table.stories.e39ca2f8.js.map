{"version":3,"file":"table.stories.e39ca2f8.js","sources":["../../src/components/core/table/table-head.tsx","../../src/components/core/table/table-data-cell.tsx","../../src/components/core/table/table-full-length-row.tsx","../../src/components/core/table/table-rows.tsx","../../src/components/core/pagination/pagination.tsx","../../src/components/core/table/table-colgroup.tsx","../../src/components/core/table/table.tsx","../../src/components/core/table/table.stories.tsx"],"sourcesContent":["import type { MinRecordItem, TableColumn } from \"./table\";\n\nexport type TableHeadProps<T extends MinRecordItem> = {\n  columns: TableColumn<T>[];\n};\n\nexport const TableHead = <T extends MinRecordItem>({\n  columns,\n}: TableHeadProps<T>) => (\n  <thead>\n    <tr>\n      {columns.map((column, index) => (\n        <th key={column.title ?? index} scope=\"col\">\n          {column.title}\n        </th>\n      ))}\n    </tr>\n  </thead>\n);\n","import cx from \"classnames\";\nimport { ReactNode } from \"react\";\n\nimport type { MinRecordItem, TableColumn } from \"./table\";\n\ntype TableColumnProps<T extends MinRecordItem> = {\n  column: TableColumn<T>;\n  record: T;\n  index: number;\n};\n\nexport const TableDataCell = <T extends MinRecordItem>({\n  column,\n  record,\n  index,\n}: TableColumnProps<T>): JSX.Element => {\n  const value = column.dataIndex\n    ? (record[column.dataIndex] as unknown as ReactNode)\n    : undefined;\n\n  return (\n    <td\n      key={column.title ?? index}\n      className={cx(\n        { \"ctw-font-medium ctw-text-content-black\": index === 0 },\n        column.className,\n        // Added ctw-break-words because AbdominalReallyLongWordThatShouldBReakButDoeskadjlkajflkajsf doesn't wrap correclty without it.\n        \"ctw-hyphens-auto ctw-break-words\"\n      )}\n    >\n      {column.render ? column.render(record) : value}\n    </td>\n  );\n};\n","import { ReactNode } from \"react\";\n\nexport const TableFullLengthRow = ({\n  children,\n  colSpan,\n}: {\n  children: ReactNode;\n  colSpan: number;\n}) => (\n  <tr>\n    <td\n      className=\"ctw-flex ctw-flex-col ctw-items-center ctw-p-6 ctw-text-content-light\"\n      colSpan={colSpan}\n    >\n      {children}\n    </td>\n  </tr>\n);\n","import cx from \"classnames\";\nimport { ReactElement } from \"react\";\nimport { Spinner } from \"../spinner\";\nimport type { MinRecordItem, TableColumn } from \"./table\";\nimport { TableDataCell } from \"./table-data-cell\";\nimport { TableFullLengthRow } from \"./table-full-length-row\";\n\ntype TableRowsProps<T extends MinRecordItem> = {\n  records: T[];\n  columns: TableColumn<T>[];\n  isLoading: boolean;\n  emptyMessage: string | ReactElement;\n  handleRowClick?: (record: T) => void;\n};\n\nexport const TableRows = <T extends MinRecordItem>({\n  records,\n  columns,\n  isLoading,\n  emptyMessage,\n  handleRowClick,\n}: TableRowsProps<T>) => {\n  if (isLoading) {\n    return (\n      <TableFullLengthRow colSpan={columns.length}>\n        <div className=\"ctw-flex ctw-justify-center ctw-space-x-2\">\n          <span>Loading...</span>\n          <Spinner />\n        </div>\n      </TableFullLengthRow>\n    );\n  }\n\n  if (records.length === 0) {\n    return (\n      <TableFullLengthRow colSpan={columns.length}>\n        {emptyMessage}\n      </TableFullLengthRow>\n    );\n  }\n\n  return (\n    <>\n      {records.map((record) => (\n        <tr\n          className={cx({\n            \"ctw-cursor-pointer\": typeof handleRowClick === \"function\",\n          })}\n          key={record.id}\n          onClick={() => {\n            if (handleRowClick) handleRowClick(record);\n          }}\n        >\n          {columns.map((column, index) => (\n            <TableDataCell\n              key={column.title ?? index}\n              column={column}\n              record={record}\n              index={index}\n            />\n          ))}\n        </tr>\n      ))}\n    </>\n  );\n};\n","export const DEFAULT_PAGE_SIZE = 10;\n\nexport type PaginationProps = {\n  total: number;\n  count: number;\n  changeCount: (amount: number) => void;\n};\n\nexport const Pagination = ({ total, count, changeCount }: PaginationProps) => {\n  const allShown = count >= total || total === 0;\n\n  return (\n    <div className=\"ctw-pagination ctw-flex ctw-items-center ctw-justify-between ctw-px-6\">\n      <div className=\"ctw-text-gray-600 ctw-text-sm\">\n        Showing{\" \"}\n        <span className=\"ctw-font-medium\">{Math.min(count, total)}</span> of{\" \"}\n        <span className=\"ctw-font-medium\">{total}</span> results\n      </div>\n      <div className=\"ctw-flex ctw-h-full ctw-justify-end ctw-space-x-3\">\n        {!allShown && total > DEFAULT_PAGE_SIZE * 2 && (\n          <button\n            type=\"button\"\n            className=\"ctw-btn-default\"\n            onClick={() => changeCount(count + DEFAULT_PAGE_SIZE)}\n          >\n            Show More\n          </button>\n        )}\n        {!allShown && (\n          <button\n            type=\"button\"\n            className=\"ctw-btn-primary ctw-w-28 ctw-whitespace-nowrap\"\n            onClick={() => changeCount(total)}\n          >\n            Show All\n          </button>\n        )}\n        {allShown && total > DEFAULT_PAGE_SIZE && (\n          <button\n            type=\"button\"\n            className=\"ctw-btn-primary ctw-w-28 ctw-whitespace-nowrap\"\n            onClick={() => changeCount(DEFAULT_PAGE_SIZE)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n","import type { MinRecordItem, TableColumn } from \"./table\";\n\nexport type TableColGroupProps<T extends MinRecordItem> = {\n  columns: TableColumn<T>[];\n};\n\nexport const TableColGroup = <T extends MinRecordItem>({\n  columns,\n}: TableColGroupProps<T>) => (\n  <colgroup>\n    {columns.map((column, index) => (\n      <col\n        key={column.title ?? index}\n        className={column.className}\n        style={{\n          minWidth: column.minWidth,\n          width: `${column.widthPercent}%`,\n        }}\n      />\n    ))}\n  </colgroup>\n);\n","import cx from \"classnames\";\nimport { ReactElement, ReactNode, useEffect, useRef, useState } from \"react\";\n\nimport { TableHead } from \"./table-head\";\nimport { TableRows } from \"./table-rows\";\nimport \"./table.scss\";\n\nimport { DEFAULT_PAGE_SIZE, Pagination } from \"../pagination/pagination\";\nimport { TableColGroup } from \"./table-colgroup\";\n\nexport interface MinRecordItem {\n  id: string | number;\n}\n\ntype DataIndexSpecified<T> = { dataIndex: keyof T; render?: never };\ntype RenderSpecified<T> = { dataIndex?: never; render: (row: T) => ReactNode };\n\n// A table column has an optional title\n// and then either a dataIndex or a render method but not both.\nexport type TableColumn<T extends MinRecordItem> = {\n  title?: string;\n  className?: string;\n  widthPercent?: number;\n  minWidth?: number;\n} & (DataIndexSpecified<T> | RenderSpecified<T>);\n\nexport type TableProps<T extends MinRecordItem> = {\n  className?: string;\n  records: T[];\n  columns: TableColumn<T>[];\n  isLoading?: boolean;\n  /** Displayed when we have 0 records. */\n  message?: string | ReactElement;\n  showTableHead?: boolean;\n  stacked?: boolean;\n  handleRowClick?: (record: T) => void;\n};\n\nexport type TableBaseProps<T extends MinRecordItem> = Omit<\n  TableProps<T>,\n  \"records\" | \"columns\"\n>;\n\nexport const Table = <T extends MinRecordItem>({\n  className,\n  columns,\n  records,\n  isLoading = false,\n  message = \"No records found\",\n  showTableHead = true,\n  stacked,\n  handleRowClick,\n}: TableProps<T>) => {\n  const tableRef = useRef<HTMLTableElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [showLeftShadow, setShowLeftShadow] = useState(false);\n  const [showRightShadow, setShowRightShadow] = useState(false);\n  const [count, setCount] = useState(DEFAULT_PAGE_SIZE);\n\n  const updateShadows = () => {\n    const container = scrollContainerRef.current;\n    const table = tableRef.current;\n    if (container && table) {\n      setShowLeftShadow(container.scrollLeft > 0);\n      const rightSide = container.scrollLeft + container.clientWidth;\n      setShowRightShadow(rightSide < table.clientWidth);\n    }\n  };\n\n  useEffect(() => {\n    const container = scrollContainerRef.current;\n\n    // Update right away.\n    updateShadows();\n\n    // Update on scroll or resize events.\n    container?.addEventListener(\"scroll\", updateShadows);\n    window.addEventListener(\"resize\", updateShadows);\n\n    return () => {\n      container?.removeEventListener(\"scroll\", updateShadows);\n      window.removeEventListener(\"resize\", updateShadows);\n    };\n  }, [scrollContainerRef, isLoading]);\n\n  const hasData = !isLoading && records.length > 0;\n\n  return (\n    <div\n      className={cx(\"ctw-space-y-4\", className, {\n        \"ctw-table-stacked\": stacked,\n      })}\n    >\n      <div\n        className={cx(\"ctw-table-container\", \"ctw-table\", {\n          \"ctw-table-scroll-left-shadow\": showLeftShadow,\n          \"ctw-table-scroll-right-shadow\": showRightShadow,\n        })}\n      >\n        <div className=\"ctw-scrollbar\" ref={scrollContainerRef}>\n          <table ref={tableRef}>\n            {hasData && <TableColGroup columns={columns} />}\n            {showTableHead && hasData && <TableHead columns={columns} />}\n\n            <tbody>\n              <TableRows\n                records={records.slice(0, count)}\n                handleRowClick={handleRowClick}\n                columns={columns}\n                isLoading={isLoading}\n                emptyMessage={message}\n              />\n            </tbody>\n          </table>\n        </div>\n      </div>\n      {records.length > 0 && !isLoading && (\n        <Pagination\n          total={records.length}\n          count={count}\n          changeCount={setCount}\n        />\n      )}\n    </div>\n  );\n};\n","import { Table, TableColumn, TableProps } from \"@/components/core/table/table\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\n\ntype Record = {\n  id: string;\n  name: string;\n};\n\ntype Props = TableProps<Record>;\n\nexport default {\n  component: Table,\n  tags: [\"docsPage\"],\n  argTypes: {\n    message: {\n      options: [\"Default\", \"String\", \"ReactElement\"],\n      mapping: {\n        Default: undefined,\n        String: \"Ain't no records here friend\",\n        ReactElement: (\n          <div className=\"ctw-space-y-4\">\n            <div className=\"ctw-text-error-main\">\n              I said <b>NO RECORDS</b> found!\n            </div>\n            <div>I hope that is OK</div>\n          </div>\n        ),\n      },\n    },\n  },\n} as Meta<Props>;\n\nconst columns: TableColumn<Record>[] = [\n  {\n    title: \"Id\",\n    dataIndex: \"id\",\n    className: \"ctw-w-[20%]\",\n  },\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    className: \"ctw-w-[20%]\",\n  },\n  {\n    title: \"With Render\",\n    render: (row: Record) => (\n      <div>\n        Render function for row {row.id}: <b>{row.name.split(\" \")[0]}</b>\n      </div>\n    ),\n    className: \"ctw-w-[30%]\",\n  },\n  {\n    className: \"ctw-table-action-column\",\n    render: (row: Record) => <div>...</div>,\n  },\n];\n\nconst records: Record[] = [\n  { id: \"one\", name: \"First record\" },\n  { id: \"two\", name: \"Second record\" },\n  { id: \"three\", name: \"Third record\" },\n  { id: \"four\", name: \"Fourth record\" },\n];\n\nexport const Basic: StoryObj<Props> = {\n  args: {\n    records,\n    columns,\n  },\n};\n\nconst manyRecords = [...records];\nfor (let i = records.length + 1; i <= 35; i += 1) {\n  manyRecords.push({ id: `${i}`, name: `${i} Record` });\n}\nexport const Paging: StoryObj<Props> = {\n  args: {\n    records: manyRecords,\n    columns,\n  },\n};\n\nexport const Empty: StoryObj<Props> = {\n  args: {\n    message: \"Default\",\n    records: [],\n    columns: [],\n  },\n};\n\nexport const Loading: StoryObj<Props> = {\n  args: {\n    records: [],\n    columns: [],\n    isLoading: true,\n  },\n};\n\nexport const Stacked: StoryObj<Props> = {\n  parameters: {\n    docs: {\n      description: {\n        story:\n          \"Stacked version of table, good for sidepanels and smaller screens (responsive).\",\n      },\n    },\n  },\n  args: {\n    ...Basic.args,\n    className: \"ctw-m-auto ctw-max-w-[600px]\",\n    stacked: true,\n  },\n};\n"],"names":["TableHead","columns","React","column","index","_a","TableDataCell","record","value","cx","TableFullLengthRow","children","colSpan","TableRows","records","isLoading","emptyMessage","handleRowClick","Spinner","DEFAULT_PAGE_SIZE","Pagination","total","count","changeCount","allShown","TableColGroup","Table","className","message","showTableHead","stacked","tableRef","useRef","scrollContainerRef","showLeftShadow","setShowLeftShadow","useState","showRightShadow","setShowRightShadow","setCount","updateShadows","container","table","rightSide","useEffect","hasData","table_stories","row","Basic","manyRecords","i","Paging","Empty","Loading","Stacked"],"mappings":"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"}