{"version":3,"file":"conditions.stories-62c98959.js","sources":["../../src/components/content/conditions-table-base.tsx","../../src/components/content/conditions-no-patient.tsx","../../src/components/content/forms/schemas/request-history-schema.tsx","../../src/api/patient-history.ts","../../src/components/content/patient-history-request-drawer.tsx","../../src/components/content/patient-history/patient-history-message.tsx","../../src/services/patient-history/patient-history.ts","../../src/components/content/conditions.tsx","../../src/components/content/conditions/story-helpers/condition-form-drawer.ts","../../src/components/content/conditions/story-helpers/condition-table.ts","../../src/components/content/conditions/story-helpers/conditions.ts","../../src/components/content/conditions/story-helpers/mocks/empty-conditions.ts","../../src/components/content/conditions/conditions.stories.tsx"],"sourcesContent":["import { DotsHorizontalIcon } from \"@heroicons/react/outline\";\nimport { DropdownMenu, MenuItem } from \"../core/dropdown-menu\";\nimport { Table, TableBaseProps } from \"../core/table/table\";\nimport { TableColumn } from \"../core/table/table-helpers\";\nimport { ConditionModel } from \"@/fhir/models/condition\";\n\nexport type ConditionsTableBaseProps = {\n  className?: string;\n  conditions: ConditionModel[];\n  rowMenuActions: (condition: ConditionModel) => MenuItem[];\n  hideMenu: boolean;\n} & TableBaseProps<ConditionModel>;\n\nexport function ConditionsTableBase({\n  className,\n  conditions,\n  rowMenuActions,\n  hideMenu,\n  sort = { columnTitle: \"Last Recorded\", dir: \"desc\" },\n  onSort,\n  ...tableProps\n}: ConditionsTableBaseProps) {\n  const columns: TableColumn<ConditionModel>[] = [\n    {\n      title: \"Condition\",\n      dataIndex: \"display\",\n      widthPercent: 40,\n      minWidth: 320,\n      sortIndices: [{ index: \"display\" }, { index: \"recorded\", dir: \"desc\" }],\n    },\n    {\n      title: \"Category\",\n      dataIndex: \"ccsGrouping\",\n      widthPercent: 25,\n      minWidth: 192,\n      sortIndices: [{ index: \"ccsGrouping\" }, { index: \"display\", dir: \"asc\" }],\n    },\n    {\n      title: \"Status\",\n      render: (condition) => (\n        <div className=\"ctw-capitalize\">\n          <div className=\"ctw-text-content-black\">\n            {condition.clinicalStatus}\n          </div>\n          <div>\n            {condition.isArchived ? \"Archived\" : condition.verificationStatus}\n          </div>\n        </div>\n      ),\n      widthPercent: 17.5,\n      minWidth: 128,\n      sortIndices: [\n        { index: \"clinicalStatus\" },\n        { index: \"verificationStatus\" },\n        { index: \"recorded\", dir: \"desc\" },\n      ],\n    },\n    {\n      title: \"Last Recorded\",\n      dataIndex: \"recordedDate\",\n      widthPercent: 17.5,\n      minWidth: 132,\n      sortIndices: [{ index: \"recorded\" }, { index: \"display\", dir: \"asc\" }],\n    },\n  ];\n\n  if (!hideMenu) {\n    columns.push({\n      className: \"ctw-table-action-column\",\n      render: (condition: ConditionModel) => (\n        <DropdownMenu menuItems={rowMenuActions(condition)}>\n          <DotsHorizontalIcon className=\"ctw-w-5\" />\n        </DropdownMenu>\n      ),\n    });\n  }\n\n  return (\n    <Table\n      className={className}\n      records={conditions}\n      columns={columns}\n      sort={sort}\n      onSort={onSort}\n      {...tableProps}\n    />\n  );\n}\n","import cx from \"classnames\";\nimport { CautionAlert } from \"../core/alert\";\n\nexport function ConditionsNoPatient({ className }: { className?: string }) {\n  return (\n    <div className={cx(\"ctw-conditions\", className)}>\n      <div className=\"ctw-heading-container\">\n        <div className=\"ctw-title\">Conditions</div>\n      </div>\n      <div className=\"ctw-p-5\">\n        <CautionAlert header=\"Conditions Unavailable\">\n          <div>\n            We are unable to access Condition information for this patient.\n          </div>\n          <div>\n            Contact your system administrator or customer service for\n            assistance.\n          </div>\n        </CautionAlert>\n      </div>\n    </div>\n  );\n}\n","import { z } from \"zod\";\nimport { FormEntry } from \"@/components/core/form/drawer-form-with-fields\";\nimport { PatientModel } from \"@/fhir/models\";\n\nexport const getRequestData = (patient: PatientModel): FormEntry[] => [\n  {\n    label: \"treating-provider\",\n    render: () => (\n      <div className=\"ctw-font-medium\">\n        Who is the treating provider for this patient?\n      </div>\n    ),\n  },\n  {\n    label: \"Practitioner Name\",\n    field: \"name\",\n    value: \"\",\n    readonly: false,\n  },\n  [\n    {\n      label: \"NPI\",\n      field: \"npi\",\n      value: \"\",\n      readonly: false,\n    },\n    {\n      label: \"Role\",\n      field: \"role\",\n      value: \"\",\n      readonly: false,\n    },\n  ],\n  {\n    label: \"patient-information\",\n    render: () => (\n      <div>\n        <div className=\"ctw-font-medium\">\n          Is the patient information below correct and up-to-date?\n        </div>\n        <div>\n          Complete as many fields as possible to increase matching results.\n        </div>\n      </div>\n    ),\n  },\n  {\n    label: \"First Name\",\n    field: \"firstName\",\n    value: patient.firstName,\n    readonly: false,\n  },\n  {\n    label: \"Last Name\",\n    field: \"lastName\",\n    value: patient.lastName,\n    readonly: false,\n  },\n  [\n    {\n      label: \"Date of Birth\",\n      field: \"dateOfBirth\",\n      value: patient.dob,\n      readonly: false,\n    },\n    {\n      label: \"Gender\",\n      field: \"gender\",\n      value: patient.gender,\n      readonly: false,\n    },\n  ],\n  {\n    label: \"Address\",\n    field: \"address\",\n    value: patient.homeAddress?.line?.join(\", \"),\n    readonly: false,\n  },\n  {\n    label: \"City\",\n    field: \"city\",\n    value: patient.homeAddress?.city,\n    readonly: false,\n  },\n  [\n    {\n      label: \"State\",\n      field: \"state\",\n      value: patient.homeAddress?.state,\n      readonly: false,\n    },\n    {\n      label: \"Zip\",\n      field: \"zipCode\",\n      value: patient.homeAddress?.postalCode,\n      readonly: false,\n    },\n  ],\n  {\n    label: \"Phone\",\n    field: \"phone\",\n    value: patient.phoneNumber,\n    readonly: false,\n  },\n  {\n    label: \"Email\",\n    field: \"email\",\n    value: patient.email,\n    readonly: false,\n  },\n];\n\nexport const requestHistorySchema = z.object({\n  name: z.string({\n    required_error: \"Practitioner name must be specified.\",\n  }),\n  npi: z\n    .string({\n      required_error: \"NPI must be specified.\",\n    })\n    .length(10),\n  role: z.enum([\"Doctor\", \"Nurse\", \"Other\"]),\n  firstName: z.string({\n    required_error: \"First name must be specified.\",\n  }),\n  lastName: z.string({\n    required_error: \"Last name must be specified.\",\n  }),\n  dateOfBirth: z\n    .date()\n    .max(new Date(), { message: \"Date of birth cannot be a future date.\" }),\n  gender: z.enum([\"-\", \"male\", \"female\", \"other\", \"unknown\"]),\n  address: z.string({\n    required_error: \"Address must be specified.\",\n  }),\n  city: z.string({\n    required_error: \"City must be specified.\",\n  }),\n  state: z.string({\n    required_error: \"State must be specified.\",\n  }),\n  zipCode: z.string({\n    required_error: \"Zip code must be specified.\",\n  }),\n  phone: z.string().optional(),\n  email: z.string().optional(),\n});\n","import { getZusApiBaseUrl } from \"./urls\";\nimport { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { ctwFetch } from \"@/utils/request\";\n\nexport type PatientHistoryResponseError = {\n  // TODO: Can code be a list of status codes? Do we have that type defined anywhere.\n  code: number;\n  title: string;\n  details: string;\n};\n\nexport const schedulePatientHistory = async (\n  requestContext: CTWRequestContext,\n  patientID: string,\n  resultData: { npi: string; role: string; name: string }\n) => {\n  const endpointUrl = `${getZusApiBaseUrl(\n    requestContext.env\n  )}/patient-history/patient/${patientID}/refresh?consent=1`;\n\n  try {\n    const response = await ctwFetch(endpointUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${requestContext.authToken}`,\n        \"practitioner-npi\": resultData.npi,\n        \"practitioner-role\": resultData.role.toLocaleLowerCase(),\n        \"practitioner-name\": resultData.name,\n        ...(requestContext.contextBuilderId && {\n          \"Zus-Account\": requestContext.contextBuilderId,\n        }),\n      },\n    });\n    return await response.json();\n  } catch (e) {\n    throw Error(`Error scheduling patient history job with id of ${patientID}`);\n  }\n};\n","import { Dispatch, SetStateAction } from \"react\";\nimport {\n  DrawerFormWithFields,\n  DrawerFormWithFieldsProps,\n} from \"../core/form/drawer-form-with-fields\";\nimport { CTWRequestContext } from \"../core/providers/ctw-context\";\nimport { useHandlePatientSave } from \"../core/providers/patient-provider\";\nimport { PatientFormData } from \"./forms/actions/patients\";\nimport {\n  getRequestData,\n  requestHistorySchema,\n} from \"./forms/schemas/request-history-schema\";\nimport {\n  PatientHistoryResponseError,\n  schedulePatientHistory,\n} from \"@/api/patient-history\";\nimport { PatientModel } from \"@/fhir/models\";\nimport { getFormResponseErrors } from \"@/utils/errors\";\n\ntype PatientHistoryRequestDrawer<T> = Pick<\n  DrawerFormWithFieldsProps<T>,\n  \"isOpen\" | \"onClose\" | \"header\"\n> & {\n  patient: PatientModel;\n  setClinicalHistoryExists: Dispatch<SetStateAction<boolean | undefined>>;\n};\n\nexport type ScheduleHistoryFormData = {\n  npi: string;\n  role: string;\n  name: string;\n};\n\nexport const PatientHistoryRequestDrawer = <T,>({\n  patient,\n  header,\n  isOpen,\n  onClose,\n  setClinicalHistoryExists,\n}: PatientHistoryRequestDrawer<T>) => {\n  const onPatientSave = useHandlePatientSave(patient);\n\n  const onPatientSaveAndScheduleHistory = async (\n    data: PatientFormData & ScheduleHistoryFormData,\n    getRequestContext: () => Promise<CTWRequestContext>\n  ) => {\n    try {\n      await onPatientSave(data);\n    } catch (e) {\n      const { requestErrors, responseIsSuccess } = getFormResponseErrors(e);\n      if (!responseIsSuccess) {\n        return new Error(requestErrors.join(\",\"));\n      }\n\n      return new Error(\"Failed to save patient data.\");\n    }\n\n    const requestContext = await getRequestContext();\n    const patientHistoryResponse = await schedulePatientHistory(\n      requestContext,\n      patient.id,\n      data\n    );\n\n    if (\"errors\" in patientHistoryResponse) {\n      const requestErrors = [\n        patientHistoryResponse.errors.map(\n          (err: PatientHistoryResponseError) => err.details\n        ),\n      ];\n      return new Error(requestErrors.join(\",\"));\n    }\n\n    // patientHistoryResponse has succeeded at this point and should remove empty request history state.\n    setClinicalHistoryExists(true);\n\n    return patientHistoryResponse;\n  };\n  return (\n    <DrawerFormWithFields\n      header={header}\n      title=\"Request Records\"\n      action={onPatientSaveAndScheduleHistory}\n      data={getRequestData(patient)}\n      schema={requestHistorySchema}\n      isOpen={isOpen}\n      onClose={onClose}\n    />\n  );\n};\n","export type PatientHistoryProps = {\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n};\n\nexport const PatientHistoryMessage = ({ onClick }: PatientHistoryProps) => (\n  <div className=\"ctw-flex ctw-justify-center ctw-space-x-2 ctw-border ctw-border-solid ctw-border-divider-light ctw-p-5\">\n    <div className=\"ctw-flex ctw-justify-center ctw-text-icon-default\">\n      Retrieve patient clinical history.\n    </div>\n    <button type=\"button\" className=\"ctw-btn-clear ctw-link\" onClick={onClick}>\n      Request Records\n    </button>\n  </div>\n);\n","import { PatientRefreshHistoryMessage } from \"./patient-history-types\";\nimport { getZusApiBaseUrl } from \"@/api/urls\";\nimport { CTWRequestContext } from \"@/components/core/providers/ctw-context\";\nimport { errorResponse } from \"@/utils/errors\";\nimport { ctwFetch } from \"@/utils/request\";\n\nexport async function getPatientRefreshHistoryMessages(\n  requestContext: CTWRequestContext,\n  patientID: string\n) {\n  const endpointUrl = `${getZusApiBaseUrl(\n    requestContext.env\n  )}/patient-history/messages?patient-id=${patientID}`;\n\n  try {\n    const response = await ctwFetch(endpointUrl, {\n      headers: {\n        Authorization: `Bearer ${requestContext.authToken}`,\n        ...(requestContext.contextBuilderId && {\n          \"Zus-Account\": requestContext.contextBuilderId,\n        }),\n      },\n    });\n    const result = await response.json();\n\n    /* eslint no-underscore-dangle: 0 */\n    return Object.values(result.data) as PatientRefreshHistoryMessage[];\n  } catch (err) {\n    throw errorResponse(\n      \"Failed fetching patient refresh history messages\",\n      err\n    );\n  }\n}\n\nexport async function hasFetchedPatientHistory(\n  requestContext: CTWRequestContext,\n  patientID: string\n): Promise<boolean> {\n  const messages = await getPatientRefreshHistoryMessages(\n    requestContext,\n    patientID\n  );\n\n  if (messages.length === 0) {\n    return false;\n  }\n  // This is the case for messages.length > 0 which is the current workaround.\n  return true;\n}\n","import cx from \"classnames\";\nimport { curry } from \"lodash\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  DrawerFormWithFields,\n  FormActionTypes,\n  FormEntry,\n} from \"../core/form/drawer-form-with-fields\";\nimport { ModalConfirmDelete } from \"../core/modal-confirm-delete\";\nimport { useCTW } from \"../core/providers/ctw-provider\";\nimport { usePatient } from \"../core/providers/patient-provider\";\nimport { TableSort } from \"../core/table/table-helpers\";\nimport { ToggleControl } from \"../core/toggle-control\";\nimport { ConditionHeader } from \"./condition-header\";\nimport { useConditionHistory } from \"./condition-history/conditions-history-drawer\";\nimport { onConditionDelete, toggleArchive } from \"./conditions-helper\";\nimport { ConditionsNoPatient } from \"./conditions-no-patient\";\nimport { ConditionsTableBase } from \"./conditions-table-base\";\nimport \"./conditions.scss\";\nimport { filterOtherConditions } from \"./conditions/helpers\";\nimport {\n  createOrEditCondition,\n  getAddConditionWithDefaults,\n} from \"./forms/actions/conditions\";\nimport { getAddConditionData } from \"./forms/schemas/condition-schema\";\nimport { PatientHistoryRequestDrawer } from \"./patient-history-request-drawer\";\nimport { PatientHistoryMessage } from \"./patient-history/patient-history-message\";\nimport {\n  conditionAddSchema,\n  conditionEditSchema,\n  getEditingPatientConditionData,\n} from \"@/components/content/forms/schemas/condition-schema\";\nimport {\n  getNewCondition,\n  useOtherProviderConditions,\n  usePatientConditions,\n} from \"@/fhir/conditions\";\nimport { ConditionModel } from \"@/fhir/models/condition\";\nimport { useBreakpoints } from \"@/hooks/use-breakpoints\";\nimport { hasFetchedPatientHistory } from \"@/services/patient-history/patient-history\";\nimport { AnyZodSchema } from \"@/utils/form-helper\";\n\nexport type ConditionsProps = {\n  className?: string;\n  readOnly?: boolean;\n};\n\nconst EMPTY_MESSAGE_PATIENT_RECORD =\n  \"There are no conditions in this patient's record.\";\nconst EMPTY_MESSAGE_PROVIDER = \"There are no conditions available.\";\nconst ERROR_MSG =\n  \"There was an error fetching conditions for this patient. Refresh the page or contact your organization's technical support if this issue persists.\";\n\nexport function Conditions({ className, readOnly = false }: ConditionsProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const breakpoints = useBreakpoints(containerRef);\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\n\n  const showConditionHistory = useConditionHistory();\n  const [requestRecordsDrawerIsOpen, setRequestDrawerIsOpen] = useState(false);\n  const [patientRecords, setPatientRecords] = useState<ConditionModel[]>([]);\n  const [otherProviderRecords, setOtherProviderRecords] = useState<\n    ConditionModel[]\n  >([]);\n  const [includeInactive, setIncludeInactive] = useState(false);\n  const [formAction, setFormAction] = useState<FormActionTypes>(\"Add\");\n  const [schema, setSchema] = useState<AnyZodSchema>(conditionAddSchema);\n  const [currentSelectedData, setCurrentlySelectedData] =\n    useState<FormEntry[]>();\n  const [selectedCondition, setSelectedCondition] = useState<ConditionModel>();\n  const patientResponse = usePatient();\n  const patientRecordsResponse = usePatientConditions();\n  const otherProviderRecordsResponse = useOtherProviderConditions();\n  const { getRequestContext } = useCTW();\n  const [sort, setSort] = useState<TableSort>();\n\n  const [clinicalHistoryExists, setClinicalHistoryExists] = useState<boolean>();\n\n  const patientRecordsMessage = patientRecordsResponse.isError\n    ? ERROR_MSG\n    : EMPTY_MESSAGE_PATIENT_RECORD;\n\n  const otherProviderRecordMessage = otherProviderRecordsResponse.isError\n    ? ERROR_MSG\n    : EMPTY_MESSAGE_PROVIDER;\n\n  const handleEditCondition = (condition: ConditionModel) => {\n    if (patientResponse.data) {\n      setDrawerIsOpen(true);\n      setFormAction(\"Edit\");\n      setSchema(conditionEditSchema);\n      setCurrentlySelectedData(getEditingPatientConditionData({ condition }));\n      setSelectedCondition(condition);\n    }\n  };\n\n  const handleConditionDelete = (condition: ConditionModel) => {\n    setShowConfirmDelete(true);\n    setSelectedCondition(condition);\n  };\n\n  const handleAddOtherProviderCondition = (condition: ConditionModel) => {\n    const newCondition = getAddConditionWithDefaults(condition.resource);\n\n    if (patientResponse.data) {\n      setSchema(conditionAddSchema);\n      setDrawerIsOpen(true);\n      setFormAction(\"Add\");\n      setCurrentlySelectedData(\n        getAddConditionData({\n          condition: new ConditionModel(newCondition),\n        })\n      );\n    }\n  };\n\n  const handleAddNewCondition = () => {\n    if (!patientResponse.data) return;\n\n    const newCondition = getNewCondition(patientResponse.data.id);\n    setDrawerIsOpen(true);\n    setSchema(conditionAddSchema);\n    setCurrentlySelectedData(\n      getAddConditionData({\n        condition: new ConditionModel(newCondition),\n      })\n    );\n  };\n\n  const addConditionBtn = (\n    <button\n      className=\"ctw-btn-primary\"\n      type=\"button\"\n      onClick={handleAddNewCondition}\n    >\n      Add Condition\n    </button>\n  );\n\n  const shouldShowClinicalHistoryArea =\n    clinicalHistoryExists ||\n    (otherProviderRecordsResponse.data &&\n      otherProviderRecordsResponse.data.length > 0);\n\n  const checkClinicalHistory = async (patientID: string) => {\n    const requestContext = await getRequestContext();\n\n    const patientHistoryFetched = await hasFetchedPatientHistory(\n      requestContext,\n      patientID\n    );\n\n    setClinicalHistoryExists(patientHistoryFetched);\n  };\n\n  useEffect(() => {\n    async function load() {\n      const patientConditions = patientRecordsResponse.data;\n      const otherConditions = otherProviderRecordsResponse.data;\n\n      if (patientConditions) {\n        setPatientRecords(\n          patientConditions.filter((c) => c.active || includeInactive)\n        );\n\n        if (otherConditions) {\n          setOtherProviderRecords(\n            filterOtherConditions(\n              otherConditions,\n              patientConditions,\n              includeInactive\n            )\n          );\n        } else {\n          setOtherProviderRecords([]);\n        }\n      }\n\n      if (patientRecordsResponse.error) {\n        setPatientRecords([]);\n        setOtherProviderRecords([]);\n      }\n    }\n    void load();\n    if (patientResponse.data?.id && clinicalHistoryExists === undefined) {\n      void checkClinicalHistory(patientResponse.data.id);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    includeInactive,\n    patientResponse.data,\n    patientRecordsResponse.data,\n    otherProviderRecordsResponse.data,\n    clinicalHistoryExists,\n    patientRecordsResponse.error,\n  ]);\n\n  if (patientResponse.isError) {\n    return <ConditionsNoPatient className={className} />;\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={cx(\"ctw-conditions\", className, {\n        \"ctw-conditions-stacked\": breakpoints.sm,\n      })}\n    >\n      {!readOnly && (\n        <div className=\"ctw-conditions-heading-container\">\n          <div className=\"ctw-title\">Conditions</div>\n          <button\n            type=\"button\"\n            className=\"ctw-btn-clear ctw-link\"\n            onClick={handleAddNewCondition}\n          >\n            + Add Condition\n          </button>\n        </div>\n      )}\n\n      <div className=\"ctw-conditions-body-container\">\n        <div className=\"ctw-space-y-3\">\n          <div className=\"ctw-conditions-title-container\">\n            <div className=\"ctw-title\">Patient Record</div>\n            <ToggleControl\n              onFormChange={() => setIncludeInactive(!includeInactive)}\n              toggleProps={{ name: \"conditions\", text: \"Include Inactive\" }}\n            />\n          </div>\n\n          <ConditionsTableBase\n            stacked={breakpoints.sm}\n            conditions={patientRecords}\n            isLoading={patientRecordsResponse.isLoading}\n            hideMenu={readOnly}\n            sort={sort}\n            onSort={(newSort) => setSort(newSort)}\n            emptyMessage={\n              <>\n                <div>{patientRecordsMessage}</div>\n                {!patientRecordsResponse.isError && !readOnly && (\n                  <div className=\"ctw-mt-5\">{addConditionBtn}</div>\n                )}\n              </>\n            }\n            rowMenuActions={(condition) => [\n              {\n                name: \"Edit\",\n                action: async () => {\n                  handleEditCondition(condition);\n                },\n              },\n              {\n                name: \"View History\",\n                action: async () => {\n                  showConditionHistory({\n                    condition,\n                    readOnly,\n                  });\n                },\n              },\n              {\n                name: \"Delete\",\n                className: \"dangerous\",\n                action: async () => {\n                  handleConditionDelete(condition);\n                },\n              },\n            ]}\n          />\n        </div>\n        <div className=\"ctw-space-y-3\">\n          <div className=\"ctw-conditions-title-container\">\n            <div className=\"ctw-title\">Other Provider Records</div>\n            {shouldShowClinicalHistoryArea && (\n              <button\n                type=\"button\"\n                className=\"ctw-btn-clear ctw-link\"\n                onClick={() => setRequestDrawerIsOpen(true)}\n              >\n                Request Records\n              </button>\n            )}\n          </div>\n          {shouldShowClinicalHistoryArea ? (\n            <ConditionsTableBase\n              className=\"ctw-conditions-not-reviewed\"\n              stacked={breakpoints.sm}\n              conditions={otherProviderRecords}\n              sort={sort}\n              onSort={(newSort) => setSort(newSort)}\n              isLoading={\n                otherProviderRecordsResponse.isLoading ||\n                patientRecordsResponse.isLoading\n              }\n              hideMenu={readOnly}\n              emptyMessage={otherProviderRecordMessage}\n              rowMenuActions={(condition) => [\n                {\n                  name: \"Add\",\n                  action: async () => {\n                    handleAddOtherProviderCondition(condition);\n                  },\n                },\n                {\n                  name: \"View History\",\n                  action: async () => {\n                    showConditionHistory({ condition, readOnly: true });\n                  },\n                },\n                {\n                  name: condition.isArchived ? \"Un-Archive\" : \"Archive\",\n                  action: async () => {\n                    const requestContext = await getRequestContext();\n                    await toggleArchive(condition, requestContext);\n                  },\n                },\n              ]}\n            />\n          ) : (\n            <PatientHistoryMessage\n              onClick={() => setRequestDrawerIsOpen(true)}\n            />\n          )}\n        </div>\n      </div>\n\n      {patientResponse.data && (\n        <DrawerFormWithFields\n          title={`${formAction} Condition`}\n          header={\n            formAction === \"Edit\" &&\n            selectedCondition && (\n              <ConditionHeader condition={selectedCondition} />\n            )\n          }\n          action={curry(createOrEditCondition)(\n            selectedCondition,\n            patientResponse.data.id\n          )}\n          data={currentSelectedData}\n          schema={schema}\n          isOpen={drawerIsOpen}\n          onClose={() => setDrawerIsOpen(false)}\n        />\n      )}\n\n      {patientResponse.data && (\n        <PatientHistoryRequestDrawer\n          header={\n            <div className=\"ctw-pt-0 ctw-text-base\">\n              Request patient clinical history from 70K+ providers across the\n              nation. No changes will be made to your patient record.\n            </div>\n          }\n          patient={patientResponse.data}\n          isOpen={requestRecordsDrawerIsOpen}\n          onClose={() => setRequestDrawerIsOpen(false)}\n          setClinicalHistoryExists={setClinicalHistoryExists}\n        />\n      )}\n\n      {selectedCondition && patientResponse.data && (\n        <ModalConfirmDelete\n          resource={selectedCondition}\n          resourceName={selectedCondition.display || \"unnamed condition\"}\n          onClose={() => setShowConfirmDelete(false)}\n          isOpen={showConfirmDelete}\n          onDelete={async () => {\n            const requestContext = await getRequestContext();\n            await onConditionDelete(selectedCondition.resource, requestContext);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","import {\n  userEvent,\n  waitForElementToBeRemoved,\n  within,\n} from \"@storybook/testing-library\";\n\nexport function conditionFormDrawer(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  const drawer = within(canvas.getByRole(\"dialog\"));\n\n  return {\n    conditionSearch: (search: string) =>\n      userEvent.type(drawer.getByPlaceholderText(\"Type to search\"), search),\n    selectCondition: async (name: string) =>\n      userEvent.click(await drawer.findByRole(\"option\", { name })),\n    status: (status: string) =>\n      userEvent.selectOptions(drawer.getByLabelText(\"Status\"), status),\n\n    onset: (date: string) =>\n      userEvent.type(drawer.getByLabelText(\"Onset\"), date),\n    abatement: (date: string) =>\n      userEvent.type(drawer.getByLabelText(\"Abatement\"), date),\n    note: (note: string) => userEvent.type(drawer.getByLabelText(\"Note\"), note),\n\n    cancel: () =>\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Cancel\" })),\n    save: async () => {\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Save\" }));\n      await waitForElementToBeRemoved(() => canvas.queryByRole(\"dialog\"));\n    },\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport {\n  userEvent,\n  waitFor,\n  waitForElementToBeRemoved,\n  within,\n} from \"@storybook/testing-library\";\n\nexport function conditionTable(\n  canvasElement: HTMLElement,\n  tableEl: HTMLElement\n) {\n  const canvas = within(canvasElement);\n  const table = within(tableEl);\n\n  async function openMenu(row: number) {\n    userEvent.click(getRow(row).getByRole(\"button\", { name: /dropdown/i }));\n    await canvas.findAllByRole(\"menuitem\");\n  }\n\n  function clickMenu(menuItem: string) {\n    userEvent.click(canvas.getByRole(\"menuitem\", { name: menuItem }));\n  }\n\n  function getRow(row: number) {\n    const tbody = table.getAllByRole(\"rowgroup\")[1];\n    return within(within(tbody).queryAllByRole(\"row\")[row]);\n  }\n\n  return {\n    table,\n    // We use waitFor here as there is a race condition\n    // when switching between tests, where the new\n    // mocked data has yet to update.\n    toHaveRowCount: async (count: number) => {\n      const tbody = table.getAllByRole(\"rowgroup\")[1];\n      if (count === 0) {\n        await waitFor(() => expect(tbody).toBeFalsy());\n      } else {\n        await waitFor(() =>\n          expect(within(tbody).queryAllByRole(\"row\")).toHaveLength(count)\n        );\n      }\n    },\n    toHaveRowWithText: (row: number, text: string | RegExp) => {\n      getRow(row).getByText(text);\n    },\n    add: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Add\");\n    },\n    delete: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Delete\");\n      userEvent.click(await canvas.findByRole(\"button\", { name: /remove/i }));\n      await waitForElementToBeRemoved(() => canvas.queryByRole(\"dialog\"));\n    },\n    edit: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"Edit\");\n    },\n    viewHistory: async (row: number) => {\n      await openMenu(row);\n      clickMenu(\"View History\");\n    },\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport { userEvent, waitFor, within } from \"@storybook/testing-library\";\nimport { conditionTable } from \"./condition-table\";\n\nexport async function conditionsObject(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  await waitFor(() => expect(canvas.queryAllByRole(\"table\")).toHaveLength(2));\n  const tables = canvas.queryAllByRole(\"table\");\n  const patientRecord = conditionTable(canvasElement, tables[0]);\n  const otherProvider = conditionTable(canvasElement, tables[1]);\n\n  // Wait for loading to finish, we should have an active condition in each table.\n  await patientRecord.table.findAllByText(\"active\");\n  await otherProvider.table.findAllByText(\"active\");\n\n  return {\n    clickAddCondition: () =>\n      userEvent.click(canvas.getByRole(\"button\", { name: \"+ Add Condition\" })),\n\n    toggleInactive: () =>\n      userEvent.click(canvas.getByLabelText(\"Include Inactive\")),\n\n    patientRecord,\n    otherProvider,\n  };\n}\n","export const emptyConditions: fhir4.Bundle = {\n  resourceType: \"Bundle\",\n  id: \"eacb4f45-4e83-45db-9114-7d3e05eb1fb3\",\n  meta: {\n    lastUpdated: \"2022-11-16T15:13:00.795+00:00\",\n  },\n  type: \"searchset\",\n  total: 0,\n  entry: [],\n};\n","import { expect } from \"@storybook/jest\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport { userEvent, waitFor, within } from \"@storybook/testing-library\";\nimport { Conditions, ConditionsProps } from \"../conditions\";\nimport { conditionFormDrawer } from \"./story-helpers/condition-form-drawer\";\nimport { conditionsObject } from \"./story-helpers/conditions\";\nimport { emptyConditions } from \"./story-helpers/mocks/empty-conditions\";\nimport { otherConditions } from \"./story-helpers/mocks/other-conditions\";\nimport { patientConditions } from \"./story-helpers/mocks/patient-conditions\";\nimport { setupConditionMocks } from \"./story-helpers/mocks/requests\";\nimport { CTWProvider } from \"@/components/core/providers/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/providers/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\ntype Props = ConditionsProps;\nexport default ({\n  component: Conditions,\n  tags: [\"docsPage\"],\n  argTypes: {\n    className: {\n      options: [\"Blank\", \"Fixed Width\"],\n      control: \"select\",\n      mapping: {\n        Blank: \"\",\n        \"Fixed Width\": \"ctw-m-auto ctw-max-w-[600px]\"\n      }\n    }\n  },\n  args: {\n    className: \"Blank\",\n    readOnly: false\n  },\n  decorators: [(Story, {\n    args\n  }) => <CTWProvider env=\"dev\" authToken=\"dummy-token\" builderId=\"b123\">\n        <PatientProvider patientID=\"u12345\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>]\n} as Meta<Props>);\nexport const Basic: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions,\n    patientConditions\n  })\n};\nexport const Empty: StoryObj<Props> = {\n  ...setupConditionMocks({\n    otherConditions: emptyConditions,\n    patientConditions: emptyConditions\n  })\n};\nexport const TestAdd: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    const newCondition = \"Heart failure (disorder)\";\n    conditions.clickAddCondition();\n    const conditionForm = conditionFormDrawer(canvasElement);\n    conditionForm.conditionSearch(\"heart\");\n    await conditionForm.selectCondition(newCondition);\n    conditionForm.status(\"Active\");\n    conditionForm.onset(\"2020-02-14\");\n    await conditionForm.save();\n    await conditions.patientRecord.toHaveRowCount(3);\n    expect(await conditions.patientRecord.table.findByText(newCondition)).toBeTruthy();\n  }\n};\nexport const TestAddOther: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.otherProvider.add(2);\n    const conditionForm = conditionFormDrawer(canvasElement);\n    await conditionForm.save();\n    await conditions.patientRecord.toHaveRowCount(3);\n    expect(await conditions.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy();\n  }\n};\nexport const TestEdit: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.edit(0);\n    const conditionForm = conditionFormDrawer(canvasElement);\n    conditionForm.note(\"hello world\");\n    await conditionForm.save();\n    conditions.patientRecord.toHaveRowWithText(0, /confirmed/i);\n  }\n};\nexport const TestDelete: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.delete(0);\n    await conditions.patientRecord.toHaveRowCount(1);\n    conditions.toggleInactive();\n    await conditions.patientRecord.toHaveRowCount(3);\n    conditions.patientRecord.toHaveRowWithText(1, /entered-in-error/i);\n    conditions.toggleInactive();\n    await conditions.patientRecord.toHaveRowCount(1);\n  }\n};\nexport const TestViewHistory: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const conditions = await conditionsObject(canvasElement);\n    await conditions.patientRecord.toHaveRowCount(2);\n    await conditions.patientRecord.viewHistory(0);\n    const canvas = within(canvasElement);\n    await waitFor(() => expect(canvas.queryAllByRole(\"dialog\")).toHaveLength(1));\n    const drawer = within(canvas.getByRole(\"dialog\"));\n    expect(await drawer.findByText(/generalized anxiety disorder/i)).toBeTruthy();\n    await waitFor(() => expect(drawer.getAllByRole(\"button\", {\n      name: /details/i\n    })).toHaveLength(3));\n    userEvent.click(drawer.getAllByRole(\"button\", {\n      name: /close/i\n    })[0]);\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  storySource: {\n    source: \"{\\n  ...setupConditionMocks({\\n    otherConditions,\\n    patientConditions\\n  })\\n}\",\n    ...Basic.parameters?.storySource\n  }\n};\nEmpty.parameters = {\n  ...Empty.parameters,\n  storySource: {\n    source: \"{\\n  ...setupConditionMocks({\\n    otherConditions: emptyConditions,\\n    patientConditions: emptyConditions\\n  })\\n}\",\n    ...Empty.parameters?.storySource\n  }\n};\nTestAdd.parameters = {\n  ...TestAdd.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    const newCondition = \\\"Heart failure (disorder)\\\";\\n    conditions.clickAddCondition();\\n    const conditionForm = conditionFormDrawer(canvasElement);\\n    conditionForm.conditionSearch(\\\"heart\\\");\\n    await conditionForm.selectCondition(newCondition);\\n    conditionForm.status(\\\"Active\\\");\\n    conditionForm.onset(\\\"2020-02-14\\\");\\n    await conditionForm.save();\\n    await conditions.patientRecord.toHaveRowCount(3);\\n    expect(await conditions.patientRecord.table.findByText(newCondition)).toBeTruthy();\\n  }\\n}\",\n    ...TestAdd.parameters?.storySource\n  }\n};\nTestAddOther.parameters = {\n  ...TestAddOther.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    await conditions.otherProvider.add(2);\\n    const conditionForm = conditionFormDrawer(canvasElement);\\n    await conditionForm.save();\\n    await conditions.patientRecord.toHaveRowCount(3);\\n    expect(await conditions.patientRecord.table.findByText(/iron deficiency/i)).toBeTruthy();\\n  }\\n}\",\n    ...TestAddOther.parameters?.storySource\n  }\n};\nTestEdit.parameters = {\n  ...TestEdit.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    await conditions.patientRecord.edit(0);\\n    const conditionForm = conditionFormDrawer(canvasElement);\\n    conditionForm.note(\\\"hello world\\\");\\n    await conditionForm.save();\\n    conditions.patientRecord.toHaveRowWithText(0, /confirmed/i);\\n  }\\n}\",\n    ...TestEdit.parameters?.storySource\n  }\n};\nTestDelete.parameters = {\n  ...TestDelete.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    await conditions.patientRecord.delete(0);\\n    await conditions.patientRecord.toHaveRowCount(1);\\n    conditions.toggleInactive();\\n    await conditions.patientRecord.toHaveRowCount(3);\\n    conditions.patientRecord.toHaveRowWithText(1, /entered-in-error/i);\\n    conditions.toggleInactive();\\n    await conditions.patientRecord.toHaveRowCount(1);\\n  }\\n}\",\n    ...TestDelete.parameters?.storySource\n  }\n};\nTestViewHistory.parameters = {\n  ...TestViewHistory.parameters,\n  storySource: {\n    source: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const conditions = await conditionsObject(canvasElement);\\n    await conditions.patientRecord.toHaveRowCount(2);\\n    await conditions.patientRecord.viewHistory(0);\\n    const canvas = within(canvasElement);\\n    await waitFor(() => expect(canvas.queryAllByRole(\\\"dialog\\\")).toHaveLength(1));\\n    const drawer = within(canvas.getByRole(\\\"dialog\\\"));\\n    expect(await drawer.findByText(/generalized anxiety disorder/i)).toBeTruthy();\\n    await waitFor(() => expect(drawer.getAllByRole(\\\"button\\\", {\\n      name: /details/i\\n    })).toHaveLength(3));\\n    userEvent.click(drawer.getAllByRole(\\\"button\\\", {\\n      name: /close/i\\n    })[0]);\\n  }\\n}\",\n    ...TestViewHistory.parameters?.storySource\n  }\n};"],"names":["ConditionsTableBase","className","conditions","rowMenuActions","hideMenu","sort","onSort","tableProps","columns","condition","React","DropdownMenu","DotsHorizontalIcon","Table","ConditionsNoPatient","cx","CautionAlert","getRequestData","patient","_b","_a","_c","_d","_e","requestHistorySchema","z","schedulePatientHistory","requestContext","patientID","resultData","endpointUrl","getZusApiBaseUrl","ctwFetch","PatientHistoryRequestDrawer","header","isOpen","onClose","setClinicalHistoryExists","onPatientSave","useHandlePatientSave","onPatientSaveAndScheduleHistory","data","getRequestContext","e","requestErrors","responseIsSuccess","getFormResponseErrors","patientHistoryResponse","err","DrawerFormWithFields","PatientHistoryMessage","onClick","getPatientRefreshHistoryMessages","result","errorResponse","hasFetchedPatientHistory","EMPTY_MESSAGE_PATIENT_RECORD","EMPTY_MESSAGE_PROVIDER","ERROR_MSG","Conditions","readOnly","containerRef","useRef","breakpoints","useBreakpoints","drawerIsOpen","setDrawerIsOpen","useState","showConfirmDelete","setShowConfirmDelete","showConditionHistory","useConditionHistory","requestRecordsDrawerIsOpen","setRequestDrawerIsOpen","patientRecords","setPatientRecords","otherProviderRecords","setOtherProviderRecords","includeInactive","setIncludeInactive","formAction","setFormAction","schema","setSchema","conditionAddSchema","currentSelectedData","setCurrentlySelectedData","selectedCondition","setSelectedCondition","patientResponse","usePatient","patientRecordsResponse","usePatientConditions","otherProviderRecordsResponse","useOtherProviderConditions","useCTW","setSort","clinicalHistoryExists","patientRecordsMessage","otherProviderRecordMessage","handleEditCondition","conditionEditSchema","getEditingPatientConditionData","handleConditionDelete","handleAddOtherProviderCondition","newCondition","getAddConditionWithDefaults","getAddConditionData","ConditionModel","handleAddNewCondition","getNewCondition","addConditionBtn","shouldShowClinicalHistoryArea","checkClinicalHistory","patientHistoryFetched","useEffect","load","patientConditions","otherConditions","c","filterOtherConditions","ToggleControl","newSort","toggleArchive","ConditionHeader","curry","createOrEditCondition","ModalConfirmDelete","onConditionDelete","conditionFormDrawer","canvasElement","canvas","within","drawer","search","userEvent","name","status","date","note","waitForElementToBeRemoved","conditionTable","tableEl","table","openMenu","row","getRow","clickMenu","menuItem","tbody","count","waitFor","expect","text","conditionsObject","tables","patientRecord","otherProvider","emptyConditions","conditions_stories","Story","args","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupConditionMocks","Empty","TestAdd","conditionForm","TestAddOther","TestEdit","TestDelete","TestViewHistory"],"mappings":"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"}