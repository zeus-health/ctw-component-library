{"version":3,"file":"patient-medications-tabbed.stories-9cb4e213.js","sources":["../../src/components/content/medications/provider-inactive-medications-table.tsx","../../src/components/content/medications/patient-medications-tabbed.tsx","../../src/components/content/medications/patient-medications-tabbed.stories.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useMedicationHistory } from \"./medication-history-drawer\";\nimport {\n  MedsHistoryTempProps as MedHistoryTempProps,\n  MedicationsTableBase,\n} from \"@/components/content/medications-table-base\";\nimport { MedicationStatementModel } from \"@/fhir/models/medication-statement\";\nimport { useQueryAllPatientMedications } from \"@/hooks/use-medications\";\nimport { get, isFunction, pipe, toLower } from \"@/utils/nodash/fp\";\nimport { sort } from \"@/utils/sort\";\n\nexport type InactiveMedRecordsTableProps = {\n  className?: string;\n} & MedHistoryTempProps;\n\n/**\n * Displays a table of inactive medication records. These are builder-owned medications\n * that have a status other than \"active\". These are not to be confused with \"dismissed\" or \"archived\"\n * medication records pulled from the network of other providers.\n */\nexport function ProviderInactiveMedicationsTable({\n  className,\n  onAfterOpenHistoryDrawer,\n  onOpenHistoryDrawer,\n}: InactiveMedRecordsTableProps) {\n  const [medicationModels, setMedicationModels] = useState<\n    MedicationStatementModel[]\n  >([]);\n  const openMedHistoryDrawer = useMedicationHistory();\n  const { builderMedications, isLoading } = useQueryAllPatientMedications();\n\n  function openHistoryDrawer(row: MedicationStatementModel) {\n    // Temp - onOpen and onAfterOpen should be side-effect free as\n    // they may be called after component unmounts. We added\n    // this to support a bug-fix workaround in canvas.\n    if (isFunction(onOpenHistoryDrawer)) {\n      onOpenHistoryDrawer();\n    }\n    openMedHistoryDrawer({ medication: row });\n    setTimeout(() => {\n      if (isFunction(onAfterOpenHistoryDrawer)) {\n        onAfterOpenHistoryDrawer();\n      }\n    }, 0);\n  }\n\n  useEffect(() => {\n    if (!builderMedications) return;\n    setMedicationModels(\n      sort(\n        builderMedications.filter((bm) => bm.displayStatus !== \"Active\"),\n        pipe(get(\"display\"), toLower),\n        \"asc\"\n      )\n    );\n  }, [builderMedications]);\n\n  return (\n    <>\n      <MedicationsTableBase\n        className={className}\n        medicationStatements={medicationModels}\n        isLoading={isLoading}\n        handleRowClick={openHistoryDrawer}\n      />\n    </>\n  );\n}\n","import type {\n  FilterChangeEvent,\n  FilterItem,\n} from \"@/components/core/filter-bar/filter-bar-types\";\nimport cx from \"classnames\";\nimport { useEffect, useState } from \"react\";\nimport { MedsHistoryTempProps } from \"@/components/content/medications-table-base\";\nimport {\n  BadgeOtherProviderMedCount,\n  OtherProviderMedsTable,\n  OtherProviderMedsTableProps,\n} from \"@/components/content/medications/other-provider-meds-table\";\nimport { ProviderInactiveMedicationsTable } from \"@/components/content/medications/provider-inactive-medications-table\";\nimport { ProviderMedsTable } from \"@/components/content/medications/provider-meds-table\";\nimport * as CTWBox from \"@/components/core/ctw-box\";\nimport { FilterBar } from \"@/components/core/filter-bar/filter-bar\";\nimport { TabGroup, TabGroupItem } from \"@/components/core/tab-group/tab-group\";\nimport { MedicationStatementModel } from \"@/fhir/models\";\nimport \"./patient-medications.scss\";\nimport { useQueryAllPatientMedications } from \"@/hooks/use-medications\";\nimport { compact } from \"@/utils/nodash\";\nimport { uniq } from \"@/utils/nodash/fp\";\n\nexport type PatientMedicationsTabbedProps = {\n  className?: string;\n  forceHorizontalTabs?: boolean;\n} & TabbedContentProps;\n\ntype TabbedContentProps = Pick<\n  OtherProviderMedsTableProps,\n  \"hideAddToRecord\" | \"handleAddToRecord\"\n> &\n  MedsHistoryTempProps;\n\n// We use getPanelClassName on all tabs except for the other-provider-records\n// tab because without the FilterBar there is no margin between tab and panel\n// when md - lg sized.\nconst tabbedContent = (\n  tabbedContentProps: TabbedContentProps\n): TabGroupItem<MedicationStatementModel>[] => [\n  {\n    key: \"medication-list\",\n    getPanelClassName: (sm: boolean) => (sm ? \"ctw-mt-0\" : \"ctw-mt-2\"),\n    display: () => \"medication list\",\n    render: () => (\n      <ProviderMedsTable\n        onOpenHistoryDrawer={tabbedContentProps.onOpenHistoryDrawer}\n        onAfterOpenHistoryDrawer={tabbedContentProps.onAfterOpenHistoryDrawer}\n      />\n    ),\n  },\n  {\n    key: \"inactive-provider-records\",\n    getPanelClassName: (sm: boolean) => (sm ? \"ctw-mt-0\" : \"ctw-mt-2\"),\n    display: () => \"inactive\",\n    render: () => (\n      <ProviderInactiveMedicationsTable\n        onOpenHistoryDrawer={tabbedContentProps.onOpenHistoryDrawer}\n        onAfterOpenHistoryDrawer={tabbedContentProps.onAfterOpenHistoryDrawer}\n      />\n    ),\n  },\n  {\n    key: \"other-provider-records\",\n    display: () => (\n      <>\n        <span className=\"ctw-pr-2 ctw-capitalize\">other provider records</span>\n        <BadgeOtherProviderMedCount />\n      </>\n    ),\n    render: () => <OtherProviderMedsTableTab {...tabbedContentProps} />,\n  },\n];\n\nexport function OtherProviderMedsTableTab({\n  handleAddToRecord,\n  hideAddToRecord,\n  onOpenHistoryDrawer,\n  onAfterOpenHistoryDrawer,\n}: PatientMedicationsTabbedProps) {\n  const [filters, setFilters] = useState<FilterChangeEvent>({});\n  const [records, setRecords] = useState<MedicationStatementModel[]>([]);\n  const { otherProviderMedications, isLoading } =\n    useQueryAllPatientMedications();\n\n  useEffect(() => {\n    if (!isLoading && otherProviderMedications) {\n      const filteredRecords = otherProviderMedications.filter((medication) => {\n        if (\n          Array.isArray(filters.providers?.selected) &&\n          filters.providers?.selected.length\n        ) {\n          return filters.providers.selected.includes(\n            medication.lastPrescriber as string\n          );\n        }\n        return true;\n      });\n      setRecords(filteredRecords);\n    }\n  }, [filters, otherProviderMedications, isLoading]);\n\n  const showDismissed = \"dismissed\" in filters;\n  const showInactive = \"inactive\" in filters;\n\n  // Create a list of prescriber names to use in a filter\n  const prescriberNames = !otherProviderMedications\n    ? []\n    : (uniq(\n        otherProviderMedications\n          .map((medication) => medication.lastPrescriber)\n          .filter((s) => typeof s === \"string\")\n      ) as string[]);\n\n  const filterItems: FilterItem[] = compact([\n    {\n      key: \"dismissed\",\n      type: \"tag\",\n      icon: \"eye\",\n      display: ({ active }) =>\n        active ? \"dismissed records\" : \"show dismissed records\",\n    },\n    !otherProviderMedications || prescriberNames.length < 2\n      ? null\n      : {\n          key: \"providers\",\n          type: \"checkbox\",\n          icon: \"clipboard\",\n          values: prescriberNames,\n          display: \"prescriber\",\n        },\n  ]);\n\n  return (\n    <>\n      <FilterBar filters={filterItems} handleOnChange={setFilters} />\n      <OtherProviderMedsTable\n        records={records}\n        handleAddToRecord={handleAddToRecord}\n        hideAddToRecord={hideAddToRecord}\n        showDismissed={showDismissed}\n        showInactive={showInactive}\n        onOpenHistoryDrawer={onOpenHistoryDrawer}\n        onAfterOpenHistoryDrawer={onAfterOpenHistoryDrawer}\n      />\n    </>\n  );\n}\n\n/**\n * This component is a tabbed view of patient medications from the current\n * provider, other providers and historical. When rendered in a small breakpoint\n * the component will change from horizontal tabs to a vertical dropdown menu.\n * If this is undesired, you may set the property `forceHorizontalTabs` to true\n * and the tabs will remain visible and horizontal. The `forceHorizontalTabs`\n * prop will not prevent the medication tables from switching to their stacked\n * view when viewed on smaller screens.\n */\nexport function PatientMedicationsTabbed({\n  className,\n  forceHorizontalTabs = false,\n  ...tabbedContentProps\n}: PatientMedicationsTabbedProps) {\n  const tabItems = tabbedContent(tabbedContentProps);\n\n  return (\n    <CTWBox.StackedWrapper\n      className={cx(\n        \"ctw-patient-medications ctw-space-y-3 ctw-bg-white\",\n        className\n      )}\n    >\n      <TabGroup\n        content={tabItems}\n        forceHorizontalTabs={forceHorizontalTabs}\n        className={className}\n      />\n    </CTWBox.StackedWrapper>\n  );\n}\n","import type { Meta, StoryObj } from \"@storybook/react\";\nimport { setupMedicationMocks } from \"./story-helpers/mocks/requests\";\nimport { PatientMedicationsTabbed, PatientMedicationsTabbedProps } from \"@/components/content/medications/patient-medications-tabbed\";\nimport { otherProviderMedications } from \"@/components/content/medications/story-helpers/mocks/other-provider-medications\";\nimport { providerMedications } from \"@/components/content/medications/story-helpers/mocks/provider-medications\";\nimport { CTWProvider } from \"@/components/core/providers/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/providers/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\ntype Props = PatientMedicationsTabbedProps;\nexport default ({\n  tags: [\"autodocs\"],\n  component: PatientMedicationsTabbed,\n  decorators: [(Story, {\n    args\n  }) => <CTWProvider env=\"dev\" authToken=\"ey.12345\" builderId=\"12345\">\n        <PatientProvider patientID=\"007\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>],\n  args: {\n    hideAddToRecord: undefined,\n    forceHorizontalTabs: undefined,\n    onAfterOpenHistoryDrawer: undefined,\n    onOpenHistoryDrawer: undefined\n  }\n} as Meta<Props>);\nexport const Basic: StoryObj<Props> = {\n  ...setupMedicationMocks({\n    providerMedications,\n    otherProviderMedications\n  })\n};\nexport const ForceHorizontalTabs: StoryObj<Props> = {\n  ...Basic,\n  args: {\n    forceHorizontalTabs: true\n  }\n};\nexport const HideAddToRecord: StoryObj<Props> = {\n  ...Basic,\n  args: {\n    hideAddToRecord: true\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...setupMedicationMocks({\\n    providerMedications,\\n    otherProviderMedications\\n  })\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nForceHorizontalTabs.parameters = {\n  ...ForceHorizontalTabs.parameters,\n  docs: {\n    ...ForceHorizontalTabs.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...Basic,\\n  args: {\\n    forceHorizontalTabs: true\\n  }\\n}\",\n      ...ForceHorizontalTabs.parameters?.docs?.source\n    }\n  }\n};\nHideAddToRecord.parameters = {\n  ...HideAddToRecord.parameters,\n  docs: {\n    ...HideAddToRecord.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...Basic,\\n  args: {\\n    hideAddToRecord: true\\n  }\\n}\",\n      ...HideAddToRecord.parameters?.docs?.source\n    }\n  }\n};"],"names":["ProviderInactiveMedicationsTable","className","onAfterOpenHistoryDrawer","onOpenHistoryDrawer","medicationModels","setMedicationModels","useState","openMedHistoryDrawer","useMedicationHistory","builderMedications","isLoading","useQueryAllPatientMedications","openHistoryDrawer","row","isFunction","useEffect","sort","bm","pipe","get","toLower","React","MedicationsTableBase","tabbedContent","tabbedContentProps","sm","ProviderMedsTable","BadgeOtherProviderMedCount","OtherProviderMedsTableTab","handleAddToRecord","hideAddToRecord","filters","setFilters","records","setRecords","otherProviderMedications","filteredRecords","medication","_a","_b","showDismissed","showInactive","prescriberNames","uniq","s","filterItems","compact","active","FilterBar","OtherProviderMedsTable","PatientMedicationsTabbed","forceHorizontalTabs","tabItems","CTWBox.StackedWrapper","cx","TabGroup","patientMedicationsTabbed_stories","Story","args","CTWProvider","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupMedicationMocks","providerMedications","ForceHorizontalTabs","HideAddToRecord","_c"],"mappings":"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"}