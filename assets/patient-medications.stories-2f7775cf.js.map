{"version":3,"file":"patient-medications.stories-2f7775cf.js","sources":["../../src/components/content/medications/story-helpers/medication-form-drawer.ts","../../src/components/content/medications/story-helpers/patient-medications.ts","../../src/components/content/medications/patient-medications.stories.tsx"],"sourcesContent":["import { userEvent, waitFor, within } from \"@storybook/testing-library\";\n\nexport async function medicationFormDrawer(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  const drawer = await waitFor(() => within(canvas.getByRole(\"dialog\")));\n\n  return {\n    search: (search: string) =>\n      userEvent.type(drawer.getByPlaceholderText(\"Type to search\"), search),\n    selectMedication: async (name: string) =>\n      userEvent.click(await drawer.findByRole(\"option\", { name })),\n    status: (status: string) =>\n      userEvent.selectOptions(drawer.getByTestId(\"form-field-status\"), status),\n    instructions: (instructions: string) =>\n      userEvent.type(drawer.getByLabelText(\"Instructions\"), instructions),\n    cancel: () =>\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Cancel\" })),\n    save: async () => {\n      userEvent.click(drawer.getByRole(\"button\", { name: \"Save\" }));\n    },\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport { userEvent, waitFor, within } from \"@storybook/testing-library\";\n\nexport async function medicationsTables(canvasElement: HTMLElement) {\n  const canvas = within(canvasElement);\n  await waitFor(() => expect(canvas.queryAllByRole(\"table\")).toHaveLength(2));\n  const tables = canvas.queryAllByRole(\"table\");\n  const patientRecord = singleMedicationsTable(canvasElement, tables[0]);\n  const otherProvider = singleMedicationsTable(canvasElement, tables[1]);\n\n  return {\n    patientRecord,\n    otherProvider,\n    clickAddMedication: () =>\n      userEvent.click(canvas.getByTestId(\"button.add-medication\")),\n  };\n}\n\nexport function singleMedicationsTable(\n  canvasElement: HTMLElement,\n  tableEl: HTMLElement\n) {\n  async function clickInRow(row: number, menuItemId: string) {\n    userEvent.hover(getRow(row));\n    userEvent.click(within(getRow(row)).getByTestId(menuItemId));\n  }\n\n  function getRow(row: number) {\n    const tbody = within(tableEl).getAllByRole(\"rowgroup\")[1];\n    return within(tbody).queryAllByRole(\"row\")[row];\n  }\n\n  return {\n    table: within(tableEl),\n    // When switching between tests, we need to wait for the\n    // mocked data to refresh/update.\n    toHaveRowCount: async (count: number) => {\n      if (count === 0) {\n        await waitFor(() => {\n          const tbody = within(tableEl).getAllByRole(\"rowgroup\")[1];\n          expect(tbody).toBeFalsy();\n        });\n      } else {\n        await waitFor(() => {\n          const tbody = within(tableEl).getAllByRole(\"rowgroup\")[1];\n          expect(within(tbody).queryAllByRole(\"row\")).toHaveLength(count);\n        });\n      }\n    },\n    toHaveRowWithText: (row: number, text: string | RegExp) =>\n      within(getRow(row)).getByText(text),\n    toHaveAnyRowWithText: async (text: string | RegExp) => {\n      const tbody = await within(tableEl).getAllByRole(\"rowgroup\")[1];\n      expect(\n        within(tbody)\n          .getAllByRole(\"row\")\n          .some((next) => !!within(next).queryByText(text))\n      ).toBeTruthy();\n    },\n    addToRecord: (row: number) => clickInRow(row, \"add-to-record\"),\n  };\n}\n","import { expect } from \"@storybook/jest\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport { setupMedicationMocks } from \"./story-helpers/mocks/requests\";\nimport { PatientMedications, PatientMedicationsProps } from \"@/components/content/medications/patient-medications\";\nimport { medicationFormDrawer } from \"@/components/content/medications/story-helpers/medication-form-drawer\";\nimport { otherProviderMedications } from \"@/components/content/medications/story-helpers/mocks/other-provider-medications\";\nimport { providerMedications } from \"@/components/content/medications/story-helpers/mocks/provider-medications\";\nimport { medicationsTables } from \"@/components/content/medications/story-helpers/patient-medications\";\nimport { CTWProvider } from \"@/components/core/providers/ctw-provider\";\nimport { PatientProvider } from \"@/components/core/providers/patient-provider\";\nimport { SYSTEM_ZUS_UNIVERSAL_ID } from \"@/fhir/system-urls\";\ntype Props = PatientMedicationsProps;\nexport default ({\n  tags: [\"autodocs\"],\n  component: PatientMedications,\n  decorators: [(Story, {\n    args\n  }) => <CTWProvider env=\"dev\" authToken=\"ey.12345\" builderId=\"12345\">\n        <PatientProvider patientID=\"007\" systemURL={SYSTEM_ZUS_UNIVERSAL_ID}>\n          <Story args={args} />\n        </PatientProvider>\n      </CTWProvider>]\n} as Meta<Props>);\nexport const Basic: StoryObj<Props> = {\n  ...setupMedicationMocks({\n    providerMedications,\n    otherProviderMedications\n  })\n};\nexport const HideAddToRecord: StoryObj<Props> = {\n  ...Basic,\n  args: {\n    hideAddToRecord: true\n  }\n};\nexport const TestAddNewMed: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const medications = await medicationsTables(canvasElement);\n    await medications.patientRecord.toHaveRowCount(1);\n    const newMedication = \"albendazole 200 MG Oral Tablet [Albenza]\";\n    medications.clickAddMedication();\n    const addMedicationForm = await medicationFormDrawer(canvasElement);\n    addMedicationForm.search(\"alb\");\n    await addMedicationForm.selectMedication(newMedication);\n    addMedicationForm.status(\"Active\");\n    addMedicationForm.instructions(\"Take 2.3 every 3.14 hours, if dose is missed spin around 4.5 times\");\n    await addMedicationForm.save();\n    await medications.patientRecord.toHaveRowCount(2);\n    expect(await medications.patientRecord.table.findByText(newMedication)).toBeTruthy();\n  }\n};\nexport const TestAddToRecord: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const medications = await medicationsTables(canvasElement);\n    await medications.patientRecord.toHaveRowCount(1);\n    await medications.otherProvider.toHaveRowCount(4);\n    const medicationName = \"3 ML insulin aspart protamine, human 70 UNT/ML / insulin aspart, human 30 UNT/ML Pen Injector [NovoLog Mix]\";\n    medications.otherProvider.toHaveRowWithText(0, medicationName);\n    await medications.otherProvider.addToRecord(0);\n    const medDrawer = await medicationFormDrawer(canvasElement);\n    await medDrawer.save();\n    await medications.patientRecord.toHaveRowCount(2);\n    await medications.otherProvider.toHaveRowCount(3);\n    await medications.patientRecord.toHaveAnyRowWithText(medicationName);\n  }\n};\nexport const TestCancelAddNewMed: StoryObj<Props> = {\n  ...Basic,\n  play: async ({\n    canvasElement\n  }) => {\n    const medications = await medicationsTables(canvasElement);\n    await medications.patientRecord.toHaveRowCount(1);\n    const newMedication = \"cabozantinib 20 MG Oral Capsule [Cometriq]\";\n    medications.clickAddMedication();\n    const addMedicationForm = await medicationFormDrawer(canvasElement);\n    addMedicationForm.search(\"cab\");\n    await addMedicationForm.selectMedication(newMedication);\n    addMedicationForm.status(\"Active\");\n    addMedicationForm.cancel();\n    await medications.patientRecord.toHaveRowCount(1);\n    expect(medications.patientRecord.table.queryByText(newMedication)).toBeFalsy();\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...setupMedicationMocks({\\n    providerMedications,\\n    otherProviderMedications\\n  })\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nHideAddToRecord.parameters = {\n  ...HideAddToRecord.parameters,\n  docs: {\n    ...HideAddToRecord.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...Basic,\\n  args: {\\n    hideAddToRecord: true\\n  }\\n}\",\n      ...HideAddToRecord.parameters?.docs?.source\n    }\n  }\n};\nTestAddNewMed.parameters = {\n  ...TestAddNewMed.parameters,\n  docs: {\n    ...TestAddNewMed.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const medications = await medicationsTables(canvasElement);\\n    await medications.patientRecord.toHaveRowCount(1);\\n    const newMedication = \\\"albendazole 200 MG Oral Tablet [Albenza]\\\";\\n    medications.clickAddMedication();\\n    const addMedicationForm = await medicationFormDrawer(canvasElement);\\n    addMedicationForm.search(\\\"alb\\\");\\n    await addMedicationForm.selectMedication(newMedication);\\n    addMedicationForm.status(\\\"Active\\\");\\n    addMedicationForm.instructions(\\\"Take 2.3 every 3.14 hours, if dose is missed spin around 4.5 times\\\");\\n    await addMedicationForm.save();\\n    await medications.patientRecord.toHaveRowCount(2);\\n    expect(await medications.patientRecord.table.findByText(newMedication)).toBeTruthy();\\n  }\\n}\",\n      ...TestAddNewMed.parameters?.docs?.source\n    }\n  }\n};\nTestAddToRecord.parameters = {\n  ...TestAddToRecord.parameters,\n  docs: {\n    ...TestAddToRecord.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const medications = await medicationsTables(canvasElement);\\n    await medications.patientRecord.toHaveRowCount(1);\\n    await medications.otherProvider.toHaveRowCount(4);\\n    const medicationName = \\\"3 ML insulin aspart protamine, human 70 UNT/ML / insulin aspart, human 30 UNT/ML Pen Injector [NovoLog Mix]\\\";\\n    medications.otherProvider.toHaveRowWithText(0, medicationName);\\n    await medications.otherProvider.addToRecord(0);\\n    const medDrawer = await medicationFormDrawer(canvasElement);\\n    await medDrawer.save();\\n    await medications.patientRecord.toHaveRowCount(2);\\n    await medications.otherProvider.toHaveRowCount(3);\\n    await medications.patientRecord.toHaveAnyRowWithText(medicationName);\\n  }\\n}\",\n      ...TestAddToRecord.parameters?.docs?.source\n    }\n  }\n};\nTestCancelAddNewMed.parameters = {\n  ...TestCancelAddNewMed.parameters,\n  docs: {\n    ...TestCancelAddNewMed.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  ...Basic,\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const medications = await medicationsTables(canvasElement);\\n    await medications.patientRecord.toHaveRowCount(1);\\n    const newMedication = \\\"cabozantinib 20 MG Oral Capsule [Cometriq]\\\";\\n    medications.clickAddMedication();\\n    const addMedicationForm = await medicationFormDrawer(canvasElement);\\n    addMedicationForm.search(\\\"cab\\\");\\n    await addMedicationForm.selectMedication(newMedication);\\n    addMedicationForm.status(\\\"Active\\\");\\n    addMedicationForm.cancel();\\n    await medications.patientRecord.toHaveRowCount(1);\\n    expect(medications.patientRecord.table.queryByText(newMedication)).toBeFalsy();\\n  }\\n}\",\n      ...TestCancelAddNewMed.parameters?.docs?.source\n    }\n  }\n};"],"names":["medicationFormDrawer","canvasElement","canvas","within","drawer","waitFor","search","userEvent","name","status","instructions","medicationsTables","expect","tables","patientRecord","singleMedicationsTable","otherProvider","tableEl","clickInRow","row","menuItemId","getRow","tbody","count","text","next","patientMedications_stories","PatientMedications","Story","args","CTWProvider","React","PatientProvider","SYSTEM_ZUS_UNIVERSAL_ID","Basic","setupMedicationMocks","providerMedications","otherProviderMedications","HideAddToRecord","TestAddNewMed","medications","newMedication","addMedicationForm","TestAddToRecord","medicationName","TestCancelAddNewMed","_a","_c","_b"],"mappings":"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"}