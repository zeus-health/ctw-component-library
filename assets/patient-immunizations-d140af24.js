var p=Object.defineProperty;var l=(e,i,t)=>i in e?p(e,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[i]=t;var s=(e,i,t)=>(l(e,typeof i!="symbol"?i+"":i,t),t);import{R as r,r as I}from"./index-6f814c40.js";import{c as f}from"./index-74f03c09.js";import{u as h,a as _,V as z}from"./view-fhir-78ad4744.js";import{C as g}from"./coding-list-1d7c950f.js";import{w as y}from"./error-boundary-085fd19a.js";import{F as w,z as C,ao as D,y as v,L as R,M as E,ac as T,ap as N,b as P}from"./patient-provider-d5d45996.js";import{T as b}from"./table-c0cb6876.js";import"./_baseForOwn-b2e5e443.js";import"./sortBy-400dab6d.js";import{o as x}from"./sortBy-a6efb69f.js";import"./_baseClone-39df8af0.js";import"./_baseIsEqual-f087c1ca.js";import{i as F}from"./isEqual-8b7b0b49.js";import"./_createSet-fb89f2da.js";import{u as M}from"./use-breakpoints-9fcf4b5b.js";const V=[{title:"Date",render:e=>r.createElement("div",{className:"group-hover:ctw-underline"},e.occurrence)},{title:"Description",dataIndex:"description"},{title:"CVX Code",dataIndex:"cvxCode"}];class k extends w{constructor(){super(...arguments);s(this,"kind","Immunization")}get description(){return this.resource.vaccineCode.text}get cvxCode(){const t=C(D,this.resource.vaccineCode);return t==null?void 0:t.code}get occurrence(){return this.resource.occurrenceDateTime?v(this.resource.occurrenceDateTime):this.resource.occurrenceString}}const a=e=>{const i=e.map(o=>new k(o));return h(i,(o,n)=>F(c(o),c(n)))},c=e=>[e.description,e.cvxCode,e.occurrence];try{a.displayName="applyImmunizationFilters",a.__docgenInfo={description:"",displayName:"applyImmunizationFilters",props:{}}}catch{}function S(){return R(N,[],E(async(e,i)=>{try{const{resources:t}=await T("Immunization",e,{patientUPID:i.UPID});return x(a(t),[o=>o.occurrence??""],["desc"])}catch(t){throw new Error(`Failed fetching immunization information for patient: ${t}`)}},"req.patient_immunizations"))}const L=({record:e})=>r.createElement(z,{name:"Immunization Resource",resource:e.resource});function q({className:e}){const i=I.useRef(null),t=M(i),{featureFlags:o}=P(),n=S(),u=_({header:d=>d.description,details:B,getSourceDocument:!0});return r.createElement("div",{ref:i,"data-zus-telemetry-namespace":"Immunizations",className:f("ctw-patient-immunizations ctw-scrollable-pass-through-height ctw-bg-white",e,{"ctw-stacked":t.sm})},r.createElement(b,{RowActions:o!=null&&o.enableViewFhirButton?L:void 0,stacked:t.sm,isLoading:n.isLoading,records:n.data??[],columns:V,handleRowClick:u}))}const m=y(q,"PatientImmunizations"),B=e=>[{label:"Date",value:e.occurrence},{label:"Description",value:e.description},{label:"Vaccine Code",value:e.resource.vaccineCode.coding?r.createElement(g,{codings:e.resource.vaccineCode.coding}):void 0}];try{m.displayName="PatientImmunizations",m.__docgenInfo={description:"",displayName:"PatientImmunizations",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}export{m as P};
