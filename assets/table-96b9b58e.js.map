{"version":3,"file":"table-96b9b58e.js","sources":["../../node_modules/@heroicons/react/outline/esm/ChevronDownIcon.js","../../node_modules/@heroicons/react/outline/esm/ChevronUpIcon.js","../../src/components/core/pagination/pagination-list.tsx","../../src/components/core/table/table-colgroup.tsx","../../src/components/core/table/table-head.tsx","../../src/utils/types.ts","../../src/components/core/table/table-helpers.tsx","../../src/components/core/table/table-data-cell.tsx","../../src/components/core/table/table-full-length-row.tsx","../../src/components/core/table/table-rows.tsx","../../src/components/core/table/table.tsx"],"sourcesContent":["import * as React from \"react\";\n\nfunction ChevronDownIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19 9l-7 7-7-7\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronDownIcon);\nexport default ForwardRef;","import * as React from \"react\";\n\nfunction ChevronUpIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M5 15l7-7 7 7\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronUpIcon);\nexport default ForwardRef;","export const DEFAULT_PAGE_SIZE = 10;\n\nexport type PaginationListProps = {\n  total: number;\n  count: number;\n  changeCount: (amount: number) => void;\n};\n\nexport const PaginationList = ({\n  total,\n  count,\n  changeCount,\n}: PaginationListProps) => {\n  const allShown = count >= total || total === 0;\n  const hasPages = total > DEFAULT_PAGE_SIZE;\n\n  return (\n    <div className=\"ctw-pagination !ctw-mt-1 sm:!ctw-mt-2\">\n      <div className=\"ctw-text-gray-600 ctw-text-sm\">\n        Showing{\" \"}\n        <span className=\"ctw-font-medium\">{Math.min(count, total)}</span> of{\" \"}\n        <span className=\"ctw-font-medium\">{total}</span> records\n      </div>\n\n      {(!allShown || hasPages) && (\n        <div className=\"ctw-leading-5\">\n          {!allShown && (\n            <button\n              type=\"button\"\n              className=\"ctw-btn-clear ctw-link ctw-whitespace-nowrap\"\n              onClick={() => changeCount(total)}\n            >\n              Show All\n            </button>\n          )}\n\n          {allShown && hasPages && (\n            <button\n              type=\"button\"\n              className=\"ctw-btn-clear ctw-link ctw-whitespace-nowrap\"\n              onClick={() => changeCount(DEFAULT_PAGE_SIZE)}\n            >\n              Clear\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { MinRecordItem, TableColumn } from \"./table-helpers\";\n\nexport type TableColGroupProps<T extends MinRecordItem> = {\n  columns: TableColumn<T>[];\n};\n\nexport const TableColGroup = <T extends MinRecordItem>({\n  columns,\n}: TableColGroupProps<T>) => (\n  <colgroup>\n    {columns.map((column, index) => (\n      <col\n        key={column.title ?? index}\n        className={column.className}\n        width={column.widthPercent ? `${column.widthPercent}%` : \"0*\"}\n        style={{\n          minWidth: column.minWidth,\n        }}\n      />\n    ))}\n  </colgroup>\n);\n","import { ChevronDownIcon, ChevronUpIcon } from \"@heroicons/react/outline\";\nimport cx from \"classnames\";\nimport { MinRecordItem, TableColumn, TableSort } from \"./table-helpers\";\nimport { SortDir } from \"@/utils/sort\";\n\ntype SortChevronProps = {\n  sortOrder?: SortDir;\n};\n\nconst SortChevron = ({ sortOrder }: SortChevronProps) => {\n  const sharedClasses = \"ctw-text-gray-900 ctw-h-4\";\n  const activeClasses = cx(sharedClasses, \"ctw-opacity-100\");\n\n  switch (sortOrder) {\n    case \"desc\":\n      return <ChevronDownIcon className={activeClasses} />;\n    case \"asc\":\n      return <ChevronUpIcon className={activeClasses} />;\n    default:\n      return (\n        <ChevronUpIcon\n          className={cx(\n            sharedClasses,\n            \"ctw-opacity-0 group-hover:ctw-opacity-100\"\n          )}\n        />\n      );\n  }\n};\n\nexport type TableHeadProps<T extends MinRecordItem> = {\n  columns: TableColumn<T>[];\n  sort?: TableSort;\n  onSort?: (sortColumn: string) => void;\n};\n\nexport const TableHead = <T extends MinRecordItem>({\n  columns,\n  sort,\n  onSort,\n}: TableHeadProps<T>) => (\n  <thead data-zus-telemetry-namespace=\"TableHead\">\n    <tr>\n      {columns.map((column, index) => (\n        <th\n          className={cx(\n            \"ctw-group\",\n            column.sortIndices && \"ctw-cursor-pointer\"\n          )}\n          key={column.title ?? index}\n          scope=\"col\"\n          {...(column.sortIndices && onSort\n            ? { \"data-zus-telemetry-click\": `sort=${column.title}` }\n            : null)}\n          onClick={(event) => {\n            if (column.sortIndices && onSort) {\n              onSort(column.title || \"\");\n            }\n          }}\n        >\n          <div className=\"ctw-flex ctw-items-center ctw-space-x-2\">\n            <div>{column.title}</div>\n            {column.sortIndices && (\n              <SortChevron\n                sortOrder={\n                  sort?.columnTitle === column.title ? sort?.dir : undefined\n                }\n              />\n            )}\n          </div>\n        </th>\n      ))}\n    </tr>\n  </thead>\n);\n","export function isMouseEvent(e: unknown): e is MouseEvent {\n  return !!(e && typeof e === \"object\" && \"preventDefault\" in e);\n}\n\n// Properly check if the value is an \"empty\" value.\n// This works better than lodash's isEmpty in that it properly handles\n// number and boolean types.\n// See https://medium.com/@trmaphi/lodash-isempty-value-you-might-be-using-it-the-wrong-way-d83210d7decf\nexport const isEmptyValue = (value: unknown) =>\n  value === undefined ||\n  value === null ||\n  Number.isNaN(value) ||\n  (typeof value === \"object\" && Object.keys(value).length === 0) ||\n  (typeof value === \"string\" && value.trim().length === 0);\n","import { ReactNode } from \"react\";\nimport { isString, orderBy } from \"@/utils/nodash\";\nimport { SortDir } from \"@/utils/sort\";\nimport { isEmptyValue } from \"@/utils/types\";\n\nexport interface MinRecordItem {\n  id: string | number;\n}\n\nexport type TableSort = { columnTitle: string; dir: SortDir };\nexport type IndexSort<T> = { index: keyof T; dir?: SortDir; isDate?: boolean };\n\ntype DataIndexSpecified<T> = { dataIndex: keyof T; render?: never };\ntype RenderSpecified<T> = { dataIndex?: never; render: (row: T) => ReactNode };\n\n// A table column has an optional title\n// and then either a dataIndex or a render method but not both.\nexport type TableColumn<T extends MinRecordItem> = {\n  title?: string;\n  className?: string;\n  widthPercent?: number;\n  minWidth?: number | string;\n  sortIndices?: IndexSort<T>[];\n} & (DataIndexSpecified<T> | RenderSpecified<T>);\n\nexport function sortRecords<T extends MinRecordItem>(\n  records: T[],\n  columns: TableColumn<T>[],\n  sort?: TableSort\n) {\n  const sortColumn = columns.find(\n    (column) => column.title === sort?.columnTitle\n  );\n  // If there is a sort applied to a column, then sort the records.\n  if (sort && sortColumn?.sortIndices) {\n    // Unless the direction of the sort index is overridden, set it to the user's sort selection.\n    sortColumn.sortIndices = sortColumn.sortIndices.map((indexSort) => ({\n      dir: sort.dir,\n      ...indexSort,\n    }));\n    return sortByIndices(records, sortColumn.sortIndices);\n  }\n  return records;\n}\n\ntype Comparator<T> = (a: T) => unknown;\nexport function sortByIndices<T>(records: T[], indexSorts: IndexSort<T>[]) {\n  const dateIteratee =\n    (column: keyof T): Comparator<T> =>\n    (record: T) => {\n      const value = record[column];\n      if (!isString(value) || !value) {\n        return 0;\n      }\n      return new Date(value).getTime();\n    };\n\n  // Makes a list of iteratees, where each index iteratee is preceded by an iteratee that ensures blanks go last.\n  const iteratees: (Comparator<T> | keyof T)[] = [];\n  const orders: SortDir[] = [];\n  indexSorts.forEach((indexSort) => {\n    const { index, dir, isDate } = indexSort;\n    iteratees.push(\n      (o) => isEmptyValue(o[index]),\n      isDate ? dateIteratee(index) : index\n    );\n    orders.push(\"asc\", dir || \"asc\");\n  });\n\n  return orderBy(records, iteratees, orders);\n}\n","import cx from \"classnames\";\nimport { ReactNode } from \"react\";\nimport { MinRecordItem, TableColumn } from \"./table-helpers\";\n\ntype TableColumnProps<T extends MinRecordItem> = {\n  column: TableColumn<T>;\n  record: T;\n  index: number;\n};\n\nexport const TableDataCell = <T extends MinRecordItem>({\n  column,\n  record,\n  index,\n}: TableColumnProps<T>): JSX.Element => {\n  const value = column.dataIndex\n    ? (record[column.dataIndex] as unknown as ReactNode)\n    : undefined;\n\n  return (\n    <td\n      key={column.title ?? index}\n      className={cx(\n        { \"ctw-font-medium ctw-text-content-black\": index === 0 },\n        column.className,\n        // Added ctw-break-words because AbdominalReallyLongWordThatShouldBReakButDoeskadjlkajflkajsf doesn't wrap correclty without it.\n        \"ctw-hyphens-auto ctw-break-words\"\n      )}\n    >\n      {column.render ? column.render(record) : value}\n    </td>\n  );\n};\n","import { ReactNode } from \"react\";\n\nexport const TableFullLengthRow = ({\n  children,\n  colSpan,\n}: {\n  children: ReactNode;\n  colSpan: number;\n}) => (\n  <tr>\n    <td className=\"ctw-table-full-length-row\" colSpan={colSpan}>\n      {children}\n    </td>\n  </tr>\n);\n","import cx from \"classnames\";\nimport { ComponentType, ReactElement } from \"react\";\nimport { Spinner } from \"../spinner\";\nimport { TableDataCell } from \"./table-data-cell\";\nimport { TableFullLengthRow } from \"./table-full-length-row\";\nimport { MinRecordItem, TableColumn } from \"./table-helpers\";\nimport { isFunction } from \"@/utils/nodash\";\n\nexport type TableRowsProps<T extends MinRecordItem> = {\n  RowActions?: ComponentType<{ record: T }>;\n  columns: TableColumn<T>[];\n  emptyMessage: string | ReactElement;\n  getRowClassName?: (record: T) => cx.Argument;\n  handleRowClick?: (record: T) => void;\n  isLoading: boolean;\n  records: T[];\n};\n\nexport const TableRows = <T extends MinRecordItem>({\n  records,\n  columns,\n  isLoading,\n  emptyMessage,\n  handleRowClick,\n  RowActions,\n  getRowClassName,\n}: TableRowsProps<T>) => {\n  if (isLoading) {\n    return (\n      <TableFullLengthRow colSpan={columns.length}>\n        <div className=\"ctw-flex ctw-justify-center ctw-space-x-2\">\n          <span>Loading...</span>\n          <Spinner />\n        </div>\n      </TableFullLengthRow>\n    );\n  }\n\n  if (records.length === 0) {\n    return (\n      <TableFullLengthRow colSpan={columns.length}>\n        <span className=\"ctw-empty-message -ctw-mt-3.5 sm:ctw-mt-0\">\n          {emptyMessage}\n        </span>\n      </TableFullLengthRow>\n    );\n  }\n\n  return (\n    <>\n      {records.map((record) => (\n        <tr\n          data-zus-telemetry-click={handleRowClick ? \"Table row\" : null}\n          // ctw-mx-px fixes bug where side borders disappear on hover when stacked.\n          className={cx(\n            \"ctw-group ctw-relative ctw-mx-px\",\n            isFunction(getRowClassName) ? getRowClassName(record) : \"\",\n            {\n              \"ctw-cursor-pointer hover:ctw-bg-bg-lighter\":\n                isFunction(handleRowClick),\n            }\n          )}\n          key={record.id}\n          onClick={({ target }) => {\n            // This is for the case where a user clicks area near the button (but not on), we do not want have the onRowClick handler trigger as that will cause confusion to the user.\n            if (\n              target instanceof HTMLElement &&\n              target.querySelectorAll(\"button\").length\n            ) {\n              return;\n            }\n\n            if (handleRowClick) handleRowClick(record);\n          }}\n        >\n          {columns.map((column, index) => (\n            <TableDataCell\n              key={column.title ?? index}\n              column={column}\n              record={record}\n              index={index}\n            />\n          ))}\n          {RowActions && (\n            <td className=\"ctw-table-row-actions group-hover:ctw-visible\">\n              <RowActions record={record} />\n            </td>\n          )}\n        </tr>\n      ))}\n    </>\n  );\n};\n","import cx from \"classnames\";\nimport { ReactElement, ReactNode, useEffect, useRef, useState } from \"react\";\nimport {\n  DEFAULT_PAGE_SIZE,\n  PaginationList,\n} from \"../pagination/pagination-list\";\nimport { TableColGroup } from \"./table-colgroup\";\nimport { TableHead } from \"./table-head\";\nimport {\n  MinRecordItem,\n  sortRecords,\n  TableColumn,\n  TableSort,\n} from \"./table-helpers\";\nimport { TableRows, TableRowsProps } from \"./table-rows\";\nimport \"./table.scss\";\n\nexport type RowActionsProps<T extends MinRecordItem> = { record: T };\n\nexport type TableProps<T extends MinRecordItem> = {\n  className?: cx.Argument;\n  records: T[];\n  removeLeftAndRightBorders?: boolean;\n  columns: TableColumn<T>[];\n  isLoading?: boolean;\n  /** Displayed when we have 0 records. */\n  emptyMessage?: string | ReactElement;\n  showTableHead?: boolean;\n  stacked?: boolean;\n  sort?: TableSort;\n  onSort?: (sort: TableSort) => void;\n  hidePagination?: boolean;\n  children?: ReactNode;\n} & Pick<\n  TableRowsProps<T>,\n  \"handleRowClick\" | \"RowActions\" | \"getRowClassName\"\n>;\n\nexport type TableBaseProps<T extends MinRecordItem> = Omit<\n  TableProps<T>,\n  \"records\" | \"columns\"\n>;\n\nexport const Table = <T extends MinRecordItem>({\n  className,\n  columns,\n  records,\n  isLoading = false,\n  emptyMessage: message = \"No records found\",\n  showTableHead = true,\n  removeLeftAndRightBorders = false,\n  stacked,\n  sort,\n  onSort,\n  handleRowClick,\n  RowActions,\n  getRowClassName,\n  hidePagination = false,\n  children,\n}: TableProps<T>) => {\n  const tableRef = useRef<HTMLTableElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [showLeftShadow, setShowLeftShadow] = useState(false);\n  const [showRightShadow, setShowRightShadow] = useState(false);\n  const [count, setCount] = useState(DEFAULT_PAGE_SIZE);\n\n  const sortedRecords = sortRecords(records, columns, sort);\n\n  const updateShadows = () => {\n    const container = scrollContainerRef.current;\n    const table = tableRef.current;\n    if (container && table) {\n      setShowLeftShadow(container.scrollLeft > 0);\n      const rightSide = container.scrollLeft + container.clientWidth;\n      setShowRightShadow(rightSide < table.clientWidth);\n    }\n  };\n\n  const switchSort = (newSortColumn: string) => {\n    const newState: TableSort = {\n      columnTitle: newSortColumn,\n      dir: \"asc\",\n    };\n    if (newSortColumn === sort?.columnTitle) {\n      newState.dir = sort.dir === \"asc\" ? \"desc\" : \"asc\";\n    }\n    if (onSort) onSort(newState);\n  };\n\n  useEffect(() => {\n    const container = scrollContainerRef.current;\n\n    // Update right away.\n    updateShadows();\n\n    // Update on scroll or resize events.\n    container?.addEventListener(\"scroll\", updateShadows);\n    window.addEventListener(\"resize\", updateShadows);\n\n    return () => {\n      container?.removeEventListener(\"scroll\", updateShadows);\n      window.removeEventListener(\"resize\", updateShadows);\n    };\n  }, [scrollContainerRef, isLoading]);\n\n  const hasData = !isLoading && records.length > 0;\n\n  return (\n    <div\n      data-zus-telemetry-namespace=\"Table\"\n      className={cx(\"ctw-space-y-4\", {\n        \"ctw-table-stacked\": stacked,\n      })}\n    >\n      <div\n        className={cx(\"ctw-table-container\", className, {\n          \"ctw-table-scroll-left-shadow\": showLeftShadow,\n          \"ctw-table-scroll-right-shadow\": showRightShadow,\n          \"ctw-border-x-0\": removeLeftAndRightBorders,\n        })}\n      >\n        <div className=\"ctw-scrollbar\" ref={scrollContainerRef}>\n          <table ref={tableRef}>\n            {hasData && <TableColGroup columns={columns} />}\n            {showTableHead && hasData && (\n              <TableHead columns={columns} sort={sort} onSort={switchSort} />\n            )}\n\n            <tbody className={cx({ \"ctw-h-[7rem]\": records.length === 0 })}>\n              <TableRows\n                getRowClassName={getRowClassName}\n                records={sortedRecords.slice(0, count)}\n                handleRowClick={handleRowClick}\n                RowActions={RowActions}\n                columns={columns}\n                isLoading={isLoading}\n                emptyMessage={message}\n              />\n            </tbody>\n          </table>\n        </div>\n      </div>\n      {!hidePagination && !isLoading && (\n        <PaginationList\n          total={records.length}\n          count={count}\n          changeCount={setCount}\n        />\n      )}\n      {children}\n    </div>\n  );\n};\n"],"names":["ChevronDownIcon","props","svgRef","React.createElement","ForwardRef","React.forwardRef","ChevronDownIcon$1","ChevronUpIcon","ChevronUpIcon$1","DEFAULT_PAGE_SIZE","PaginationList","total","count","changeCount","allShown","hasPages","React","TableColGroup","columns","column","index","SortChevron","sortOrder","sharedClasses","activeClasses","cx","TableHead","sort","onSort","event","isMouseEvent","isEmptyValue","value","sortRecords","records","sortColumn","indexSort","sortByIndices","indexSorts","dateIteratee","record","isString","iteratees","orders","dir","isDate","o","orderBy","TableDataCell","TableFullLengthRow","children","colSpan","TableRows","isLoading","emptyMessage","handleRowClick","RowActions","getRowClassName","Spinner","isFunction","target","Table","className","message","showTableHead","removeLeftAndRightBorders","stacked","hidePagination","tableRef","useRef","scrollContainerRef","showLeftShadow","setShowLeftShadow","useState","showRightShadow","setShowRightShadow","setCount","sortedRecords","updateShadows","container","table","rightSide","switchSort","newSortColumn","newState","useEffect","hasData"],"mappings":"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"}